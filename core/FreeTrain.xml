<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FreeTrain</name>
    </assembly>
    <members>
        <member name="T:FreeTrain.Contributions.Common.StructureGroupGroup">
            <summary>
            Group of StructureGroups.
            
            This object implements IListSource to support data-binding.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Common.StructureGroupGroup.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Contributions.Common.StructureGroupGroup.core">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Contributions.Common.StructureGroupGroup.list">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.StructureGroupGroup.Item(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Common.StructureGroupGroup.getEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Common.StructureGroupGroup.GetList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:FreeTrain.Contributions.Common.StructureGroupGroup.ContainsListCollection">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Contributions.Common.FixedSizeStructurePlacementController">
            <summary>
            FixedSizeStructureController
            </summary>
        </member>
        <member name="F:FreeTrain.Contributions.Common.FixedSizeStructurePlacementController.contrib">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.FixedSizeStructurePlacementController.Contrib">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Common.FixedSizeStructurePlacementController.#ctor(FreeTrain.Contributions.Common.FixedSizeStructureContribution,FreeTrain.Controllers.IControllerSite)">
            <summary>
            
            </summary>
            <param name="contrib"></param>
            <param name="site"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Common.FixedSizeStructurePlacementController.OnSelected(FreeTrain.World.Cube)">
            <summary>
            
            </summary>
            <param name="cube"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Common.FixedSizeStructurePlacementController.OnDetached">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Common.FixedSizeStructurePlacementController.DrawBefore(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="surface"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Common.FixedSizeStructurePlacementController.DrawVoxel(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="canvas"></param>
            <param name="loc"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Common.FixedSizeStructurePlacementController.DrawAfter(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="surface"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Common.FixedSizeStructurePlacementController.CompletionHandler.handle(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:FreeTrain.Contributions.Common.FixedSizeStructureRemovalController">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Contributions.Common.FixedSizeStructureRemovalController.contrib">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Common.FixedSizeStructureRemovalController.#ctor(FreeTrain.Contributions.Common.FixedSizeStructureContribution,FreeTrain.Controllers.IControllerSite)">
            <summary>
            
            </summary>
            <param name="contrib"></param>
            <param name="site"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Common.FixedSizeStructureRemovalController.OnSelected(FreeTrain.World.Cube)">
            <summary>
            
            </summary>
            <param name="cube"></param>
        </member>
        <member name="T:FreeTrain.Contributions.Common.FixedSizeStructureContribution">
            <summary>
            StructureContribution for structures of a fixed size.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Common.FixedSizeStructureContribution.#ctor(System.Xml.XmlElement)">
            <summary>
            Parses a structure contribution from a DOM node.
            </summary>
            <exception cref="T:System.Xml.XmlException">If the parsing fails</exception>
        </member>
        <member name="M:FreeTrain.Contributions.Common.FixedSizeStructureContribution.#ctor(FreeTrain.Contributions.Common.IAbstractStructure,System.Xml.XmlElement,System.Xml.XmlElement,System.Boolean)">
            <summary>
            
            </summary>
            <param name="master"></param>
            <param name="pic"></param>
            <param name="main"></param>
            <param name="opposite"></param>
        </member>
        <member name="F:FreeTrain.Contributions.Common.FixedSizeStructureContribution.sprites">
            <summary>
            Sprite set to draw this structure. Indexed as [x,y,z]
            and may contain null if there's no need to draw that voxel.
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.FixedSizeStructureContribution.Sprites">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Contributions.Common.FixedSizeStructureContribution.size">
            <summary> Size of this structure in voxel by voxel. </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.FixedSizeStructureContribution.Size">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Common.FixedSizeStructureContribution.Create(FreeTrain.World.Location,System.Boolean)">
            <summary>
            Creates a new instance of this structure type to the specified location.
            </summary>
            <param name="initiallyOwned">
            If the structure is a subsidiary, this flag controls whether the
            structure is initially owned or not. Otherwise this flag has no effect.
            </param>
            <param name="baseLoc"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Common.FixedSizeStructureContribution.Create(FreeTrain.World.WorldLocator,System.Boolean)">
            <summary>
            
            </summary>
            <param name="wloc"></param>
            <param name="initiallyOwned"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Common.FixedSizeStructureContribution.CanBeBuilt(FreeTrain.World.Location,FreeTrain.World.ControlMode)">
            <summary>
            Returns true iff this structure can be built at the specified location.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Common.FixedSizeStructureContribution.GetSprite(FreeTrain.World.Distance)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Common.FixedSizeStructureContribution.CreatePreview(System.Drawing.Size)">
            <summary>
            
            </summary>
            <param name="pixelSize"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Common.FixedSizeStructureContribution.CreateBuilder(FreeTrain.Controllers.IControllerSite)">
            <summary>
            
            </summary>
            <param name="site"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Common.FixedSizeStructureContribution.CreateRemover(FreeTrain.Controllers.IControllerSite)">
            <summary>
            
            </summary>
            <param name="site"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Common.FixedSizeStructureContribution.CreatePreviewWorld(System.Drawing.Size,System.Collections.IDictionary)">
            <summary>
            
            </summary>
            <param name="minsizePixel"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Common.IAbstractStructure">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.IAbstractStructure.UnitPrice">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.IAbstractStructure.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.IAbstractStructure.MinHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.IAbstractStructure.MaxHeight">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Contributions.Common.IEntityBuilder">
            <summary>
            IEntityBuilder の概要の説明です。
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.IEntityBuilder.Population">
            <summary> 
            Population of this structure, or null if this structure is not populated. 
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.IEntityBuilder.ComputerCannotBuild">
            <summary>
            True if the computer (the development algorithm) is not allowed to
            build this structure.
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.IEntityBuilder.PlayerCannotBuild">
            <summary>
            True if the player is not allowed to build this structure.
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.IEntityBuilder.Name">
            <summary>
            Name of this entity builder. Primarily used as the display name.
            Doesn't need to be unique.
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.IEntityBuilder.Price">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.IEntityBuilder.PricePerArea">
            <summary>
            price par area (minimum).
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Common.IEntityBuilder.CreatePreview(System.Drawing.Size)">
            <summary>
            Creates a preview
            </summary>
            <param name="pixelSize"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Common.IEntityBuilder.CreateBuilder(FreeTrain.Controllers.IControllerSite)">
            <summary>
            
            </summary>
            <param name="site"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Common.IEntityBuilder.CreateRemover(FreeTrain.Controllers.IControllerSite)">
            <summary>
            
            </summary>
            <param name="site"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Common.IPreviewWorldBuilder">
            <summary>
            IPreviewWorldBuilder
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Common.IPreviewWorldBuilder.CreatePreviewWorld(System.Drawing.Size,System.Collections.IDictionary)">
            <summary>
            
            </summary>
            <param name="minSizePixel"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Common.LineContribution">
            <summary>
            Base class for SpecialRailContribution and RoadContritbuion
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Common.LineContribution.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="id"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Common.LineContribution.CanBeBuilt(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            Returns true if rails can be built between the two given locations
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Common.LineContribution.Build(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            Builds rail roads between the two given locations.
            This method will be called only when canBeBuilt(loc1,loc2) returns true.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Common.LineContribution.Remove(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            Removes this special rail road between the given two locations.
            It is not an error for some other kinds of rail to appear in between
            these two.
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.LineContribution.Name">
            <summary>
            Gets the name of this special rail.
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.LineContribution.OneLineDescription">
            <summary>
            Gets a one line description of this rail.
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.LineContribution.PreviewBitmap">
            <summary>
            Gets the bitmap that will be used in the construction dialog.
            Should reload a fresh copy every time this method is called.
            The caller should dispose the object if it becomes unnecessary.
            </summary>
        </member>
        <member name="T:FreeTrain.Contributions.Common.LineContribution.DirectionModes">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Contributions.Common.LineContribution.DirectionModes.FourWay">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Contributions.Common.LineContribution.DirectionModes.EightWay">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.LineContribution.DirectionMode">
            <summary>
            Available directions
            </summary>
        </member>
        <member name="T:FreeTrain.Contributions.Common.PictureContribution">
            <summary>
            Picture can be contributed.
            </summary>
        </member>
        <member name="F:FreeTrain.Contributions.Common.PictureContribution.picture">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.PictureContribution.Picture">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Common.PictureContribution.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:FreeTrain.Contributions.Common.StructureContribution">
            <summary>
            Generic structure contribution.
            
            Structure is an object that occupies a cubic area in the World,
            has sprites to draw it.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Common.StructureContribution.#ctor(System.Xml.XmlElement)">
            <summary>
            Parses a structure contribution from a DOM node.
            </summary>
            <exception cref="T:System.Xml.XmlException">If the parsing fails</exception>
        </member>
        <member name="M:FreeTrain.Contributions.Common.StructureContribution.#ctor(FreeTrain.Contributions.Common.StructureContribution,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="original"></param>
            <param name="type"></param>
            <param name="id"></param>
        </member>
        <member name="F:FreeTrain.Contributions.Common.StructureContribution.core">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.StructureContribution.Core">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Contributions.Common.StructureContribution.group">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.StructureContribution.Group">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Common.StructureContribution.GetGroup(System.String)">
            <summary>
            Implemented by the derived class and
            used to determine which group this structure should go.
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.StructureContribution.Name">
            <summary>
            Name of this entity builder. Primarily used as the display name.
            Doesn't need to be unique.
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.StructureContribution.Population">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.StructureContribution.ComputerCannotBuild">
            <summary>
            True if the computer (the development algorithm) is not allowed to
            build this structure.
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.StructureContribution.PlayerCannotBuild">
            <summary>
            True if the player is not allowed to build this structure.
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.StructureContribution.Price">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.StructureContribution.PricePerArea">
            <summary>
            price par area (minimum).
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Common.StructureContribution.CreatePreview(System.Drawing.Size)">
            <summary>
            Creates a preview
            </summary>
            <param name="pixelSize"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Common.StructureContribution.CreateBuilder(FreeTrain.Controllers.IControllerSite)">
            <summary>
            
            </summary>
            <param name="site"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Common.StructureContribution.CreateRemover(FreeTrain.Controllers.IControllerSite)">
            <summary>
            
            </summary>
            <param name="site"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Common.StructureContribution.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Common.StructureContribution.EntityBuilderInternal">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Common.StructureContribution.EntityBuilderInternal.#ctor(System.Xml.XmlElement,System.String)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ownerId"></param>
        </member>
        <member name="P:FreeTrain.Contributions.Common.StructureContribution.EntityBuilderInternal.Population">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.StructureContribution.EntityBuilderInternal.ComputerCannotBuild">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.StructureContribution.EntityBuilderInternal.PlayerCannotBuild">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.StructureContribution.EntityBuilderInternal.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.StructureContribution.EntityBuilderInternal.Price">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.StructureContribution.EntityBuilderInternal.PricePerArea">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Common.StructureContribution.EntityBuilderInternal.CreatePreview(System.Drawing.Size)">
            <summary>
            
            </summary>
            <param name="pixelSize"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Common.StructureContribution.EntityBuilderInternal.CreateBuilder(FreeTrain.Controllers.IControllerSite)">
            <summary>
            
            </summary>
            <param name="site"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Common.StructureContribution.EntityBuilderInternal.CreateRemover(FreeTrain.Controllers.IControllerSite)">
            <summary>
            
            </summary>
            <param name="site"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Common.StructureContribution.PopulationReferenceImpl">
            <summary>
            Used to resolve references to the population object.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Common.StructureContribution.PopulationReferenceImpl.GetRealObject(System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Common.StructureGroup">
            <summary>
            Group of StructureContributions.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Common.StructureGroup.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="F:FreeTrain.Contributions.Common.StructureGroup.name">
            <summary> Name of this group. </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Common.StructureGroup.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Common.StructureGroup.Add(FreeTrain.Contributions.Common.StructureContribution)">
            <summary>
            
            </summary>
            <param name="sc"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Common.StructureGroup.Get(System.Int32)">
            <summary>
            
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Common.StructureGroup.Remove(FreeTrain.Contributions.Common.StructureContribution)">
            <summary>
            
            </summary>
            <param name="sc"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Common.StructureGroup.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Common.SubDividedStructureContribution">
            <summary>
            SubDividedStructureContribution の概要の説明です。
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Common.SubDividedStructureContribution.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Contributions.Land.Bulldozer">
            <summary>
            Removes any land voxel in the region.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Land.Bulldozer.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Land.Bulldozer.Create(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the land that should be used to fill (x,y) within [x1,y1]-[x2,y2] (inclusive).
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Land.Bulldozer.bulldoze(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc1"></param>
            <param name="loc2"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Land.Bulldozer.CreatePreview(System.Drawing.Size)">
            <summary>
            Creates the preview image of the land builder.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Land.Bulldozer.CreateBuilder(FreeTrain.Controllers.IControllerSite)">
            <summary>
            
            </summary>
            <param name="site"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Land.LandBuilderGroupGroup">
            <summary>
            Group of LandGroup.
            
            This object implements IListSource to support data-binding.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Land.LandBuilderGroupGroup.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Land.LandBuilderGroupGroup.Item(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Land.DefaultControllerImpl">
            <summary>
            ModalController implementation typical for most of the land builder contribution.
            This class is here just for the code reuse.
            </summary>
        </member>
        <member name="T:FreeTrain.Contributions.Land.DefaultControllerImpl.SpriteBuilder">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Land.DefaultControllerImpl.#ctor(FreeTrain.Contributions.Land.LandBuilderContribution,FreeTrain.Controllers.IControllerSite,FreeTrain.Contributions.Land.DefaultControllerImpl.SpriteBuilder)">
            <summary>
            
            </summary>
            <param name="contrib"></param>
            <param name="site"></param>
            <param name="spriteBuilder"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Land.DefaultControllerImpl.OnRectSelected(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc1"></param>
            <param name="loc2"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Land.DefaultControllerImpl.DrawBefore(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="surface"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Land.DefaultControllerImpl.DrawVoxel(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="canvas"></param>
            <param name="loc"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Land.DefaultControllerImpl.DrawAfter(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="surface"></param>
        </member>
        <member name="T:FreeTrain.Contributions.Land.LandBuilderContribution">
            <summary>
            Plug-in that places land voxels.
            
            This contribution allows the tiling algorithm to be customized.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Land.LandBuilderContribution.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:FreeTrain.Contributions.Land.LandBuilderContribution.Grid">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Land.LandBuilderContribution.GetGroup(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Land.LandBuilderContribution.Create(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="z"></param>
            <param name="owned"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Land.LandBuilderContribution.Create(FreeTrain.World.Location,FreeTrain.World.Location,System.Boolean)">
            <summary>
            Fills the specified region with lands.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Land.LandBuilderContribution.Create(FreeTrain.World.Location,System.Boolean)">
            <summary> Creates a single patch. </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Land.LandBuilderContribution.CreateRemover(FreeTrain.Controllers.IControllerSite)">
            <summary>
            
            </summary>
            <param name="site"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Land.LandBuilderGroup">
            <summary>
            Group of LandContribution.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Land.LandBuilderGroup.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Land.LandBuilderGroup.Remove(FreeTrain.Contributions.Land.LandBuilderContribution)">
            <summary>
            
            </summary>
            <param name="sc"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Land.LandBuilderGroup.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Land.RandomLandBuilder">
            <summary>
            RandomLandBuilder の概要の説明です。
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Land.RandomLandBuilder.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:FreeTrain.Contributions.Land.RandomLandBuilder.lands">
            <summary>
            Lands in this array will be placed randomly.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Land.RandomLandBuilder.Create(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="z"></param>
            <param name="owned"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Land.RandomLandBuilder.CreatePreview(System.Drawing.Size)">
            <summary>
            Creates the preview image of the land builder.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Land.RandomLandBuilder.CreateBuilder(FreeTrain.Controllers.IControllerSite)">
            <summary>
            
            </summary>
            <param name="site"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Land.StaticLandBuilder">
            <summary>
            Places static chip as the land.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Land.StaticLandBuilder.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:FreeTrain.Contributions.Land.StaticLandBuilder.sprite">
            <summary> Sprite of this land contribution. </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Land.StaticLandBuilder.Create(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the land that should be used to fill (x,y) within [x1,y1]-[x2,y2] (inclusive).
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Land.StaticLandBuilder.CreatePreview(System.Drawing.Size)">
            <summary>
            Creates the preview image of the land builder.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Land.StaticLandBuilder.CreateBuilder(FreeTrain.Controllers.IControllerSite)">
            <summary>
            
            </summary>
            <param name="site"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Others.EmptyNewGameContributionImpl">
            <summary>
            Creates a new empty game by allowing the user to specify the size of the world.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Others.EmptyNewGameContributionImpl.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:FreeTrain.Contributions.Others.EmptyNewGameContributionImpl.Author">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Others.EmptyNewGameContributionImpl.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Others.EmptyNewGameContributionImpl.Description">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Others.EmptyNewGameContributionImpl.CreateNewGame">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Others.MenuContribution">
            <summary>
            Plug-in that exposes menu item.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Others.MenuContribution.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Others.MenuContribution.MergeMenu(System.Windows.Forms.MainMenu)">
            <summary>
            The callee can merge menu items into container at this timing.
            </summary>
        </member>
        <member name="T:FreeTrain.Contributions.Others.NewGameContribution">
            <summary>
            Plug-in that creates a new game.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Others.NewGameContribution.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:FreeTrain.Contributions.Others.NewGameContribution.Name">
            <summary>
            Name of the new game.
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Others.NewGameContribution.Author">
            <summary>
            Author of the new game.
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Others.NewGameContribution.Description">
            <summary>
            Human-readable description of the new game.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Others.NewGameContribution.CreateNewGame">
            <summary>
            Creates a new game by creating a new instance of the World object.
            </summary>
            <returns>null to indicate that the operation was cancelled.</returns>
        </member>
        <member name="T:FreeTrain.Contributions.Others.NewWorldDialog">
            <summary>
            Dialog box to create a new World object.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Others.NewWorldDialog.Dispose(System.Boolean)">
            <summary>
            使用されているリソースに後処理を実行します。
            </summary>
        </member>
        <member name="F:FreeTrain.Contributions.Others.NewWorldDialog.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Others.NewWorldDialog.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Others.NewWorldDialog.createWorld">
            <summary>
            Creates a new empty world as specified by the user.
            </summary>
        </member>
        <member name="T:FreeTrain.Contributions.Population.AgriculturalPopulation">
            <summary>
            HourlyPopulation with a typical distribution for
            agricultural lands
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Population.AgriculturalPopulation.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="baseP"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Population.AgriculturalPopulation.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:FreeTrain.Contributions.Population.BasePopulation">
            <summary>
            Computes the population from the base population.
            
            The Population class has a special code to support de-serizliation.
            We'd like the de-serialization of Population not to create a fresh
            instance of Population, but we'd like it to resolve to the existing
            instance.
            
            However, Population object doesn't know how to resolve to its running
            instance. Thus it takes an IObjectReference as a parameter, which should
            know how to resolve to the actual instance.
            
            During the serialization, this resolver is stored in place of the
            population object and then asked to restore the reference.
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Population.BasePopulation.Residents">
            <summary>
            Number of population that is counted toward the total population of the world.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Population.BasePopulation.CalcPopulation(FreeTrain.World.Time)">
            <summary>
            Computes the population of the given structure at the given time.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Population.BasePopulation.Load(System.Xml.XmlElement)">
            <summary>
            Loads a population from the plug-in manifest file.
            </summary>
        </member>
        <member name="T:FreeTrain.Contributions.Population.CombinationPopulation">
            <summary>
            Populaion that additively combines other populations.
            
            Syntax in XML would be:
            &lt;population>
              &lt;class name="...CombinationPopulation"/>
              &lt;population>
                ...
              &lt;/population>
              &lt;population>
                ...
              &lt;/population>
              ...
            &lt;/population>
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Population.CombinationPopulation.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:FreeTrain.Contributions.Population.CombinationPopulation.Residents">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Population.CombinationPopulation.CalcPopulation(FreeTrain.World.Time)">
            <summary>
            
            </summary>
            <param name="currentTime"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Population.ConstantPopulation">
            <summary>
            Always the same population
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Population.ConstantPopulation.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Population.ConstantPopulation.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:FreeTrain.Contributions.Population.ConstantPopulation.Residents">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Population.ConstantPopulation.CalcPopulation(FreeTrain.World.Time)">
            <summary>
            
            </summary>
            <param name="currentTime"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Population.HourlyPopulation">
            <summary>
            Population depends on hour of the day
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Population.HourlyPopulation.#ctor(System.Int32,System.Int32[],System.Int32[])">
            <summary>
            
            </summary>
            <param name="basep"></param>
            <param name="weekdayHourTable"></param>
            <param name="weekendHourTable"></param>
        </member>
        <member name="F:FreeTrain.Contributions.Population.HourlyPopulation.weekdayHourTable">
            <summary>
            Ration of each hour in percentage
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Population.HourlyPopulation.Residents">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Population.HourlyPopulation.CalcPopulation(FreeTrain.World.Time)">
            <summary>
            
            </summary>
            <param name="currentTime"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Population.MultiplierPopulation">
            <summary>
            Multiplies another population by a constant factor.
            This object is not-persistent.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Population.MultiplierPopulation.#ctor(System.Int32,FreeTrain.Contributions.Population.BasePopulation)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="core"></param>
        </member>
        <member name="P:FreeTrain.Contributions.Population.MultiplierPopulation.Residents">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Population.MultiplierPopulation.CalcPopulation(FreeTrain.World.Time)">
            <summary>
            
            </summary>
            <param name="currentTime"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Population.OfficePopulation">
            <summary>
            HourlyPopulation with a typical distribution for
            residential structures (such as houses, apartments, etc.)
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Population.OfficePopulation.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="baseP"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Population.OfficePopulation.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:FreeTrain.Contributions.Population.PersistentPopulation">
            <summary>
            Population implementation that wraps another Population and
            provides persistence support.
            
            During deserialization, reference to this object is re-connected
            to the existing PersistentPopulation object.
            </summary>
        </member>
        <member name="F:FreeTrain.Contributions.Population.PersistentPopulation.resolver">
            <summary>
            Object used to restore the reference to this Population object.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Population.PersistentPopulation.#ctor(FreeTrain.Contributions.Population.BasePopulation,System.Runtime.Serialization.IObjectReference)">
            <summary>
            
            </summary>
            <param name="core"></param>
            <param name="reference">
            Object that returns a reference to the existing same object.
            This object needs to be serializable, and will be used to
            restore reference correctly.
            </param>
        </member>
        <member name="P:FreeTrain.Contributions.Population.PersistentPopulation.Residents">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Population.PersistentPopulation.CalcPopulation(FreeTrain.World.Time)">
            <summary>
            
            </summary>
            <param name="currentTime"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Population.PersistentPopulation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Population.PersistentPopulation.SerializationHelper.GetRealObject(System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Population.ResidentialPopulation">
            <summary>
            HourlyPopulation with a typical distribution for
            residential structures (such as houses, apartments, etc.)
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Population.ResidentialPopulation.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="baseP"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Population.ResidentialPopulation.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:FreeTrain.Contributions.Population.RestaurantPopulation">
            <summary>
            HourlyPopulation with a typical distribution for
            restaurants.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Population.RestaurantPopulation.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="baseP"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Population.RestaurantPopulation.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:FreeTrain.Contributions.Population.ShopperPopulation">
            <summary>
            HourlyPopulation with a typical distribution for
            shoppers to shops.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Population.ShopperPopulation.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="baseP"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Population.ShopperPopulation.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:FreeTrain.Contributions.Rail.DepartureBellContribution">
            <summary>
            Departure bell for trains.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Rail.DepartureBellContribution.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:FreeTrain.Contributions.Rail.DepartureBellContribution.name">
            <summary> name of this sound </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Rail.DepartureBellContribution.Name">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Contributions.Rail.DepartureBellContribution.sound">
            <summary> Bell sound </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Rail.DepartureBellContribution.Sound">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Rail.DepartureBellContribution.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:FreeTrain.Contributions.Rail.DepartureBellContribution.All">
            <summary> Gets all the departure bell contributions in the system. </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Rail.DepartureBellContribution.Default">
            <summary> Default bell sound. </summary>
        </member>
        <member name="T:FreeTrain.Contributions.Rail.RailAccessoryContribution">
            <summary>
            Contribution that adds <c>TrafficVoxel.Accessory</c>
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Rail.RailAccessoryContribution.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:FreeTrain.Contributions.Rail.RailAccessoryContribution.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Rail.RailAccessoryContribution.Population">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Rail.RailAccessoryContribution.Price">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Rail.RailAccessoryContribution.PricePerArea">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Rail.RailAccessoryContribution.ComputerCannotBuild">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Rail.RailAccessoryContribution.PlayerCannotBuild">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Rail.RailAccessoryContribution.CreatePreview(System.Drawing.Size)">
            <summary>
            
            </summary>
            <param name="pixelSize"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Rail.RailAccessoryContribution.CreateBuilder(FreeTrain.Controllers.IControllerSite)">
            <summary>
            
            </summary>
            <param name="site"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Rail.RailAccessoryContribution.CreateRemover(FreeTrain.Controllers.IControllerSite)">
            <summary>
            
            </summary>
            <param name="site"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Rail.RailStationaryContribution">
            <summary>
            Stationary objects related to rail road.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Rail.RailStationaryContribution.#ctor(System.Xml.XmlElement)">
            <summary>
            Parses a commercial structure contribution from a DOM node.
            </summary>
            <exception cref="T:System.Xml.XmlException">If the parsing fails</exception>
        </member>
        <member name="M:FreeTrain.Contributions.Rail.RailStationaryContribution.GetGroup(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Rail.RailStationaryContribution.Create(FreeTrain.World.WorldLocator,System.Boolean)">
            <summary>
            
            </summary>
            <param name="wLoc"></param>
            <param name="initiallyOwned"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Rail.RailStationaryContribution.CanBeBuilt(FreeTrain.World.Location,FreeTrain.World.ControlMode)">
            <summary>
            
            </summary>
            <param name="baseLoc"></param>
            <param name="cm"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Rail.SpecialRailContribution">
            <summary>
            Contribution that adds a special kind of railroads, like tunnels or bridges.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Rail.SpecialRailContribution.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:FreeTrain.Contributions.Rail.StationContribution">
            <summary>
            Station.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Rail.StationContribution.#ctor(System.Xml.XmlElement)">
            <summary>
            Parses a station contribution from a DOM node.
            </summary>
            <exception cref="T:System.Xml.XmlException">If the parsing fails</exception>
        </member>
        <member name="F:FreeTrain.Contributions.Rail.StationContribution.operationCost">
            <summary> Operation cost of this station per day. </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Rail.StationContribution.OperationCost">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Rail.StationContribution.GetGroup(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Rail.StationContribution.Create(FreeTrain.World.WorldLocator,System.Boolean)">
            <summary>
            
            </summary>
            <param name="wLoc"></param>
            <param name="initiallyOwned"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Rail.StationContribution.CanBeBuilt(FreeTrain.World.Location,FreeTrain.World.ControlMode)">
            <summary>
            
            </summary>
            <param name="baseLoc"></param>
            <param name="cm"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Rail.TrainControllerContribution">
            <summary>
            plug-in that provides TrainController implementations
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Rail.TrainControllerContribution.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Rail.TrainControllerContribution.NewController(System.String)">
            <summary>
            Creates a new instance of TrainController.
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Rail.TrainControllerContribution.Name">
            <summary>
            Gets the name of this train controller type.
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Rail.TrainControllerContribution.Description">
            <summary>
            Gets the description of this train controller type.
            </summary>
        </member>
        <member name="T:FreeTrain.Contributions.Road.A3RoadContribution">
            <summary>
            RoadContribution for "org.kohsuke.freetrain.road.pc-9801fa" plug-in
            TODO: move to its own DLL.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Road.A3RoadContribution.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:FreeTrain.Contributions.Road.A3RoadContribution.sprites">
            <summary>
            three sprites (0:E-W, 1:N-S, 2:cross)
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Road.A3RoadContribution.GetSprite(System.Byte)">
            <summary>
            
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Road.AbstractRoadContributionImpl">
            <summary>
            Usual implementation of RoadContribution.
            
            Provided just for code sharing.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Road.AbstractRoadContributionImpl.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Road.AbstractRoadContributionImpl.GetSprite(System.Byte)">
            <summary>
            
            </summary>
            <param name="dirs"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Road.AbstractRoadContributionImpl.CanBeBuilt(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Road.AbstractRoadContributionImpl.Build(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Road.AbstractRoadContributionImpl.Create(FreeTrain.World.TrafficVoxel,FreeTrain.World.Road.RoadPattern)">
            <summary>
            Creates a new road with a given pattern.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Road.AbstractRoadContributionImpl.Remove(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="here"></param>
            <param name="to"></param>
        </member>
        <member name="P:FreeTrain.Contributions.Road.AbstractRoadContributionImpl.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Road.AbstractRoadContributionImpl.OneLineDescription">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Road.AbstractRoadContributionImpl.PreviewBitmap">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Contributions.Road.AbstractRoadContributionImpl.RoadImpl">
            <summary>
            Road implementation
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Road.AbstractRoadContributionImpl.RoadImpl.#ctor(FreeTrain.Contributions.Road.AbstractRoadContributionImpl,FreeTrain.World.TrafficVoxel,FreeTrain.World.Road.RoadPattern)">
            <summary>
            
            </summary>
            <param name="contrib"></param>
            <param name="tv"></param>
            <param name="pattern"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Road.AbstractRoadContributionImpl.RoadImpl.DrawBefore(FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Road.AbstractRoadContributionImpl.RoadImpl.Attach(FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Road.AbstractRoadContributionImpl.RoadImpl.Detach(FreeTrain.World.Direction,FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="d1"></param>
            <param name="d2"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Road.AbstractRoadContributionImpl.RoadImpl.CanAttach(FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Road.RoadContribution">
            <summary>
            Road for cars/buses
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Road.RoadContribution.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:FreeTrain.Contributions.Road.RoadContribution.style">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Road.RoadContribution.Style">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Road.RoadContribution.PreviewPatternIdx">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Contributions.Road.RoadContribution.previewPattern">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Road.RoadContribution.PreviewPattern">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Road.RoadContribution.DirectionMode">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Contributions.Road.StandardRoadContribution">
            <summary>
            RoadContribution implemented by 15 sprites.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Road.StandardRoadContribution.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:FreeTrain.Contributions.Road.StandardRoadContribution.flatSprites">
            <summary>
            sprites by index
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Road.StandardRoadContribution.GetSprite(System.Byte)">
            <summary>
            
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Sound.BGMContribution">
            <summary>
            Background music.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Sound.BGMContribution.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Sound.BGMContribution.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="fileName"></param>
            <param name="id"></param>
        </member>
        <member name="F:FreeTrain.Contributions.Sound.BGMContribution.name">
            <summary> Title of the music. </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Sound.BGMContribution.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Sound.BGMContribution.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:FreeTrain.Contributions.Sound.BGMContribution.fileName">
            <summary> File name of the music. </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Sound.BGMContribution.FileName">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Contributions.Sound.BGMFactoryContribution">
            <summary>
            Code that lists up BGMContribution programatically.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Sound.BGMFactoryContribution.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Sound.BGMFactoryContribution.ListContributions">
            <summary>
            Lists up the BGM contributions, which will be incorporated
            into the set of BGMs.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FreeTrain.Contributions.Sound.BGMFactoryContribution.Title">
            <summary>
            Gets the group name of these BGMContributions.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Sound.BGMFactoryContributionFactory.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Sound.BGMFactoryContributionFactory.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Sound.BGMFactoryContributionFactory.Load(FreeTrain.Framework.Plugin.PluginDefinition,System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="owner"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Structs.CommercialStructureContribution">
            <summary>
            commercial structure.
            
            Including everything from convenience stores (like Seven-eleven)
            to shopping malls like Walmart.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Structs.CommercialStructureContribution.#ctor(System.Xml.XmlElement)">
            <summary>
            Parses a commercial structure contribution from a DOM node.
            </summary>
            <exception cref="T:System.Xml.XmlException">If the parsing fails</exception>
        </member>
        <member name="M:FreeTrain.Contributions.Structs.CommercialStructureContribution.#ctor(FreeTrain.Contributions.Common.IAbstractStructure,System.Xml.XmlElement,System.Xml.XmlElement,System.Boolean)">
            <summary>
            
            </summary>
            <param name="master"></param>
            <param name="pic"></param>
            <param name="main"></param>
            <param name="opposite"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Structs.CommercialStructureContribution.GetGroup(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Structs.CommercialStructureContribution.Create(FreeTrain.World.WorldLocator,System.Boolean)">
            <summary>
            
            </summary>
            <param name="wLoc"></param>
            <param name="initiallyOwned"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Structs.CommercialStructureContribution.CanBeBuilt(FreeTrain.World.Location,FreeTrain.World.ControlMode)">
            <summary>
            
            </summary>
            <param name="baseLoc"></param>
            <param name="cm"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Structs.SpecialStructureContribution">
            <summary>
            Contribution that adds a special kind of structures, like airports.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Structs.SpecialStructureContribution.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:FreeTrain.Contributions.Structs.SpecialStructureContribution.Name">
            <summary>
            Gets the name used for the menu item.
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Structs.SpecialStructureContribution.OneLineDescription">
            <summary>
            Gets a one line description of this rail.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Structs.SpecialStructureContribution.ShowDialog">
            <summary>
            This method is called when the menu item is selected by the user.
            </summary>
        </member>
        <member name="T:FreeTrain.Contributions.Structs.VarHeightBuildingContribution">
            <summary>
            Building of a variable height.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Structs.VarHeightBuildingContribution.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Structs.VarHeightBuildingContribution.#ctor(FreeTrain.Contributions.Common.IAbstractStructure,System.Xml.XmlElement,System.Xml.XmlElement,System.Boolean)">
            <summary>
            
            </summary>
            <param name="master"></param>
            <param name="pic"></param>
            <param name="main"></param>
            <param name="opposite"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Structs.VarHeightBuildingContribution.GetGroup(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="F:FreeTrain.Contributions.Structs.VarHeightBuildingContribution.tops">
            <summary>Sprite sets.</summary>
        </member>
        <member name="F:FreeTrain.Contributions.Structs.VarHeightBuildingContribution.bottoms">
            <summary>Sprite sets.</summary>
        </member>
        <member name="M:FreeTrain.Contributions.Structs.VarHeightBuildingContribution.GetSprites(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Sprite to draw the structure </summary>
        </member>
        <member name="F:FreeTrain.Contributions.Structs.VarHeightBuildingContribution.size">
            <summary> Size of the basement of this structure in voxel by voxel. </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Structs.VarHeightBuildingContribution.Size">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Contributions.Structs.VarHeightBuildingContribution.minHeight">
            <summary> Range of the possible height of the structure in voxel unit. </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Structs.VarHeightBuildingContribution.MinHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Structs.VarHeightBuildingContribution.MaxHeight">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Structs.VarHeightBuildingContribution.Create(FreeTrain.World.WorldLocator,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of this structure type to the specified location.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Structs.VarHeightBuildingContribution.Create(FreeTrain.World.Location,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="baseLoc"></param>
            <param name="height"></param>
            <param name="initiallyOwned"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Structs.VarHeightBuildingContribution.CanBeBuilt(FreeTrain.World.Location,System.Int32)">
            <summary>
            Returns true iff this structure can be built at the specified location.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Structs.VarHeightBuildingContribution.CreatePreview(System.Drawing.Size)">
            <summary>
            
            </summary>
            <param name="pixelSize"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Structs.VarHeightBuildingContribution.CreatePreview(System.Drawing.Size,System.Int32)">
            <summary>
            
            </summary>
            <param name="pixelSize"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Structs.VarHeightBuildingContribution.CreateBuilder(FreeTrain.Controllers.IControllerSite)">
            <summary>
            
            </summary>
            <param name="site"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Structs.VarHeightBuildingContribution.CreateRemover(FreeTrain.Controllers.IControllerSite)">
            <summary>
            
            </summary>
            <param name="site"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Structs.VarHeightBuildingContribution.CreatePreviewWorld(System.Drawing.Size,System.Collections.IDictionary)">
            <summary>
            
            </summary>
            <param name="minsizePixel"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Train.AbstractTrainContributionImpl">
            <summary>
            Common base implementation of TrainContribution
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.AbstractTrainContributionImpl.#ctor(System.Xml.XmlElement)">
            <summary>
            Parses a train contribution from a DOM node.
            </summary>
            <exception cref="T:System.Xml.XmlException">If the parsing fails</exception>
        </member>
        <member name="P:FreeTrain.Contributions.Train.AbstractTrainContributionImpl.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Train.AbstractTrainContributionImpl.NickName">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Train.AbstractTrainContributionImpl.TypeName">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Train.AbstractTrainContributionImpl.Author">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Train.AbstractTrainContributionImpl.CompanyName">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Train.AbstractTrainContributionImpl.Description">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.AbstractTrainContributionImpl.Price(System.Int32)">
            <summary>
            
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="P:FreeTrain.Contributions.Train.AbstractTrainContributionImpl.MinutesPerVoxel">
             <summary>
            
             </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Train.AbstractTrainContributionImpl.Fare">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Train.AbstractTrainContributionImpl.MaxLength">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Contributions.Train.AsymTrainCarImpl">
            <summary>
            Assymetric train car.
            
            This train car is usually used for the head car,
            where a picture to go N and that to go S are different.
            This type requires 16 graphics on the level ground
            and 8 graphics for slopes.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.AsymTrainCarImpl.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:FreeTrain.Contributions.Train.AsymTrainCarImpl.levelSprites">
            <summary> Sprites used to draw a car on a level ground. 8-way from dir=0 to 7 </summary>
        </member>
        <member name="F:FreeTrain.Contributions.Train.AsymTrainCarImpl.slopeSprites">
            <summary> Sprites used to draw a car on a slope. 4 way from dir=0,2,4, and 6 </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.AsymTrainCarImpl.Draw(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point,System.Int32)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
            <param name="angle"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Train.AsymTrainCarImpl.DrawSlope(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point,FreeTrain.World.Direction,System.Boolean)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
            <param name="angle"></param>
            <param name="isClimbing"></param>
        </member>
        <member name="T:FreeTrain.Contributions.Train.ColoredTrainCarImpl">
            <summary>
            Train car that uses the same picture but
            use different colors to differenciate.
            
            Six colors are used.
            </summary>
        </member>
        <member name="F:FreeTrain.Contributions.Train.ColoredTrainCarImpl._picture">
            <summary> Picture of this train. </summary>
        </member>
        <member name="F:FreeTrain.Contributions.Train.ColoredTrainCarImpl._colors">
            <summary> Color mapping. </summary>
        </member>
        <member name="F:FreeTrain.Contributions.Train.ColoredTrainCarImpl.levelSprites">
            <summary> Sprites used to draw a car on a level ground. 8-way from dir=0 to 7 </summary>
        </member>
        <member name="F:FreeTrain.Contributions.Train.ColoredTrainCarImpl.slopeSprites">
            <summary> Sprites used to draw a car on a slope. 4 way from dir=0,2,4, and 6 </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.ColoredTrainCarImpl.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Train.ColoredTrainCarImpl.#ctor(FreeTrain.Contributions.Train.ColoredTrainPictureContribution,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="_picture"></param>
            <param name="cb"></param>
            <param name="cl1"></param>
            <param name="cl2"></param>
            <param name="cl3"></param>
            <param name="id"></param>
            <param name="cap"></param>
        </member>
        <member name="P:FreeTrain.Contributions.Train.ColoredTrainCarImpl.colors">
            <summary>
            Get four colors of the train.
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Train.ColoredTrainCarImpl.picture">
            <summary>
            Picture of this train.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.ColoredTrainCarImpl.Draw(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point,System.Int32)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
            <param name="angle"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Train.ColoredTrainCarImpl.DrawSlope(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point,FreeTrain.World.Direction,System.Boolean)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
            <param name="angle"></param>
            <param name="isClimbing"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Train.ColoredTrainCarImpl.createSprites">
            <summary>
            Create sprites from a new picture and using the current color set.
            </summary>
        </member>
        <member name="T:FreeTrain.Contributions.Train.ColoredTrainPictureContribution">
            <summary>
            PictureContribution that holds a picture for color-map train.
            This class just serves as a marker, and all the functionalities are
            given by the base class.
            </summary>
        </member>
        <member name="F:FreeTrain.Contributions.Train.ColoredTrainPictureContribution.name">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.ColoredTrainPictureContribution.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Train.ColoredTrainPictureContribution.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Train.ColoredTrainPictureContribution.get(System.String)">
            <summary>
            Get the ColoredTrainPictureContribution of the given ID.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.ColoredTrainPictureContribution.list">
            <summary>
            Get all contributions of this class.
            </summary>
        </member>
        <member name="T:FreeTrain.Contributions.Train.ParamTrainImpl">
            <summary>
            Parameterized train contribution implementation
            where an user can specify (a) head, (b) tail, and (c) other intermediate
            cars separately.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.ParamTrainImpl.#ctor(System.Xml.XmlElement)">
            <summary>
            Parses a train contribution from a DOM node.
            </summary>
            <exception cref="T:System.Xml.XmlException">If the parsing fails</exception>
        </member>
        <member name="F:FreeTrain.Contributions.Train.ParamTrainImpl.composition">
            <summary>
            &lt;composition> element in the plug-in xml file.
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Train.ParamTrainImpl.MaxLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Train.ParamTrainImpl.MinLength">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.ParamTrainImpl.OnInitComplete">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.ParamTrainImpl.Create(System.Int32)">
            <summary>
            
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Train.PatternTrainImpl">
            <summary>
            Parameterized train contribution implementation
            where an user can specify (a) head, (b) tail, and (c) other intermediate
            cars separately.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.PatternTrainImpl.#ctor(System.Xml.XmlElement)">
            <summary>
            Parses a train contribution from a DOM node.
            </summary>
            <exception cref="T:System.Xml.XmlException">If the parsing fails</exception>
        </member>
        <member name="F:FreeTrain.Contributions.Train.PatternTrainImpl.config">
            <summary>
            &lt;config> element in the plug-in xml file.
            </summary>
        </member>
        <member name="F:FreeTrain.Contributions.Train.PatternTrainImpl.cars">
            <summary>
            Map from a char 'x' to TrainCarContribution
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Train.PatternTrainImpl.MaxLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Train.PatternTrainImpl.MinLength">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Contributions.Train.PatternTrainImpl.compositions">
            <summary>
            Map from length to its composition.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.PatternTrainImpl.OnInitComplete">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.PatternTrainImpl.Create(System.Int32)">
            <summary>
            
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Contributions.Train.ReverseTrainCarImpl">
            <summary>
            TrainCarContribution that draws cars from another TrainCarContribution
            in an opposite direction.
            
            Intended to be used to realize the last car.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.ReverseTrainCarImpl.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Train.ReverseTrainCarImpl.OnInitComplete">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.ReverseTrainCarImpl.Draw(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point,System.Int32)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
            <param name="angle"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Train.ReverseTrainCarImpl.DrawSlope(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point,FreeTrain.World.Direction,System.Boolean)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
            <param name="angle"></param>
            <param name="isClimbing"></param>
        </member>
        <member name="T:FreeTrain.Contributions.Train.SymTrainCarImpl">
            <summary>
            Symmetric train car.
            
            This train car contribution uses the same graphics
            for N and S. Thus 8 graphics for level and 4 for
            slopes are necessary.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.SymTrainCarImpl.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:FreeTrain.Contributions.Train.SymTrainCarImpl.levelSprites">
            <summary> Sprites used to draw a car on a level ground. 8-way from dir=0 to 7 </summary>
        </member>
        <member name="F:FreeTrain.Contributions.Train.SymTrainCarImpl.slopeSprites">
            <summary> Sprites used to draw a car on a slope. 4 way from dir=0,2,4, and 6 </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.SymTrainCarImpl.Draw(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point,System.Int32)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
            <param name="angle"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Train.SymTrainCarImpl.DrawSlope(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point,FreeTrain.World.Direction,System.Boolean)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
            <param name="angle"></param>
            <param name="isClimbing"></param>
        </member>
        <member name="T:FreeTrain.Contributions.Train.TrainCarContribution">
            <summary>
            Train car type.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.TrainCarContribution.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Train.TrainCarContribution.#ctor(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="cap"></param>
        </member>
        <member name="P:FreeTrain.Contributions.Train.TrainCarContribution.Capacity">
            <summary>
            Number of passengers this car can hold.
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.TrainCarContribution.Draw(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point,System.Int32)">
            <summary>
            Draws a car to the specified position.
            </summary>
            <param name="angle">[0,16). Angle of the car. 2*direction.index</param>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Train.TrainCarContribution.DrawSlope(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point,FreeTrain.World.Direction,System.Boolean)">
            <summary>
            Dras a car on a slope.
            </summary>
            <param name="angle">one of 4 directions</param>
            <param name="isClimbing">true if the car is climbing</param>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="T:FreeTrain.Contributions.Train.TrainContribution">
            <summary>
            Train type
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.TrainContribution.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:FreeTrain.Contributions.Train.TrainContribution.Name">
            <summary>Display name of this train type, such as "series 01500 Blue Line"</summary>
        </member>
        <member name="P:FreeTrain.Contributions.Train.TrainContribution.NickName">
            <summary>nick name of train, such as "Blue Line"</summary>
        </member>
        <member name="P:FreeTrain.Contributions.Train.TrainContribution.Author">
            <summary>Author who created this contribution.</summary>
        </member>
        <member name="P:FreeTrain.Contributions.Train.TrainContribution.CompanyName">
            <summary>Company name that operates this train, such as "MBTA".</summary>
        </member>
        <member name="P:FreeTrain.Contributions.Train.TrainContribution.TypeName">
            <summary>Type name of train, such as "series 01500"</summary>
        </member>
        <member name="P:FreeTrain.Contributions.Train.TrainContribution.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Train.TrainContribution.MaxLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Train.TrainContribution.MinLength">
            <summary>
            
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.TrainContribution.Price(System.Int32)">
            <summary>Price of the train .</summary>
        </member>
        <member name="P:FreeTrain.Contributions.Train.TrainContribution.MinutesPerVoxel">
            <summary>Inverse of speed. # of minutes to go for one pixel.</summary>
        </member>
        <member name="P:FreeTrain.Contributions.Train.TrainContribution.Fare">
            <summary> Fare of this train. </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.TrainContribution.Create(System.Int32)">
            <summary>
            Creates a new train by designating TrainCarContributions for each car.
            </summary>
        </member>
        <member name="P:FreeTrain.Contributions.Train.TrainContribution.SpeedDisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.TrainContribution.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Contributions.Train.TrainContribution.CreatePreview(System.Drawing.Size,System.Int32)">
            <summary>
            Builds a nice preview of a train.
            </summary>
        </member>
        <member name="T:FreeTrain.Contributions.Train.TrainContributionFactory">
            <summary>
            LoadsTrainContributionFactory.
            
            When a class element is present, it is used. Otherwise
            defaults to ParamTrainImpl
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.TrainContributionFactory.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Contributions.Train.TrainContributionFactory.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Contributions.Train.TrainContributionFactory.Load(FreeTrain.Framework.Plugin.PluginDefinition,System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="owner"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Controllers.AbstractControllerImpl">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.AbstractControllerImpl.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.AbstractControllerImpl.OnActivated(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Controllers.AbstractControllerImpl.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Derived class still needs to extend this method and maintain
            the singleton.
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.AbstractControllerImpl.Disambiguator">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.AbstractControllerImpl.Overlay">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.AbstractControllerImpl.OnAttached">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.AbstractControllerImpl.OnDetached">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.AbstractControllerImpl.OnClick(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.AbstractControllerImpl.OnMouseMove(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            
            </summary>
            <param name="view"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.AbstractControllerImpl.OnRightClick(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.AbstractControllerImpl.UpdatePreview">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Controllers.AbstractLineController">
            <summary>
            Controller that places/removes lines, such as roads or rail roads.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.AbstractLineController.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.AbstractLineController.#ctor(FreeTrain.Contributions.Common.LineContribution)">
            <summary>
            
            </summary>
            <param name="_type"></param>
        </member>
        <member name="M:FreeTrain.Controllers.AbstractLineController.UpdatePreview">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.AbstractLineController.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.AbstractLineController.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="F:FreeTrain.Controllers.AbstractLineController.buttonRemove">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Controllers.AbstractLineController.buttonPlace">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Controllers.AbstractLineController.picture">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Controllers.AbstractLineController.toolTip">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.AbstractLineController.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="F:FreeTrain.Controllers.AbstractLineController.anchor">
            <summary>
            The first location selected by the user.
            </summary>
        </member>
        <member name="F:FreeTrain.Controllers.AbstractLineController.currentPos">
            <summary>
            Current mouse position. Used only when anchor!=UNPLACED
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.AbstractLineController.align(FreeTrain.World.Location)">
            <summary>
            Aligns the given location to the anchor so that
            the location will become straight.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.AbstractLineController.OnMouseMove(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.AbstractLineController.OnClick(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.AbstractLineController.OnRightClick(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="P:FreeTrain.Controllers.AbstractLineController.Disambiguator">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.AbstractLineController.UpdateAfterResize(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Controllers.AbstractLineController.DrawBefore(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="canvas"></param>
        </member>
        <member name="M:FreeTrain.Controllers.AbstractLineController.DrawVoxel(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="canvas"></param>
            <param name="loc"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.Controllers.AbstractLineController.DrawAfter(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="canvas"></param>
        </member>
        <member name="M:FreeTrain.Controllers.AbstractLineController.Draw(FreeTrain.World.Direction,FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            Draw the preview on the given point.
            </summary>
        </member>
        <member name="T:FreeTrain.Controllers.CubeSelectorController">
            <summary>
            ModalController that selects a cube of the fixed size.
            </summary>
        </member>
        <member name="F:FreeTrain.Controllers.CubeSelectorController.UNPLACED">
            <summary>Constant</summary>
        </member>
        <member name="F:FreeTrain.Controllers.CubeSelectorController.location">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Controllers.CubeSelectorController.size">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Controllers.CubeSelectorController.site">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.CubeSelectorController.#ctor(FreeTrain.World.Distance,FreeTrain.Controllers.IControllerSite)">
            <summary>
            
            </summary>
            <param name="_size"></param>
            <param name="_site"></param>
        </member>
        <member name="M:FreeTrain.Controllers.CubeSelectorController.OnSelected(FreeTrain.World.Cube)">
            <summary>
            Called when the selection is completed.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.CubeSelectorController.onCanceled">
            <summary>
            Called when the user wants to cancel the modal controller.
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.CubeSelectorController.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.CubeSelectorController.Overlay">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.CubeSelectorController.CurrentCube">
            <summary>
            North-west corner of the selected region.
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.CubeSelectorController.Disambiguator">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.CubeSelectorController.OnClick(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.CubeSelectorController.OnRightClick(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.CubeSelectorController.OnMouseMove(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.CubeSelectorController.OnAttached">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.CubeSelectorController.OnDetached">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.CubeSelectorController.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.CubeSelectorController.UpdatePreview">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Controllers.RailRoadDisambiguator">
            <summary>
            LocationDisambiguator implementation that prefers
            a location with a railroad.
            </summary>
        </member>
        <member name="F:FreeTrain.Controllers.RailRoadDisambiguator.theInstance">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.RailRoadDisambiguator.IsSelectable(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Controllers.GroundDisambiguator">
            <summary>
            LocationDisambiguator that prefers the surface level.
            </summary>
        </member>
        <member name="F:FreeTrain.Controllers.GroundDisambiguator.theInstance">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.GroundDisambiguator.IsSelectable(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Controllers.SameLevelDisambiguator">
            <summary>
            LocationDisambiguator that only allows locations in the same level
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.SameLevelDisambiguator.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="height"></param>
        </member>
        <member name="M:FreeTrain.Controllers.SameLevelDisambiguator.IsSelectable(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Controllers.IControllerSite">
            <summary>
            Implemented by a dialog box who hosts <c>ModalController</c>s.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.IControllerSite.Close">
            <summary>
            Close the host.
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.IControllerSite.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Controllers.ILocationDisambiguator">
            <summary>
            Used by the MapViewController to disambiguate
            stacked voxels.
            
            When an user clicks a screen, there are many locations
            that can match. Depending on the context, the program needs
            to select one of them. For example, when an user is placing
            a train, we'd like to select a voxel with a railroad.
            
            This interface does this.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.ILocationDisambiguator.IsSelectable(FreeTrain.World.Location)">
            <summary>
            Returns true if the callee prefers this location
            to be selected.
            </summary>
        </member>
        <member name="T:FreeTrain.Controllers.IModalController">
            <summary>
            User Interface by using MapViewWindow.
            
            When active, a ModalController can receive mouse events
            on map windows, can modify the image of the map view,
            and can affect how mouse clicks are interpreted.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.IModalController.OnClick(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="source">sender of the event.</param>
            <param name="loc">(X,Y,Z) location that was clicked</param>
            <param name="ab">(A,B) location that was clicked.</param>
        </member>
        <member name="M:FreeTrain.Controllers.IModalController.OnRightClick(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.IModalController.OnMouseMove(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.IModalController.OnAttached">
            <summary>
            Called when the controller gets activated.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.IModalController.OnDetached">
            <summary>
            Called when the controller gets deactivated.
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.IModalController.Name">
            <summary>
            Gets the display name of this controller.
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.IModalController.Disambiguator">
            <summary>
            Gets the disambiguator associated with this controller, if any.
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.IModalController.Overlay">
            <summary>
            If this controller needs to modify the map view, return non-null value.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.IModalController.UpdatePreview">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Controllers.Land.BulldozeController">
            <summary>
            Controller that allows the user to
            place/remove lands.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Land.BulldozeController.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Land.BulldozeController.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:FreeTrain.Controllers.Land.LandController">
            <summary>
            Controller that allows the user to
            place/remove lands.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Land.LandController.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Land.LandController.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Land.LandController.onTypeChanged(System.Object,System.EventArgs)">
            <summary>
            Called when a selection of the structure has changed.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Land.LandController.updateSize(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Land.LandController.UpdatePreview">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Controllers.Land.LandPropertyController">
            <summary>
            Controller that allows the user buy/sell land properties.
            </summary>
        </member>
        <member name="F:FreeTrain.Controllers.Land.LandPropertyController.siteImpl">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Land.LandPropertyController.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Land.LandPropertyController.UpdatePreview">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Land.LandPropertyController.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:FreeTrain.Controllers.Land.LandPropertyController.Logic">
            <summary>
            Controller logic
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Land.LandPropertyController.Logic.OnRectUpdated(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc1"></param>
            <param name="loc2"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Land.LandPropertyController.Logic.DrawBefore(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="surface"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Land.LandPropertyController.Logic.DrawVoxel(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="canvas"></param>
            <param name="loc"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Land.LandPropertyController.buy(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            Buys region [loc1,loc2] and turn them into the privately owned property.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Land.LandPropertyController.computePriceForBuy(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc1"></param>
            <param name="loc2"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Controllers.Land.LandPropertyController.sell(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            Sells land properties of the region [loc1,loc2].
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Land.LandPropertyController.computePriceForSell(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc1"></param>
            <param name="loc2"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Controllers.LocationStore">
            <summary>
            Stores a single Location object that requires screen update.
            Whenever a new location is set, the screen will be correctly updated
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.LocationStore.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.LocationStore.Location">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Controllers.PointSelectorController">
            <summary>
            Partial <c>ModalController</c> implementation that selects
            a particular location.
            </summary>
        </member>
        <member name="F:FreeTrain.Controllers.PointSelectorController.currentPos">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Controllers.PointSelectorController.site">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.PointSelectorController.#ctor(FreeTrain.Controllers.IControllerSite)">
            <summary>
            
            </summary>
            <param name="_site"></param>
        </member>
        <member name="M:FreeTrain.Controllers.PointSelectorController.onSelectionChanged(FreeTrain.World.Location)">
            <summary>
            Called when a selected location is changed.
            Usually an application doesn't need to do anything.
            </summary>
            <param name="loc"></param>
        </member>
        <member name="M:FreeTrain.Controllers.PointSelectorController.OnLocationSelected(FreeTrain.World.Location)">
            <summary>
            Called when the player selects a location.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.PointSelectorController.DrawAfter(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="canvas"></param>
        </member>
        <member name="M:FreeTrain.Controllers.PointSelectorController.DrawBefore(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="canvas"></param>
        </member>
        <member name="M:FreeTrain.Controllers.PointSelectorController.DrawVoxel(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="canvas"></param>
            <param name="loc"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.Controllers.PointSelectorController.OnAttached">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.PointSelectorController.OnDetached">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.PointSelectorController.OnMouseMove(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.PointSelectorController.OnRightClick(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.PointSelectorController.OnClick(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.PointSelectorController.close">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.PointSelectorController.Disambiguator">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.PointSelectorController.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.PointSelectorController.Overlay">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.PointSelectorController.UpdatePreview">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Controllers.Rail.PlatformController">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.PlatformController.InitializeComponent">
            <summary>
            Designer サポートに必要なメソッドです。コード エディタで
            このメソッドのコンテンツを変更しないでください。
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.PlatformController.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.PlatformController.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:FreeTrain.Controllers.Rail.PlatformController.Disambiguator">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.PlatformController.IsSelectable(FreeTrain.World.Location)">
            <summary> LocationDisambiguator implementation </summary>
        </member>
        <member name="F:FreeTrain.Controllers.Rail.PlatformController.direction">
            <summary> The direction of the platform </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.PlatformController.onDirChange(System.Object,System.EventArgs)">
            <summary>
            Called when the direction of a platform is changed.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.PlatformController.updateAfterResize(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:FreeTrain.Controllers.Rail.PlatformController.currentMode">
            <summary>
            Returns true if the current page is the station page.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.PlatformController.OnMouseMove(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.PlatformController.OnClick(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="P:FreeTrain.Controllers.Rail.PlatformController.length">
            <summary> Length of the platform to be built. </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.PlatformController.DrawVoxel(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="dc"></param>
            <param name="loc"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.PlatformController.DrawBefore(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="surface"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.PlatformController.DrawAfter(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="surface"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.PlatformController.onStationChanged(System.Object,System.EventArgs)">
            <summary>
            Called when a selection of the station has changed.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.PlatformController.UpdatePreview">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.PlatformController.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.PlatformController.OnDetached">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.PlatformController.updateAlphaSprites">
            <summary>
            Re-builds an alpha-blending preview.
            </summary>
        </member>
        <member name="T:FreeTrain.Controllers.Rail.TrainPlacementController">
            <summary>
            Controller that allows the user to
            place/remove trains.
            </summary>
            <summary>
            Controller that allows the user to
            place/remove trains.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.TrainPlacementController.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.TrainPlacementController.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Controllers.Rail.TrainPlacementController.arrowLoc">
            <summary>
            Location of the arrow.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.TrainPlacementController.reset">
            <summary>
            Resets the contents of the list.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.TrainPlacementController.Dispose(System.Boolean)">
            <summary>
            使用されているリソースに後処理を実行します。
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.Rail.TrainPlacementController.selectedTrain">
            <summary>
            Gets the currently selected train, if any
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.Rail.TrainPlacementController.selectedGroup">
            <summary>
            Gets the currently selected group, if any.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.TrainPlacementController.resetArrowLocation">
            <summary>
            Re-computes the arrow location correctly
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.TrainPlacementController.OnClick(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.TrainPlacementController.OnAttached">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.Rail.TrainPlacementController.Disambiguator">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.TrainPlacementController.IsSelectable(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.TrainPlacementController.DrawBefore(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="surface"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.TrainPlacementController.DrawVoxel(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="canvas"></param>
            <param name="loc"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.TrainPlacementController.DrawAfter(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="dc"></param>
        </member>
        <member name="T:FreeTrain.Controllers.Rail.RailRoadController">
            <summary>
            Railroad construction dialog
            </summary>
            This controller has two states.
            In one state, we expect the user to select one voxel.
            In the other state, we expect the user to select next voxel,
            so that we can build railroads.
            <summary>
            Railroad construction dialog
            </summary>
            This controller has two states.
            In one state, we expect the user to select one voxel.
            In the other state, we expect the user to select next voxel,
            so that we can build railroads.
        </member>
        <member name="M:FreeTrain.Controllers.Rail.RailRoadController.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.RailRoadController.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.RailRoadController.UpdateDialog">
            <summary>
            Updates the message in the dialog box.
            </summary>
        </member>
        <member name="F:FreeTrain.Controllers.Rail.RailRoadController.anchor">
            <summary>
            The first location selected by the user.
            </summary>
        </member>
        <member name="F:FreeTrain.Controllers.Rail.RailRoadController.currentPosition">
            <summary>
            Current mouse position. Used only when anchor!=UNPLACED
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.RailRoadController.OnClick(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="location"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.RailRoadController.OnRightClick(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="location"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.RailRoadController.OnMouseMove(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="location"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.RailRoadController.OnDeactivate(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.RailRoadController.OnDetached">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.Rail.RailRoadController.Disambiguator">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.RailRoadController.DrawBefore(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="canvas"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.RailRoadController.DrawVoxel(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="canvas"></param>
            <param name="location"></param>
            <param name="point"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.RailRoadController.DrawAfter(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="canvas"></param>
        </member>
        <member name="T:FreeTrain.Controllers.Rail.SlopeRailRoadController">
            <summary>
            Controller to place/remove slope RRs.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.SlopeRailRoadController.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.SlopeRailRoadController.UpdatePreview">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.SlopeRailRoadController.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="F:FreeTrain.Controllers.Rail.SlopeRailRoadController.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.SlopeRailRoadController.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="F:FreeTrain.Controllers.Rail.SlopeRailRoadController.direction">
            <summary> Selected direction. </summary>
        </member>
        <member name="P:FreeTrain.Controllers.Rail.SlopeRailRoadController.isPlacing">
            <summary>
            construction mode. Are we placing a new one, or removing an existing one?
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.SlopeRailRoadController.OnClick(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="P:FreeTrain.Controllers.Rail.SlopeRailRoadController.Disambiguator">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.SlopeRailRoadController.IsSelectable(FreeTrain.World.Location)">
            <summary>
            LocationDisambiguator implementation.
            Use the base of the slope to disambiguate.
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.SlopeRailRoadController.OnMouseMove(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.SlopeRailRoadController.DrawBefore(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="surface"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.SlopeRailRoadController.DrawVoxel(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="canvas"></param>
            <param name="loc"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.SlopeRailRoadController.DrawAfter(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="dc"></param>
        </member>
        <member name="T:FreeTrain.Controllers.Rail.SpecialPurposeRailController">
            <summary>
            Controller to place/remove BridgeRails
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.SpecialPurposeRailController.#ctor(FreeTrain.Contributions.Rail.SpecialRailContribution)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.SpecialPurposeRailController.Draw(FreeTrain.World.Direction,FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="canvas"></param>
            <param name="pt"></param>
        </member>
        <member name="T:FreeTrain.Controllers.Rail.StationaryStructPlacementController">
            <summary>
            StationaryStructPlacementController の概要の説明です。
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.StationaryStructPlacementController.create">
            <summary>
            Creates a new controller window, or active the existing one.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.StationaryStructPlacementController.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.StationaryStructPlacementController.IsSelectable(FreeTrain.World.Location)">
            <summary> LocationDisambiguator implementation </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.StationaryStructPlacementController.Remove(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="loc"></param>
        </member>
        <member name="T:FreeTrain.Controllers.Rail.StationPassagewayController">
            <summary>
            StationBridgeController の概要の説明です。
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.StationPassagewayController.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.StationPassagewayController.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.StationPassagewayController.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.Rail.StationPassagewayController.Disambiguator">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.StationPassagewayController.IsSelectable(FreeTrain.World.Location)">
            <summary> LocationDisambiguator implementation </summary>
        </member>
        <member name="F:FreeTrain.Controllers.Rail.StationPassagewayController.anchor">
            <summary> Used when we are placing a passageway. </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.StationPassagewayController.OnMouseMove(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.StationPassagewayController.OnClick(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.StationPassagewayController.OnRightClick(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.StationPassagewayController.DrawBefore(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="canvas"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.StationPassagewayController.DrawVoxel(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="canvas"></param>
            <param name="loc"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.StationPassagewayController.DrawAfter(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="canvas"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.StationPassagewayController.createStair(FreeTrain.World.Location,System.Boolean)">
            <summary>
            Builds a new stair
            </summary>
            <param name="loc"></param>
            <param name="test">true to just check if it can be built.</param>
            <returns>true if it was/can be built.</returns>
        </member>
        <member name="T:FreeTrain.Controllers.Rail.TrainControllerDialog">
            <summary>
            Shows a dialog that allows the user to
            maintain train controller dialog.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.TrainControllerDialog.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.TrainControllerDialog.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:FreeTrain.Controllers.Rail.TrainControllerDialog.selectedItem">
            <summary> Selected train controller, or null if none is selected. </summary>
        </member>
        <member name="T:FreeTrain.Controllers.Rail.TrainControllerDialog.TCCreator">
            <summary>
            Receives the selection from the context menu.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.TrainControllerDialog.createNewTrainController(FreeTrain.Contributions.Rail.TrainControllerContribution)">
            <summary>
            Creates a new train controller.
            </summary>
        </member>
        <member name="F:FreeTrain.Controllers.Rail.TrainControllerDialog.iota">
            <summary> sequence number generator. </summary>
        </member>
        <member name="T:FreeTrain.Controllers.Rail.TrainTrackingWindow">
            <summary>
            Window that tracks a train.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.TrainTrackingWindow.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.TrainTrackingWindow.Dispose(System.Boolean)">
            <summary>
            使用されているリソースに後処理を実行します。
            </summary>
        </member>
        <member name="F:FreeTrain.Controllers.Rail.TrainTrackingWindow.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.TrainTrackingWindow.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Rail.TrainTrackingWindow.OnClosed(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:FreeTrain.Controllers.RectSelectorController">
            <summary>
            ModalController that selects the rectangular region
            and do something with it.
            </summary>
        </member>
        <member name="F:FreeTrain.Controllers.RectSelectorController.unplaced">
            <summary>Constant</summary>
        </member>
        <member name="P:FreeTrain.Controllers.RectSelectorController.Unplaced">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Controllers.RectSelectorController.anchor">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.RectSelectorController.Anchor">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Controllers.RectSelectorController.currentLoc">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.RectSelectorController.CurrentLocation">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Controllers.RectSelectorController.site">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.RectSelectorController.Site">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.RectSelectorController.#ctor(FreeTrain.Controllers.IControllerSite)">
            <summary>
            
            </summary>
            <param name="site"></param>
        </member>
        <member name="M:FreeTrain.Controllers.RectSelectorController.OnRectSelected(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            Called when the selection is completed.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.RectSelectorController.OnRectUpdated(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            Called when the selection is changed.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.RectSelectorController.OnCanceled">
            <summary>
            Called when the user wants to cancel the modal controller.
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.RectSelectorController.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.RectSelectorController.Overlay">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.RectSelectorController.LocationNW">
            <summary>
            North-west corner of the selected region.
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.RectSelectorController.LocationSE">
            <summary>
            South-east corner of the selected region.
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.RectSelectorController.Disambiguator">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.RectSelectorController.IsSelectable(FreeTrain.World.Location)">
            <summary> 
            LocationDisambiguator implementation 
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.RectSelectorController.OnClick(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.RectSelectorController.OnRightClick(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.RectSelectorController.OnMouseMove(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.RectSelectorController.OnAttached">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.RectSelectorController.OnDetached">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.RectSelectorController.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.RectSelectorController.UpdatePreview">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Controllers.Road.RoadController">
            <summary>
            Controller to place/remove roads
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Road.RoadController.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Controllers.Road.RoadController.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Road.RoadController.Draw(FreeTrain.World.Direction,FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="canvas"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Road.RoadController.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Road.RoadController.UpdateSize(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:FreeTrain.Controllers.Structs.CommercialStructPlacementController">
            <summary>
            CommercialStructPlacementController の概要の説明です。
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.CommercialStructPlacementController.IsSelectable(FreeTrain.World.Location)">
            <summary> LocationDisambiguator implementation </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.CommercialStructPlacementController.Remove(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location)">
            <summary>
            Removes the structure from given location, if any.
            </summary>
        </member>
        <member name="T:FreeTrain.Controllers.Structs.VarHeightBuildingController">
            <summary>
            Controller that allows the user to
            place/remove VarHeightBuildingContribution.
            </summary>
            <summary>
            Controller that allows the user to
            place/remove VarHeightBuildingContribution.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.VarHeightBuildingController.InitializeComponent">
            <summary>
            Designer サポートに必要なメソッドです。コード エディタで
            このメソッドのコンテンツを変更しないでください。
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.VarHeightBuildingController.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.VarHeightBuildingController.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.VarHeightBuildingController.OnClick(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.VarHeightBuildingController.IsSelectable(FreeTrain.World.Location)">
            <summary> LocationDisambiguator implementation </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.VarHeightBuildingController.CreateAlphaSprites">
            <summary>
            Re-builds an alpha-blending preview.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.VarHeightBuildingController.OnTypeChanged(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:FreeTrain.Controllers.Structs.FixedSizeStructController">
            <summary>
            FixedSizeStructController の概要の説明です。
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.FixedSizeStructController.#ctor(FreeTrain.Contributions.Common.StructureGroupGroup)">
            <summary>
            
            </summary>
            <param name="groupGroup"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.FixedSizeStructController.Remove(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="loc"></param>
        </member>
        <member name="P:FreeTrain.Controllers.Structs.FixedSizeStructController.SelectedType">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.FixedSizeStructController.OnClick(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.FixedSizeStructController.CompletionHandler.Handle(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.FixedSizeStructController.CreateAlphaSprites">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Controllers.Structs.StructPlacementController">
            <summary>
            Controller that allows the user to
            place/remove structures.
            </summary>
        </member>
        <member name="F:FreeTrain.Controllers.Structs.StructPlacementController.buttonRemove">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Controllers.Structs.StructPlacementController.buttonPlace">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.StructPlacementController.#ctor(FreeTrain.Contributions.Common.StructureGroupGroup)">
            <summary>
            
            </summary>
            <param name="groupGroup"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.StructPlacementController.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:FreeTrain.Controllers.Structs.StructPlacementController.Disambiguator">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.StructPlacementController.IsSelectable(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.StructPlacementController.InitializeComponent">
            <summary>
            Designer サポートに必要なメソッドです。コード エディタで
            このメソッドのコンテンツを変更しないでください。
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.StructPlacementController.UpdateAfterResize(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:FreeTrain.Controllers.Structs.StructPlacementController.IsPlacing">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.StructPlacementController.OnMouseMove(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.StructPlacementController.DrawBefore(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="surface"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.StructPlacementController.DrawVoxel(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="canvas"></param>
            <param name="loc"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.StructPlacementController.DrawAfter(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="surface"></param>
        </member>
        <member name="P:FreeTrain.Controllers.Structs.StructPlacementController.SelectedType">
            <summary>
            Currently selected structure contribution.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.StructPlacementController.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.StructPlacementController.UpdateAlphaSprites">
            <summary>
            Re-builds an alpha-blending preview.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.StructPlacementController.CreateAlphaSprites">
            <summary>
            Implemented by the derived class to provide a sprite set used
            to draw a preview of this structure on MapView.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.StructPlacementController.OnTypeChanged(System.Object,System.EventArgs)">
            <summary>
            Called when a selection of the structure has changed.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Structs.StructPlacementController.UpdatePreview">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Controllers.Terrain.MountainController">
            <summary>
            Manipulates mountains
            </summary>
            <summary>
            Manipulates mountains
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Terrain.MountainController.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Terrain.MountainController.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Terrain.MountainController.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:FreeTrain.Controllers.Terrain.MountainController.Disambiguator">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Terrain.MountainController.OnMouseMove(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Terrain.MountainController.OnClick(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="loc"></param>
            <param name="ab"></param>
        </member>
        <member name="M:FreeTrain.Controllers.Terrain.MountainController.selectVoxel(FreeTrain.Views.Map.MapViewWindow,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            Selects the south-western voxel of the point selected by the mouse.
            The loc parameter and the ab parameter should point to the same location.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Terrain.MountainController.isFourAdjacentCornersMatched(FreeTrain.World.Location)">
            <summary>
            Checks the height agreement of the four corners adjacent to
            the north-eastern corner of the given location.
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Controllers.Terrain.MountainController.canBeRaised(FreeTrain.World.Location)">
            <summary>
            Return true iff the north-eastern corner of the given location
            can be raised by a quarter height unit.
            </summary>
        </member>
        <member name="M:FreeTrain.Controllers.Terrain.MountainController.raise(FreeTrain.World.Location)">
            <summary>
            Raises the north-eastern corner of the specified voxel
            </summary>
            <returns>false if the operation was unsuccessful.</returns>
        </member>
        <member name="M:FreeTrain.Controllers.Terrain.MountainController.lower(FreeTrain.World.Location)">
            <summary>
            Lowers the north-eastern corner of the specified voxel.
            </summary>
            <returns>false if the operation was unsuccessful.</returns>
        </member>
        <member name="T:FreeTrain.World.Rail.TrainTradingDialog">
            <summary>
            Dialog box to buy trains
            </summary>
            <summary>
            Dialog box to buy trains
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.TrainTradingDialog.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.TrainTradingDialog.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.TrainTradingDialog.Dispose(System.Boolean)">
            <summary>
            使用されているリソースに後処理を実行します。
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.TrainTradingDialog.updatePreview">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.PlatformPropertyDialog">
            <summary>
            PlatformPropertyDialog の概要の説明です。
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.PlatformPropertyDialog.lIdx">
            <summary>
            Indecies of left/right lanes.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.PlatformPropertyDialog.rIdx">
            <summary>
            Indecies of left/right lanes.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.PlatformPropertyDialog.#ctor(FreeTrain.World.Rail.Platform)">
            <summary>
            
            </summary>
            <param name="platform"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.PlatformPropertyDialog.Dispose(System.Boolean)">
            <summary>
            使用されているリソースに後処理を実行します。
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.PlatformPropertyDialog.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.PlatformPropertyDialog.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.StationPropertyDialog">
            <summary>
            Property dialog of a station
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.StationPropertyDialog.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.StationPropertyDialog.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.StationPropertyDialog.#ctor(FreeTrain.World.Rail.Station)">
            <summary>
            
            </summary>
            <param name="st"></param>
        </member>
        <member name="F:FreeTrain.World.Rail.StationPropertyDialog.station">
            <summary> Station object to which this dialog is opened for. </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.StationPropertyDialog.Dispose(System.Boolean)">
            <summary>
            使用されているリソースに後処理を実行します。
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.BridgePierVoxel">
            <summary>
            Voxel that is used to support raised railroad.
            
            A derived class needs to provide the surface object.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.BridgePierVoxel.Transparent">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.BridgePierVoxel.electBridgeSupport(FreeTrain.World.Location,FreeTrain.World.IEntity)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <param name="owner"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.BridgePierVoxel.electBridgeSupport(FreeTrain.World.Location,System.Type,FreeTrain.World.IEntity)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <param name="bridgeType"></param>
            <param name="owner"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.BridgePierVoxel.electBridgeSupport(FreeTrain.World.Location,System.Type,System.Type,FreeTrain.World.IEntity)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <param name="topBridgeType"></param>
            <param name="otherBridgeType"></param>
            <param name="owner"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.BridgePierVoxel.teardownBridgeSupport(FreeTrain.World.Location,FreeTrain.World.IEntity)">
            <summary>
            Tears down a bridge support if any.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.BridgePierVoxel.#ctor(System.Int32,System.Int32,System.Int32,FreeTrain.World.IEntity)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="owner"></param>
        </member>
        <member name="F:FreeTrain.World.Rail.BridgePierVoxel.owner">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.BridgePierVoxel.Entity">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.BridgePierVoxel.sprite">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.BridgePierVoxel.Draw(FreeTrain.World.DrawContext,System.Drawing.Point,System.Int32)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
            <param name="heightCutDiff"></param>
        </member>
        <member name="F:FreeTrain.World.Rail.BridgePierVoxel.defaultSprite">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.BridgePierVoxel.slopeNESprite">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.BridgePierVoxel.DefaultImpl">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.BridgePierVoxel.DefaultImpl.#ctor(System.Int32,System.Int32,System.Int32,FreeTrain.World.IEntity)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="owner"></param>
        </member>
        <member name="P:FreeTrain.World.Rail.BridgePierVoxel.DefaultImpl.sprite">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.BridgePierVoxel.SlopeNEImpl">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.BridgePierVoxel.SlopeNEImpl.#ctor(System.Int32,System.Int32,System.Int32,FreeTrain.World.IEntity)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="owner"></param>
        </member>
        <member name="P:FreeTrain.World.Rail.BridgePierVoxel.SlopeNEImpl.sprite">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.BridgeRailMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.BridgeRailMode.Begin">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.BridgeRailMode.Middle">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.BridgeRailMode.End">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.BridgeRailContributionImpl">
            <summary>
            SpecialRailContribution implementation for the BridgeRail
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.BridgeRailContributionImpl.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.BridgeRailContributionImpl.OnInitComplete">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.BridgeRailContributionImpl.BridgeRail">
            <summary>
            Bridge rail roads.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.BridgeRailContributionImpl.BridgeRail.drawBefore(FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.BridgeRailContributionImpl.BridgeRail.drawAfter(FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.BridgeRailContributionImpl.CanBeBuilt(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.BridgeRailContributionImpl.Build(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="here"></param>
            <param name="to"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.BridgeRailContributionImpl.Remove(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="here"></param>
            <param name="to"></param>
        </member>
        <member name="P:FreeTrain.World.Rail.BridgeRailContributionImpl.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.BridgeRailContributionImpl.OneLineDescription">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.BridgeRailContributionImpl.PreviewBitmap">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.BridgeRailContributionImpl.PierTop1Impl">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.BridgeRailContributionImpl.PierTop1Impl.#ctor(System.Int32,System.Int32,System.Int32,FreeTrain.World.IEntity)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="e"></param>
        </member>
        <member name="P:FreeTrain.World.Rail.BridgeRailContributionImpl.PierTop1Impl.sprite">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.BridgeRailContributionImpl.PierBody1Impl">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.BridgeRailContributionImpl.PierBody1Impl.#ctor(System.Int32,System.Int32,System.Int32,FreeTrain.World.IEntity)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="e"></param>
        </member>
        <member name="P:FreeTrain.World.Rail.BridgeRailContributionImpl.PierBody1Impl.sprite">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.BridgeRailContributionImpl.PierTop2Impl">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.BridgeRailContributionImpl.PierTop2Impl.#ctor(System.Int32,System.Int32,System.Int32,FreeTrain.World.IEntity)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="e"></param>
        </member>
        <member name="P:FreeTrain.World.Rail.BridgeRailContributionImpl.PierTop2Impl.sprite">
            <summary>
            
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.BridgeRailContributionImpl.PierBody2Impl">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.BridgeRailContributionImpl.PierBody2Impl.#ctor(System.Int32,System.Int32,System.Int32,FreeTrain.World.IEntity)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="e"></param>
        </member>
        <member name="P:FreeTrain.World.Rail.BridgeRailContributionImpl.PierBody2Impl.sprite">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.DelegationTrainControllerImpl">
            <summary>
            A TrainController implementation that delegates all of the methods
            to the TrainController of the parent train group.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.DelegationTrainControllerImpl.theInstance">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.DelegationTrainControllerImpl.onJunction(FreeTrain.World.Rail.Train,FreeTrain.World.Rail.JunctionRailRoad)">
            <summary>
            
            
            </summary>
            <param name="train"></param>
            <param name="rr"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.DelegationTrainControllerImpl.getStopTimeSpan(FreeTrain.World.Rail.Train,FreeTrain.World.Rail.ITrainHarbor,System.Int32)">
            <summary>
            
            </summary>
            <param name="train"></param>
            <param name="harbor"></param>
            <param name="callCount"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.DelegationTrainControllerImpl.findController(FreeTrain.World.Rail.TrainItem)">
            <summary>
            Finds the TrainController that can actually do something.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.DelegationTrainControllerImpl.config(System.Windows.Forms.IWin32Window)">
            <summary>
            
            </summary>
            <param name="owner"></param>
        </member>
        <member name="P:FreeTrain.World.Rail.DelegationTrainControllerImpl.contribution">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.DelegationTrainControllerImpl.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:FreeTrain.World.Rail.FatPlatform">
            <summary>
            "Take the A-train" style fat platform.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.FatPlatform.canBeBuilt(FreeTrain.World.Location,FreeTrain.World.Direction,System.Int32)">
            <summary>
            Returns true if a platform can be built under the specified condition.
            This includes room for lane 0.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.FatPlatform.#ctor(FreeTrain.World.Location,FreeTrain.World.Direction,System.Int32)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <param name="dir"></param>
            <param name="len"></param>
        </member>
        <member name="P:FreeTrain.World.Rail.FatPlatform.canRemove">
            <summary>
            Checks if this platform can be removed.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.FatPlatform.remove">
            <summary>
            Removes this platform from the world.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.FatPlatform.voxels">
            <summary>
            Platform voxels that constitutes a platform.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.FatPlatform.lanes">
            <summary>Attached RRs or null.</summary>
        </member>
        <member name="M:FreeTrain.World.Rail.FatPlatform.hasLane(System.Int32)">
            <summary>
            
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.FatPlatform.canAddLane(System.Int32)">
            <summary>
            Returns true if a lane can be attached.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.FatPlatform.addLane(System.Int32)">
            <summary> Adds a new lane to this railroad. </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.FatPlatform.canRemoveLane(System.Int32)">
            <summary>
            
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.FatPlatform.removeLane(System.Int32)">
            <summary>
            Removes an existing lane.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.FatPlatform.HOST_RANGE">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.FatPlatform.listHosts">
            <summary>
            Lists available platform hosts for this platform.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.FatPlatform.sprites">
            <summary>Sprites of the platform voxel. indexed by the direction</summary>
        </member>
        <member name="M:FreeTrain.World.Rail.FatPlatform.getSprite(FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.Rail.FatPlatform.FatPlatformVoxel">
            <summary>
            Platform voxel.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.FatPlatform.FatPlatformVoxel.OnDeserialization(System.Object)">
            <summary>
            
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.FatPlatform.FatPlatformVoxel.Draw(FreeTrain.World.DrawContext,System.Drawing.Point,System.Int32)">
            <summary>
            
            </summary>
            <param name="dc"></param>
            <param name="pt"></param>
            <param name="heightCutDiff"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.FatPlatform.FatPlatformVoxel.OnClick">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.FatPlatform.FatPlatformVoxel.QueryInterface(System.Type)">
            <summary>
            
            </summary>
            <param name="aspect"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.FatPlatform.get(FreeTrain.World.Location)">
            <summary>
            Gets a platform from its location, if any, or null otherwise.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.FatPlatform.get(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.FatPlatform.RailRoadImpl.#ctor(FreeTrain.World.TrafficVoxel,FreeTrain.World.Rail.FatPlatform,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="_owner"></param>
            <param name="_idx"></param>
        </member>
        <member name="F:FreeTrain.World.Rail.FatPlatform.RailRoadImpl.theImage">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.FatPlatform.RailRoadImpl.drawBefore(FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="T:FreeTrain.World.Rail.TransportEvent">
            <summary>
            
            </summary>
            <param name="to"></param>
            <param name="amount"></param>
        </member>
        <member name="T:FreeTrain.World.Rail.GlobalTrafficMonitor">
            <summary>
            GlobalStationListener の概要の説明です。
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.GlobalTrafficMonitor.OnPassengerTransported">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.JunctionRailRoad">
            <summary>
            Railroad with a junction.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.JunctionRailRoad.#ctor(FreeTrain.World.TrafficVoxel,FreeTrain.World.Rail.RailPattern)">
            <summary>
            
            </summary>
            <param name="tv"></param>
            <param name="p"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.JunctionRailRoad.Guide">
            <summary>
            
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:FreeTrain.World.Rail.JunctionRailRoad.straightDirection">
            <summary>
            Gets the "straight" direction of this rail pattern.
            If this has rails to N,NE,S, then N is the straight direction.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.JunctionRailRoad.curveDirection">
            <summary>
            Gets the "curve" direction of this rail pattern.
            If this has rails to N,NE,S, then NE is the curve direction.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.JunctionRailRoad.getDirection(FreeTrain.World.Rail.JunctionRoute)">
            <summary> Returns the direction from the route to take. </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.JunctionRailRoad.CanAttach(FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="newDir"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.JunctionRailRoad.Attach(FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="newDir"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.JunctionRailRoad.Detach(FreeTrain.World.Direction,FreeTrain.World.Direction)">
            <summary>
            If this RR has two RRs with specified direction,
            remove it completely. If one RR matches, change 
            it to a single RR.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.JunctionRailRoad.get(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.Rail.PassagewayRail">
            <summary>
            Rail road with a raised passageway
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.PassagewayRail.#ctor(FreeTrain.World.TrafficVoxel,FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="dir"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.PassagewayRail.drawAfter(FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="F:FreeTrain.World.Rail.PassagewayRail.sprites">
            <summary>
            sprites for passageways.
            0 : single-width north platform and bridge connecting to east
            1:  double-width north platform
            2:  double-width north platform and bridge connecting to east
            
            3-5: east
            
            6-8: south
            
            9-11: west
            
            12: E-W bridge
            13: N-S bridge
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.PassagewayRail.getSprite(FreeTrain.World.Direction,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="d">direction of the rail road</param>
            <param name="bridged">true if a passageway is bridged</param>
            <param name="doubleWidth">true if a platform is double-width</param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.PassagewayRail.getFloatingSprite(FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="F:FreeTrain.World.Rail.PassagewayRail.stairSprites">
            <summary>
            Sprites for stair cases.
            
            8 spirtes for one direction.
            (upward --- stairs go upward to the direction of the platform)
            0: single-width, no-roof
            1: single-width, roof
            2: double-width, no-roof
            3: double-width, roof
            (downward -- stairs go downward to the direction of the platform)
            4,5,6,7
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.PassagewayRail.getStairSprite(FreeTrain.World.Direction,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="upward"></param>
            <param name="hasRoof"></param>
            <param name="doubleWidth"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.Rail.Platform">
            <summary>
            Platform that trains can stop by.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Platform.#ctor(FreeTrain.World.Location,FreeTrain.World.Direction,System.Int32)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <param name="d"></param>
            <param name="len"></param>
        </member>
        <member name="F:FreeTrain.World.Rail.Platform.name">
            <summary> Name of the platform if any. </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Platform.location">
            <summary> Location of the base of this platform. </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Platform.direction">
            <summary> Direction of this platform. </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Platform.length">
            <summary> Length of the platform. </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Platform._host">
            <summary> Parent host of this platform. </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Platform.nodes">
            <summary>
            Set of child Platforms that are connected to a station through this platform.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Platform.bellSound">
            <summary> Departure bell sound. May not be null. </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Platform.otherEnd">
            <summary> Other end of the platform. </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Platform.host">
            <summary> Host of this platform, or null if this is disconnected. </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Platform.hostStation">
            <summary> Host station of this platform, or null if this is isolated. </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Platform.canRemove">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Platform.isSilentlyReclaimable">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Platform.isOwned">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Platform.EntityValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Platform.remove">
            <summary>
            
            </summary>
        </member>
        <member name="E:FreeTrain.World.Rail.Platform.onEntityRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Platform.QueryInterface(System.Type)">
            <summary>
            
            </summary>
            <param name="aspect"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.Platform.onClockPerDay">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Platform.listHosts">
            <summary>
            Lists available platform hosts for this platform.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Platform.onClick">
            <summary> Processes a click event. </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Platform.listHosts(System.Int32)">
            <summary>
            Implementation for the listHosts() method.
            Lists available platform hosts for this platform.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Platform.addNode(FreeTrain.World.Rail.Platform)">
            <summary>
            
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.Platform.removeNode(FreeTrain.World.Rail.Platform)">
            <summary>
            
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.Platform.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:FreeTrain.World.Rail.Platform.iota">
            <summary>
            sequence number generator for automatic name generation.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Platform.warningIcon">
            <summary> Warning icon. </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Platform.get(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.Platform.get(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.Rail.IPlatformHost">
            <summary>
            A structure that can host platforms.
            
            Nodes added to this host will be notified when
            the host is destroied.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.IPlatformHost.addNode(FreeTrain.World.Rail.Platform)">
            <summary>
            
            </summary>
            <param name="platform"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.IPlatformHost.removeNode(FreeTrain.World.Rail.Platform)">
            <summary>
            
            </summary>
            <param name="platform"></param>
        </member>
        <member name="P:FreeTrain.World.Rail.IPlatformHost.hostStation">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.RailPattern">
            <summary>
            レールの形状のパターンに関する情報を表現するオブジェクト
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.RailPattern.railChips">
            <summary>
            Sprite that contains the images of all patterns.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.RailPattern.slopeWalls">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.RailPattern.slopeSupports">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.RailPattern.get(FreeTrain.World.Direction,FreeTrain.World.Direction)">
            <summary>
            指定されたアングルを持つ非分岐レールパターンを返す
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.RailPattern.getJunction(FreeTrain.World.Direction,FreeTrain.World.Direction,FreeTrain.World.Direction)">
            <summary>
            Gets the pattern that has three desired directions.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.RailPattern.getSlope(FreeTrain.World.Direction,System.Int32)">
            <summary>
            Gets the pattern that has the specified direction to climb and the height.
            </summary>
            <param name="climb"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.RailPattern.getUGSlope(FreeTrain.World.Direction,System.Int32)">
            <summary>
            
            </summary>
            <param name="climb"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="F:FreeTrain.World.Rail.RailPattern.dir">
            <summary>
            どの方向にレールが伸びているか。trueなら伸びている
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.RailPattern.hasRail(FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.RailPattern.hasRail(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="F:FreeTrain.World.Rail.RailPattern._zdiff">
            <summary>
            this rail road has up/down in z-axis to this direction.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.RailPattern.climbDir">
            <summary>
            If this is a slope rail, the rail is climbing to
            this direcion. Otherwise null.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.RailPattern.level">
            <summary>
            If this is a slope rail, this property holds the height
            of the rail.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.RailPattern.zdiff">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.RailPattern.zangle">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.RailPattern.numberOfRails">
            <summary>
            Returns the number of connection edge of this pattern.
            Normally 2 but it will be 3 if this is a junction.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.RailPattern.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            These objects are serialized as singleton.
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.RailRoad">
            <summary>
            線路
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.RailRoad.#ctor(FreeTrain.World.TrafficVoxel,FreeTrain.World.Rail.RailPattern)">
            <summary>
            
            </summary>
            <param name="tv"></param>
            <param name="pattern"></param>
        </member>
        <member name="F:FreeTrain.World.Rail.RailRoad.Voxel">
            <summary>
            この線路が占めるVoxel
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.RailRoad.Location">
            <summary>
            この線路の位置
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.RailRoad.Guide">
            <summary>
            Determines the direction of the train car that occupies this voxel
            should go, based solely on the pattern of this voxel, without looking
            at any other surrounding voxels.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.RailRoad.ZDiff(FreeTrain.World.Direction)">
            <summary>
            Gets the difference in z-axis for a car that heads to
            the specified direction.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.RailRoad.OnClick">
            <summary>
            Called when a rail road is clicked.
            </summary>
            <returns>true if the click is processed and consumed</returns>
        </member>
        <member name="P:FreeTrain.World.Rail.RailRoad.IsWellConnected">
            <summary>
            Returns true if this railroad is connected to
            at least two adjacent railroads.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.RailRoad.Attach(FreeTrain.World.Direction)">
            <summary>
            Attachs another direction of RR to this existing RR.
            
            If necessary, this method will create a junction.
            </summary>
            <returns>
            false if the operation is impossible. This happens if this
            rail road already is a junction, for example.
            </returns>
        </member>
        <member name="M:FreeTrain.World.Rail.RailRoad.CanAttach(FreeTrain.World.Direction)">
            <summary>
            Returns true if a new RR with the given direction can be attached.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.RailRoad.Detach(FreeTrain.World.Direction,FreeTrain.World.Direction)">
            <summary>
            Detaches two directions from this RR.
            This method should remove itself or even the parent TrafficVoxel
            if this change would remove RR completely.
            Thus the caller shouldn't assume that any reference to this RailRoad
            object or its parent TrafficVoxel would be valid after the method invocation.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.RailRoad.Dir1">
            <summary>
            hasRail(x)==trueとなるような何らかのxを返す
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.RailRoad.Dir2">
            <summary>
            hasRail(x)==trueとなるようなxのうち、dir1!=xとなるような
            何らかのxを返す
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.RailRoad.pattern">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.RailRoad.getPattern">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.RailRoad.hasRail(FreeTrain.World.Direction)">
            <summary>
            どの方向にレールが伸びているか。trueなら伸びている
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.RailRoad.invalidateVoxel">
            <summary>
            Called by the <c>TrafficVoxel</c> to invalidate
            voxels.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.RailRoad.drawBefore(FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            Draws a railroad. This method is called before the car is drawn.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.RailRoad.drawAfter(FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            Draws a railroad. This method is called after the car is drawn.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.RailRoad.getStopTimeSpan(FreeTrain.World.Rail.Train,System.Int32)">
            <summary>
            
            </summary>
            <param name="tr"></param>
            <param name="callCount"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.RailRoad.queryInterface(System.Type)">
            <summary>
            
            </summary>
            <param name="aspect"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.RailRoad.get(FreeTrain.World.Location)">
            <summary>
            Gets the RailRoad object of the specified location, if any.
            Otherwise null.
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.RailStationaryStructure">
            <summary>
            RailStationaryStructure の概要の説明です。
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.RailStationaryStructure.#ctor(FreeTrain.Contributions.Rail.RailStationaryContribution,FreeTrain.World.WorldLocator)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="wloc"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.RailStationaryStructure.CreateVoxel(FreeTrain.World.WorldLocator)">
            <summary>
            
            </summary>
            <param name="wloc"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.RailStationaryStructure.onClick">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:FreeTrain.World.Rail.RailStationaryStructure.isSilentlyReclaimable">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.RailStationaryStructure.isOwned">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.RailStationaryStructure.EntityValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.RailStationaryStructure.get(FreeTrain.World.Location)">
            <summary>
            Gets the station object if one is in the specified location.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.RailStationaryStructure.heightCutColor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.RailStationaryStructure.get(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.Rail.RailStationaryStructure.StationaryVoxel">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.RailStationaryStructure.StationaryVoxel.Transparent">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.SimpleTrainControllerImpl">
            <summary>
            Default TrainController implementation that doesn't do anything
            interesting.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.SimpleTrainControllerImpl.theInstance">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.SimpleTrainControllerImpl.onJunction(FreeTrain.World.Rail.Train,FreeTrain.World.Rail.JunctionRailRoad)">
            <summary>
            
            </summary>
            <param name="train"></param>
            <param name="rr"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.SimpleTrainControllerImpl.getStopTimeSpan(FreeTrain.World.Rail.Train,FreeTrain.World.Rail.ITrainHarbor,System.Int32)">
            <summary>
            
            </summary>
            <param name="train"></param>
            <param name="harbor"></param>
            <param name="callCount"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.SimpleTrainControllerImpl.config(System.Windows.Forms.IWin32Window)">
            <summary>
            
            </summary>
            <param name="owner"></param>
        </member>
        <member name="P:FreeTrain.World.Rail.SimpleTrainControllerImpl.contribution">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.SimpleTrainControllerImpl.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:FreeTrain.World.Rail.SingleRailRoad">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.SingleRailRoad.#ctor(FreeTrain.World.TrafficVoxel,FreeTrain.World.Rail.RailPattern)">
            <summary>
            
            </summary>
            <param name="tv"></param>
            <param name="p"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.SingleRailRoad.Guide">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.SingleRailRoad.CanAttach(FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="newDir"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.SingleRailRoad.Attach(FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="newDir"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.SingleRailRoad.Detach(FreeTrain.World.Direction,FreeTrain.World.Direction)">
            <summary>
            If this RR has any rail in the specified direction,
            remove the entire RR voxel.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.SingleRailRoad.calcRailRoadCost(FreeTrain.World.Location,FreeTrain.World.Direction,FreeTrain.World.Direction)">
            <summary>
            Compute the cost of building rail road with two given directions
            on the specified location. If a RR cannot be placed, return 0.
            </summary>
            <param name="d1">can be null</param>
            <param name="d2">can be null</param>
            <param name="loc"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.SingleRailRoad.ComputeRoute(FreeTrain.World.Location,FreeTrain.World.Location,System.Int32@)">
            <summary>
            Computes the route of RRs between specified two points.
            </summary>
            <returns>
            	null if it is impossible to build the route between two.
            	Otherwise returns a map from Location to RailPattern.
            </returns>
            <param name="cost">The total cost of construction will be returned here</param>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.SingleRailRoad.Build(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            Builds normal RR between two specified locations
            </summary>
            <returns>false if the operation was unsuccessful</returns>
        </member>
        <member name="M:FreeTrain.World.Rail.SingleRailRoad.CalcCostOfRemoving(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            Compute the cost of removing railroads.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.SingleRailRoad.Remove(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            Removes normal RR between two specified locations
            </summary>
            <returns>false if the operation was unsuccessful</returns>
        </member>
        <member name="T:FreeTrain.World.Rail.SlopeEntity">
            <summary>
            Slope rail road.
            
            Consists of 8 voxels. Four voxels are TrafficVoxels,
            Two more are SlopeFillerVoxels, which are invisible,
            and the other two are SlopeSupport voxels, which are visible.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.SlopeEntity.#ctor(FreeTrain.World.Location,FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="dir"></param>
        </member>
        <member name="P:FreeTrain.World.Rail.SlopeEntity.EntityValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.SlopeEntity.isOwned">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.SlopeEntity.isSilentlyReclaimable">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.SlopeEntity.remove">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.SlopeEntity.QueryInterface(System.Type)">
            <summary>
            
            </summary>
            <param name="aspect"></param>
            <returns></returns>
        </member>
        <member name="E:FreeTrain.World.Rail.SlopeEntity.onEntityRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.SlopeRailRoad">
            <summary>
            Railroad with slope.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.SlopeRailRoad.invalidateVoxel">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.SlopeRailRoad.climbDir">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.SlopeRailRoad.level">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.SlopeRailRoad.Attach(FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.SlopeRailRoad.CanAttach(FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.SlopeRailRoad.Detach(FreeTrain.World.Direction,FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="d1"></param>
            <param name="d2"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.SlopeRailRoad.Guide">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.SlopeRailRoad.get(FreeTrain.World.Location)">
            <summary>
            Gets the SlopeRailRoad object of the specified location, if any.
            Otherwise null.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.SlopeRailRoad.createSlope(FreeTrain.World.Location,FreeTrain.World.Direction)">
            <summary>
            Creates a new slope. A slope consists of four consective
            blocks of railroads. The base parameter specifies the location
            of the lowest railroad and the direction parameter
            specifies the direction to climb.
            
            The caller must use the canCreateSlope method to check
            if this method can be invoked.
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.SlopeRailRoad.SlopeFillerVoxel">
            <summary>
            Used for upper two invisible voxels
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.SlopeRailRoad.SlopeFillerVoxel.DrawGround(System.Boolean)">
            <summary>
            
            </summary>
            <param name="above"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.Rail.SlopeRailRoad.SlopeSupportVoxel">
            <summary>
            Used for lower two voxels. Visible but not rail road.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.SlopeRailRoad.SlopeSupportVoxel.Transparent">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.SlopeRailRoad.SlopeSupportVoxel.DrawGround(System.Boolean)">
            <summary>
            
            </summary>
            <param name="above"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.SlopeRailRoad.SlopeSupportVoxel.Draw(FreeTrain.World.DrawContext,System.Drawing.Point,System.Int32)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="pt"></param>
            <param name="heightCutDiff"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.SlopeRailRoad.canCreateSlope(FreeTrain.World.Location,FreeTrain.World.Direction)">
            <summary>
            Return true if a slope RR can be built at the specified location.
            </summary>
            <param name="_base"></param>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.SlopeRailRoad.calcCostOfNewSlope(FreeTrain.World.Location,FreeTrain.World.Direction)">
            <summary>
            Compute a construction cost of a slope rail.
            </summary>
            <returns>If a construction is impossible, return 0</returns>
        </member>
        <member name="M:FreeTrain.World.Rail.SlopeRailRoad.canRemoveSlope(FreeTrain.World.Location,FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.SlopeRailRoad.calcCostOfTearDownSlope(FreeTrain.World.Location,FreeTrain.World.Direction)">
            <summary>
            Compute the cost of destructing a slope rail.
            </summary>
            <returns>If a destruction is impossible, return 0</returns>
        </member>
        <member name="M:FreeTrain.World.Rail.SlopeRailRoad.removeSlope(FreeTrain.World.Location,FreeTrain.World.Direction)">
            <summary>
            Removes a slope. The format of the parameters are the same
            as the createSlope method. Ut us 
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.SpecialPurposeRailRoad">
            <summary>
            Rail road implementation for those special purpose rail roads
            that doesn't allow any attachment/detachment
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.SpecialPurposeRailRoad.#ctor(FreeTrain.World.TrafficVoxel,FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="voxel"></param>
            <param name="d"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.SpecialPurposeRailRoad.CanAttach(FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="newDir"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.SpecialPurposeRailRoad.Attach(FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="newDir"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.SpecialPurposeRailRoad.Detach(FreeTrain.World.Direction,FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="d1"></param>
            <param name="d2"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.SpecialPurposeRailRoad.Guide">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.Rail.Station">
            <summary>
            Station
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Station.#ctor(FreeTrain.Contributions.Rail.StationContribution,FreeTrain.World.WorldLocator)">
            <summary>
            Creates a new station object with its left-top corner at
            the specified location.
            </summary>
            <param name="_type">
            Type of the station to be built.
            </param>
            <param name="wloc"></param>
        </member>
        <member name="F:FreeTrain.World.Rail.Station.iota">
            <summary>
            sequence number generator for automatic name generation.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Station._name">
            <summary> Name of this station. </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Station.name">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Station.setName(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:FreeTrain.World.Rail.Station.location">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Station.onClick">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.Station.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:FreeTrain.World.Rail.Station.isSilentlyReclaimable">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Station.isOwned">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Station.EntityValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Station.remove">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Station.QueryInterface(System.Type)">
            <summary>
            
            </summary>
            <param name="aspect"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.Station.addNode(FreeTrain.World.Rail.Platform)">
            <summary>
            
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.Station.removeNode(FreeTrain.World.Rail.Platform)">
            <summary>
            
            </summary>
            <param name="child"></param>
        </member>
        <member name="P:FreeTrain.World.Rail.Station.hostStation">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Station.heightCutColor">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.Station.ListenerSet">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Station.ListenerSet.add(FreeTrain.World.Rail.IStationListener)">
            <summary>
            
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.Station.ListenerSet.remove(FreeTrain.World.Rail.IStationListener)">
            <summary>
            
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.Station.ListenerSet.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:FreeTrain.World.Rail.Station.listeners">
            <summary> StationListeners that are attached to this staion. </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Station.population">
            <summary>
            Gets the total sum of the population of this station.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Station.gonePassengers">
            <summary>
            The number of passengers that is "gone".
            Those are people that live in this station but are on the road.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Station.accumulatedUnloadedPassengers">
            <summary>
            Weighted average of # of people that are unloaded in this station.
            Multiplied by AVERAGE_PASSENGER_RATIO for every hour.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Station.averageUnloadedPassengers">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Station.accumulatedLoadedPassengers">
            <summary>
            Weighted average of # of people that are loaded in this station.
            Multiplied by AVERAGE_PASSENGER_RATIO for every hour.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Station.averageLoadedPassengers">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Station.AVERAGE_PASSENGER_RATIO">
            <summary>
            Factor that we apply to averageLoaded/UnloadedPassengers every hour.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Station.AVERAGE_PASSENGER_PER_DAY_FACTOR">
            <summary>
            Factor that we need to apply to obtain average passengers per day.
            obtained by 24*(1-RATIO)
            
            Justification of the above equation is that if you always carry 1 passenger
            for every hour, thie accumulated value should converge to C
            where C = C*RATIO + 1. Such C = \frac{1}{1-RATIO}
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Station.trains">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Station.import">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Station.export">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Station.ScoreImported">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Station.ScoreExported">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Station.ScoreTrains">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Station.UnloadedToday">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Station.UnloadedYesterday">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Station.TrainsToday">
            <summary>
            
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Station.TrainsYesterday">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Station.unloadPassengers(FreeTrain.World.Rail.Train)">
            <summary>
            
            </summary>
            <param name="tr"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.Station.loadPassengers(FreeTrain.World.Rail.Train)">
            <summary>
            Obtains the number of the passenger for the train
            that is going to depart.
            </summary>
            <param name="tr">train to put passengers in</param>
        </member>
        <member name="M:FreeTrain.World.Rail.Station.clockHandlerHour">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Station.clockHandlerDay">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Station.REACH_RANGE">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Station.withinReach(FreeTrain.World.Location)">
            <summary>
            Returns true if a listener at the given location can use this station.
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.Station.get(FreeTrain.World.Location)">
            <summary>
            Gets the station object if one is in the specified location.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Station.get(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.Rail.TransportLog">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.TransportLog.AddAmount(System.Int32)">
            <summary>
            
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.TransportLog.DailyReset">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.TransportLog.Yesterday">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.TransportLog.Today">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.TransportLog.ThisWeek">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.TransportLog.LastWeek">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.IStationListener">
            <summary>
            Structures that "use" a station.
            
            This interface is implemented by structures that have
            population that uses a station. Because of the way
            stations find listeners, listeners need to occupy
            at least one voxel.
            
            StationListener interface should be accessible through the queryAspect method.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.IStationListener.GetPopulation(FreeTrain.World.Rail.Station)">
            <summary> Obtains the population that uses a station right now. </summary>
            <remarks>Usually this value varies depending on the current time.</remarks>
        </member>
        <member name="M:FreeTrain.World.Rail.IStationListener.onStationRemoved(FreeTrain.World.Rail.Station)">
            <summary>
            Notifies the removal of the station.
            </summary>
            <remarks>
            Affected listener should look for another station to attach.
            listeners will be removed automatically from the old station,
            so don't call the <code>listeners.remove</code> method.
            </remarks>
        </member>
        <member name="M:FreeTrain.World.Rail.IStationListener.advertiseStation(FreeTrain.World.Rail.Station)">
            <summary>
            Notifies a newly created station.
            </summary>
            <remarks>
            This method is called by a newly created station object
            to "recruit" existing listeners to the new station.
            This method is called only when the receiving listener
            is eligible to attach to the new station.
            </remarks>
            <param name="s"></param>
            <returns>true if succesfuly advertised</returns>
        </member>
        <member name="T:FreeTrain.World.Rail.StealSupportedRailContributionImpl">
            <summary>
            SpecialRailContribution implementation for the steal-supported rail
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.StealSupportedRailContributionImpl.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.StealSupportedRailContributionImpl.OnInitComplete">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.StealSupportedRailContributionImpl.RailImpl.drawBefore(FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.StealSupportedRailContributionImpl.CanBeBuilt(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.StealSupportedRailContributionImpl.Build(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="here"></param>
            <param name="to"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.StealSupportedRailContributionImpl.Remove(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="here"></param>
            <param name="to"></param>
        </member>
        <member name="P:FreeTrain.World.Rail.StealSupportedRailContributionImpl.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.StealSupportedRailContributionImpl.OneLineDescription">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.StealSupportedRailContributionImpl.DirectionMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.StealSupportedRailContributionImpl.PreviewBitmap">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.ThinPlatform">
            <summary>
            Thin platform that doesn't oocupy any additional pixels
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.ThinPlatform.canBeBuilt(FreeTrain.World.Location,FreeTrain.World.Direction,System.Int32)">
            <summary>
            Returns true if a platform can be built under the specified condition.
            This includes room for lane 0.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.ThinPlatform.#ctor(FreeTrain.World.Location,FreeTrain.World.Direction,System.Int32)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <param name="dir"></param>
            <param name="len"></param>
        </member>
        <member name="P:FreeTrain.World.Rail.ThinPlatform.canRemove">
            <summary>
            Checks if this platform can be removed.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.ThinPlatform.remove">
            <summary>
            Removes this platform from the world.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.ThinPlatform.sprites">
            <summary>Sprites of the platform </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.ThinPlatform.getSprite(FreeTrain.World.Direction,System.Boolean)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="hasRoof"></param>
            <returns></returns>
        </member>
        <member name="F:FreeTrain.World.Rail.ThinPlatform.HOST_RANGE">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.ThinPlatform.listHosts">
            <summary>
            Lists available platform hosts for this platform.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.ThinPlatform.getRailRoad(System.Int32)">
            <summary>
            Obtains a reference to the RailRoadImpl of the specified index.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.ThinPlatform.get(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.Rail.ThinPlatform.RailRoadImpl">
            <summary>
            RailRoad implementation for thin platform.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.ThinPlatform.RailRoadImpl.direction">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.ThinPlatform.RailRoadImpl.outlook">
            <summary> Outlook of this platform. </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.ThinPlatform.RailRoadImpl.hasRoof">
            <summary> True if this voxel should have a roof. </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.ThinPlatform.RailRoadImpl.drawBefore(FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.ThinPlatform.RailRoadImpl.drawAfter(FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.ThinPlatform.RailRoadImpl.OnClick">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.ThinPlatform.RailRoadImpl.queryInterface(System.Type)">
            <summary>
            
            </summary>
            <param name="aspect"></param>
            <returns></returns>
        </member>
        <member name="P:FreeTrain.World.Rail.ThinPlatform.RailRoadImpl.isDoubleWidth">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.ThinPlatform.RailRoadImpl.get(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.Rail.ThinPlatform.IOutlook">
            <summary>
            Draws the platform.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.ThinPlatform.IOutlook.draw(FreeTrain.World.Rail.ThinPlatform.RailRoadImpl,FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="rr"></param>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.ThinPlatform.IOutlook.drawAfter(FreeTrain.World.Rail.ThinPlatform.RailRoadImpl,FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            Called after the drawing of a platform is completeld.
            Primarily to re-draw the bridge.
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.ThinPlatform.PlainPlatform">
            <summary>
            Normal platform
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.ThinPlatform.PlainPlatform.draw(FreeTrain.World.Rail.ThinPlatform.RailRoadImpl,FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="rr"></param>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.ThinPlatform.PlainPlatform.drawAfter(FreeTrain.World.Rail.ThinPlatform.RailRoadImpl,FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="rr"></param>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.ThinPlatform.PlainPlatform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.ThinPlatform.PlainPlatform.ReferenceImpl.GetRealObject(System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.Rail.ThinPlatform.PassagewayPlatform">
            <summary>
            Platform with a raised passageway.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.ThinPlatform.PassagewayPlatform.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="_hasBridge"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.ThinPlatform.PassagewayPlatform.draw(FreeTrain.World.Rail.ThinPlatform.RailRoadImpl,FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="rr"></param>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.ThinPlatform.PassagewayPlatform.drawAfter(FreeTrain.World.Rail.ThinPlatform.RailRoadImpl,FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="rr"></param>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="F:FreeTrain.World.Rail.ThinPlatform.PassagewayPlatform.hasBridge">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.ThinPlatform.StairPlatform">
            <summary>
            Platform with a stiar case to a passageway.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.ThinPlatform.StairPlatform.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="upward"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.ThinPlatform.StairPlatform.draw(FreeTrain.World.Rail.ThinPlatform.RailRoadImpl,FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="rr"></param>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.ThinPlatform.StairPlatform.drawAfter(FreeTrain.World.Rail.ThinPlatform.RailRoadImpl,FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="rr"></param>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="T:FreeTrain.World.Rail.TrainHandler">
            <summary>
            
            </summary>
            <param name="train"></param>
        </member>
        <member name="T:FreeTrain.World.Rail.Train">
            <summary>
            Train
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Train.calcNextTrainCarState">
            <summary>
            Function object that computes the next state for the head car.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Train.#ctor(FreeTrain.World.Rail.TrainGroup,System.Int32,FreeTrain.Contributions.Train.TrainContribution)">
            <summary>
            
            </summary>
            <param name="group"></param>
            <param name="length"></param>
            <param name="_type"></param>
        </member>
        <member name="F:FreeTrain.World.Rail.Train.iota">
            <summary> Sequence number generator. </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Train.thudSound">
            <summary>
            Sound-effect of a ringing bell. Used when a train leaves a station.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Train.#ctor(FreeTrain.World.Rail.TrainGroup,System.String,System.Int32,FreeTrain.Contributions.Train.TrainContribution,FreeTrain.World.Rail.TrainController)">
            <summary>
            Creates a new train and assigns it to a group.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Train.OnDeserialization(System.Object)">
            <summary>
            
            </summary>
            <param name="sender"></param>
        </member>
        <member name="F:FreeTrain.World.Rail.Train.type">
            <summary> Type of this train. </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Train.displayName">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Train.cars">
            <summary>
            この編成を構成する車両
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Train.length">
            <summary> Number of cars in this train. </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Train.head">
            <summary> The first car of this train. </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Train.isPlaced">
            <summary> Return true if this train is placed on the map </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Train.place(FreeTrain.World.Location)">
            <summary> Place a train to the specified location.</summary>
            <returns> false if it can't be done. </returns>
        </member>
        <member name="M:FreeTrain.World.Rail.Train.remove">
            <summary>
            配置済みの列車を撤去する
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Train.sell">
            <summary> Sell this train. </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.Train.TrainStates">
            <summary> Possible states of a train. </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Train.TrainStates.Unplaced">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Train.TrainStates.Moving">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Train.TrainStates.StoppingAtStation">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Train.TrainStates.StoppingAtSignal">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Train.TrainStates.EmergencyStopping">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Train.__state">
            <summary> State of this train. Usually updated by the clock handler. </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Train.State">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Train.stateDisplayText">
            <summary>
            Returns the state in its display text.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Train.persistentStateListeners">
            <summary>
            Delegates that are invoked when the state of the train changes.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Train.nonPersistentStateListeners">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Train.stopCallCount">
            <summary> Counter that remembers the # of consecutive times this train is told to stop. </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Train.clockHandler">
            <summary>
            Clock event handler.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Train.move(FreeTrain.World.CarState)">
            <summary>
            1voxel動かす
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Train.playSound(FreeTrain.Framework.Sound.ISoundEffect)">
            <summary>
            Plays a sound effect for this train if necessary.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Train.reverse">
            <summary>
            Reverses the direction of the train.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Train.isReversed">
            <summary>
            Returns true if the train is reversed.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Train._passenger">
            <summary>
            Number of passengers in this train.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Train.passenger">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Train.passengerSourceState">
            <summary>
            State of the car when the current passengers were loaded.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Train.passengerCapacity">
            <summary>
            Maximum number of passengers this train can hold.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Train.unloadPassengers">
            <summary>
            Unloads the passengers from this train.
            This method should be called only by the Station.unloadPassengers() method.
            </summary>
            <returns>number of unloaded passengers</returns>
        </member>
        <member name="M:FreeTrain.World.Rail.Train.loadPassengers(FreeTrain.World.Rail.Station,System.Int32)">
            <summary>
            Loads the passengers from this train.
            This method should be called only by the Station.loadPassengers() method.
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.Train.CalcNextTrainCarState">
            <summary>
            Determines the next car state by visiting the current state.
            This visitor is only applied against the head car.
            
            The method returns null if it cannot proceed because there's no
            rail road in front of the head car.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Train.CalcNextTrainCarState.Item(FreeTrain.World.CarState)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.Train.CalcNextTrainCarState.onInside(FreeTrain.World.CarState.Inside)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.Train.CalcNextTrainCarState.onUnplaced(FreeTrain.World.CarState.Unplaced)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.Train.CalcNextTrainCarState.onOutsie(FreeTrain.World.CarState.Outside)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.Train.calcReturnPoint(FreeTrain.World.CarState.Outside)">
            <summary>
            Determines where the train should re-appear into the world.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.Train.isConnected(FreeTrain.World.Location,FreeTrain.World.Direction)">
            <summary>
            Returns true if a train car can proceed to the
            specified location by going the specified direction
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Train.L45">
            <summary>
            45-degree rotational transformations from askew directions.
            (The same rotational transformations need to be doubled when
            applied against axis parallel directions)
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Train.returnPointMatrixes">
            <summary>
            Determines the return location from outside the world.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Train.reverseCarState">
            <summary>
            Reverse the direction of the visiting car state and return it.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Train.ReverseCarState.onInside(FreeTrain.World.CarState.Inside)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.Train.ReverseCarState.onUnplaced(FreeTrain.World.CarState.Unplaced)">
            <summary>
            
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.Train.ReverseCarState.onOutsie(FreeTrain.World.CarState.Outside)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="P:FreeTrain.World.Rail.Train.ReverseCarState.Item(FreeTrain.World.CarState)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.Rail.Train.TrainCar">
            <summary>
            一両の電車
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Train.TrainCar.#ctor(FreeTrain.World.Rail.Train,FreeTrain.Contributions.Train.TrainCarContribution,System.Int32)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="_type"></param>
            <param name="idx"></param>
        </member>
        <member name="F:FreeTrain.World.Rail.Train.TrainCar.parent">
            <summary> この電車を含む編成 </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Train.TrainCar.type">
            <summary> Type of this car. </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.Train.TrainCar.previous">
            <summary> Previous train car, or null. </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.Train.TrainCar.index">
            <summary>
            Index in the array. This car must be either at this
            position or "parent.cars.Length-index"
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Train.TrainCar.reverse">
            <summary>
            Reverses the direction of the car.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.Train.TrainCar.Draw(FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="dc"></param>
            <param name="pt"></param>
        </member>
        <member name="T:FreeTrain.World.Rail.JunctionRoute">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.JunctionRoute.Straight">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.JunctionRoute.Curve">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.TrainController">
            <summary>
            Controls the movement of a train.
            
            This object is responsible to determine:
            - When a train stop and how long
            - How does it proceed when it hits a junction
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.TrainController.onJunction(FreeTrain.World.Rail.Train,FreeTrain.World.Rail.JunctionRailRoad)">
            <summary>
            At junction, this method is called to determine
            the direction to which a train proceeds.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.TrainController.getStopTimeSpan(FreeTrain.World.Rail.Train,FreeTrain.World.Rail.ITrainHarbor,System.Int32)">
            <summary>
            This method is called when a train hits the stop position
            of a platform (or other train harbors.)
            </summary>
            <param name="callCount">
            This value is 0 when this method is called
            first time (when a train stops at a station.)
            After the given time is elapsed, the onStop method will be
            called again but this time with callCount==1. The value
            keeps increasing as this process repeats.
            </param>
            <returns>
            returns the amount of time the train should stop.
            after this time span, the train will call this same method
            so the train controller still has a chance to postpone the
            departure. Return 0 to make the train proceed, or return
            -1 to make the train turn around.
            
            Returning 0 when callCount==0 means the train will not stop
            at the specified platform.
            </returns>
            <param name="platform"></param>
            <param name="train"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.TrainController.config(System.Windows.Forms.IWin32Window)">
            <summary>
            Opens a configuration dialog if necessary. Or it can
            attach ModalController.
            </summary>
            <param name="owner">The parent window if the callee is
            going to open a modal dialog box.</param>
        </member>
        <member name="F:FreeTrain.World.Rail.TrainController.name">
            <summary>
            The user-friendly name assigned to this controller.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.TrainController.contribution">
            <summary>
            Obtains a reference to the contribution from which
            this controller is created.
            
            A system defined TrainController returns null.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.TrainController.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.Rail.TrainGroup">
            <summary>
            Group of trains and child train groups.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.TrainGroup.#ctor(FreeTrain.World.Rail.TrainGroup,System.String)">
            <summary>
            
            </summary>
            <param name="group"></param>
            <param name="name"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.TrainGroup.#ctor(FreeTrain.World.Rail.TrainGroup)">
            <summary>
            
            </summary>
            <param name="group"></param>
        </member>
        <member name="F:FreeTrain.World.Rail.TrainGroup.items">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.TrainGroup.TrainCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.TrainGroup.TrainCollection.add(FreeTrain.World.Rail.TrainItem)">
            <summary>
            
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.TrainGroup.TrainCollection.get(System.Int32)">
            <summary>
            
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.TrainGroup.TrainCollection.remove(FreeTrain.World.Rail.TrainItem)">
            <summary>
            
            </summary>
            <param name="t"></param>
        </member>
        <member name="T:FreeTrain.World.Rail.ITrainHarbor">
            <summary>
            Interface implemented by an entity that allows a train
            to stop.
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.ITrainHarbor.location">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.TrainItem">
            <summary>
            Common aspect of Train and TrainGroup.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.TrainItem.#ctor(FreeTrain.World.Rail.TrainGroup,System.String)">
            <summary>
            
            </summary>
            <param name="group"></param>
            <param name="_name"></param>
        </member>
        <member name="F:FreeTrain.World.Rail.TrainItem.name">
            <summary> Display name of this train. </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.TrainItem.controller">
            <summary>
            TrainController that controls this train/train group.
            
            TrainController for train groups are not directly used.
            Rather, they will be used only when the train controller
            that delegates the call to its parent is used.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.TrainItem.ownerGroup">
            <summary> TrainGroup to which this train belong. </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.TrainItem.moveUnder(FreeTrain.World.Rail.TrainGroup)">
            <summary> Move this group to a new train group </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.TunnelRailContributionImpl">
            <summary>
            SpecialRailContribution implementation for the BridgeRail
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.TunnelRailContributionImpl.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.TunnelRailContributionImpl.OnInitComplete">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.TunnelRailContributionImpl.TunnelRail">
            <summary>
            Tunnel rail roads.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.TunnelRailContributionImpl.TunnelRail.heights">
            <summary>
            stores corner heights of the mountain voxel so that we can restore it
            when this tunnel is removed.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.TunnelRailContributionImpl.TunnelRail.sOrW">
            <summary>
            this.dir1==sOrW || this.dir2==sOrW;
            and
            sOrW==Direction.SOUTH || sOrW==Direction.WEST;
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.TunnelRailContributionImpl.TunnelRail.remove">
            <summary>
            Removes this tunnel rail road and restore the original mountain voxel
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.TunnelRailContributionImpl.TunnelRail.drawBefore(FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.TunnelRailContributionImpl.TunnelRail.drawAfter(FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.TunnelRailContributionImpl.TunnelRail.invalidateVoxel">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.TunnelRailContributionImpl.CanBeBuilt(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Rail.TunnelRailContributionImpl.Build(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="here"></param>
            <param name="to"></param>
        </member>
        <member name="M:FreeTrain.World.Rail.TunnelRailContributionImpl.Remove(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="here"></param>
            <param name="to"></param>
        </member>
        <member name="P:FreeTrain.World.Rail.TunnelRailContributionImpl.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.TunnelRailContributionImpl.OneLineDescription">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Rail.TunnelRailContributionImpl.PreviewBitmap">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Rail.YardRailRoad">
            <summary>
            Rail road adjacent to a platform
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.YardRailRoad.#ctor(FreeTrain.World.TrafficVoxel,FreeTrain.World.Rail.Platform,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="_owner"></param>
            <param name="_idx"></param>
        </member>
        <member name="F:FreeTrain.World.Rail.YardRailRoad.owner">
            <summary> Platform object that owns this RR. </summary>
        </member>
        <member name="F:FreeTrain.World.Rail.YardRailRoad.index">
            <summary>
            Index of this railroad.
            The one closest to the base of the platform gets 0,
            and the number increases as RR gets further to the base.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Rail.YardRailRoad.getStopTimeSpan(FreeTrain.World.Rail.Train,System.Int32)">
            <summary>
            
            </summary>
            <param name="tr"></param>
            <param name="callCount"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.Accounting.AccountGenre">
            <summary>
            Accounting genre. Used to categorize expenses and sales.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Accounting.AccountGenre.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:FreeTrain.World.Accounting.AccountGenre.name">
            <summary> Name of this genre. </summary>
        </member>
        <member name="F:FreeTrain.World.Accounting.AccountGenre.onUpdate">
            <summary> Notified whenever the data gets updated. </summary>
        </member>
        <member name="P:FreeTrain.World.Accounting.AccountGenre.History">
            <summary>
            Get the transaction history of this genre.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Accounting.AccountGenre.Spend(System.Int64)">
            <summary>
            Short-cut to the <code>AccountManager.spend</code> method.
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:FreeTrain.World.Accounting.AccountGenre.Earn(System.Int64)">
            <summary>
            Short-cut to the <code>AccountManager.earn</code> method.
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:FreeTrain.World.Accounting.AccountGenre.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:FreeTrain.World.Accounting.AccountGenre.RailService">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Accounting.AccountGenre.RoadService">
            <summary>
            
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Accounting.AccountGenre.Subsidiaries">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Accounting.AccountGenre.Others">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Accounting.AccountListener">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Accounting.AccountManager">
            <summary>
            Maintains accounting and financing.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Accounting.AccountManager.debts">
            <summary> Debts. </summary>
        </member>
        <member name="F:FreeTrain.World.Accounting.AccountManager.onAccountChange">
            <summary>
            This event is fired everytime there's a change
            in the account. Parameters are not used.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Accounting.AccountManager.theInstance">
            <summary>
            Obtain a reference to the sole instance.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Accounting.AccountManager._liquidAssets">
            <summary>
            The current liquid assets.
            One can think of this as cold cash
            (though in reality a company never really has cash.)
            
            The game is over if the liquid assets goes below zero.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Accounting.AccountManager._totalDebts">
            <summary>
            Total amount of debts.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Accounting.AccountManager.liquidAssets">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Accounting.AccountManager.totalDebts">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Accounting.AccountManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Accounting.AccountManager.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="initialLiquidAssets"></param>
        </member>
        <member name="M:FreeTrain.World.Accounting.AccountManager.spend(System.Int64,FreeTrain.World.Accounting.AccountGenre)">
            <summary>
            
            </summary>
            <param name="delta"></param>
            <param name="genre"></param>
        </member>
        <member name="M:FreeTrain.World.Accounting.AccountManager.earn(System.Int64,FreeTrain.World.Accounting.AccountGenre)">
            <summary>
            
            </summary>
            <param name="delta"></param>
            <param name="genre"></param>
        </member>
        <member name="T:FreeTrain.World.Accounting.AccountSummaryWindow">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Accounting.AccountSummaryWindow.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Accounting.AccountSummaryWindow.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.World.Accounting.AccountSummaryWindow.OnClosed(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:FreeTrain.World.Accounting.AccountSummaryWindow.manager">
            <summary>
            Short-cut to the AccountingManager.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Accounting.AccountSummaryWindow.options">
            <summary>
            Persistent setting.
            </summary>
        </member>
        <member name="T:FreeTrain.World.Accounting.AccountSummaryWindow.Selector">
            <summary>
            Select a summary from a history by using the currently selected mode.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Accounting.AccountSummaryWindow.updateItems">
            <summary>
            Update the displayed data of list view items.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Accounting.AccountSummaryWindow.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:FreeTrain.World.Accounting.AccountSummaryWindow.populateListView">
            <summary>
            Set up items in the list view according to <code>options.genres</code>.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Accounting.AccountSummaryWindow.onChangeFont(System.Object,System.EventArgs)">
            <summary> Change font of the dialog. </summary>
        </member>
        <member name="M:FreeTrain.World.Accounting.AccountSummaryWindow.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:FreeTrain.World.Accounting.AccountSummaryWindow.GenreListItem">
            <summary>
            Manage ListViewItem and display information about an account genre.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Accounting.AccountSummaryWindow.GenreListItem.history">
            <summary> History object that whose value we are displaying. </summary>
        </member>
        <member name="M:FreeTrain.World.Accounting.AccountSummaryWindow.GenreListItem.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Accounting.AccountSummaryWindow.GenreListItem.onUpdate">
            <summary> Update data on the screen. </summary>
        </member>
        <member name="T:FreeTrain.World.Accounting.AccountSummaryWindow.Options">
            <summary>
            Persistent information of this dialog.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Accounting.AccountSummaryWindow.Options.font">
            <summary> display font. </summary>
        </member>
        <member name="F:FreeTrain.World.Accounting.AccountSummaryWindow.Options.genre">
            <summary>
            List of displayed genre ids.
            Public only for XmlSerializer.
            </summary>
            
        </member>
        <member name="P:FreeTrain.World.Accounting.AccountSummaryWindow.Options.Genre">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Accounting.AccountSummaryWindow.Options.genres">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Accounting.AccountSummaryWindow.Options.load">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.Accounting.BalanceSheetForm">
            <summary>
            Displays the balance sheet.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Accounting.BalanceSheetForm.create">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Accounting.BalanceSheetForm.OnClosed(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.World.Accounting.BalanceSheetForm.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:FreeTrain.World.Accounting.Debt">
            <summary>
            Payable.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Accounting.Debt.#ctor(System.Int64,FreeTrain.World.Time,FreeTrain.World.Accounting.AccountGenre)">
            <summary>
            
            </summary>
            <param name="amount"></param>
            <param name="due"></param>
            <param name="genre"></param>
        </member>
        <member name="F:FreeTrain.World.Accounting.Debt.amount">
            <summary> Amount due. </summary>
        </member>
        <member name="F:FreeTrain.World.Accounting.Debt.due">
            <summary> Due date. </summary>
        </member>
        <member name="F:FreeTrain.World.Accounting.Debt.genre">
            <summary> Genre. </summary>
        </member>
        <member name="P:FreeTrain.World.Accounting.Debt.span">
            <summary> TimeLength before the due date </summary>
        </member>
        <member name="M:FreeTrain.World.Accounting.Debt.onDue">
            <summary>
            Called automatically by the clock when the time comes to
            return the debt.
            </summary>
        </member>
        <member name="T:FreeTrain.World.Accounting.GenreSelectorDialog">
            <summary>
            Let the user select a list of account genre.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Accounting.GenreSelectorDialog.#ctor(FreeTrain.World.Accounting.AccountGenre[])">
            <summary>
            
            </summary>
            <param name="current"></param>
        </member>
        <member name="P:FreeTrain.World.Accounting.GenreSelectorDialog.selected">
            <summary>
            Obtain the list of selected genres in a modifiable array.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Accounting.GenreSelectorDialog.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:FreeTrain.World.Accounting.TransactionSummary">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Accounting.TransactionSummary.sales">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Accounting.TransactionSummary.expenditures">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Accounting.TransactionSummary.balance">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Accounting.TransactionHistory">
            <summary>
            Records the summary of past transactions.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Accounting.TransactionHistory.Recorder.onClock">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Accounting.TransactionHistory.day">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Accounting.TransactionHistory.month">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Accounting.TransactionHistory.year">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Accounting.TransactionHistory.#ctor">
            <summary>
            Record transactions of the given genre.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Accounting.TransactionHistory.DayTransactionSummary.sales">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Accounting.TransactionHistory.DayTransactionSummary.expenditures">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Accounting.TransactionHistory.MonthTransactionSummary.sales">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Accounting.TransactionHistory.MonthTransactionSummary.expenditures">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Accounting.TransactionHistory.YearTransactionSummary.sales">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Accounting.TransactionHistory.YearTransactionSummary.expenditures">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Car">
            <summary>
            A car can be in three states.
            
            (1) inside a map
            	direction!=null, and location has a valid value
            (2) not placed
            	direction==null, location==UNPLACED
            (3) outside map
            </summary>
        </member>
        <member name="M:FreeTrain.World.Car.SetState(FreeTrain.World.CarState)">
            <summary>
            Set the new state.
            </summary>
            <returns>the previous state</returns>
        </member>
        <member name="P:FreeTrain.World.Car.State">
            <summary>
            Current location/direction of the car.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Car.Place(FreeTrain.World.Location,FreeTrain.World.Direction)">
            <summary>
            車両を配置する
            </summary>
        </member>
        <member name="M:FreeTrain.World.Car.Remove">
            <summary>
            車両を現在位置から撤去する
            </summary>
        </member>
        <member name="M:FreeTrain.World.Car.OnClick">
            <summary>
            Called when a car is clicked.
            </summary>
            <returns>true if the click is processed and consumed</returns>
        </member>
        <member name="M:FreeTrain.World.Car.Draw(FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            Draws the car into the specified location.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Car.Get(FreeTrain.World.Location)">
            <summary>
            Gets a car that occupies the specified place, if any. Or null otherwise.
            </summary>
        </member>
        <member name="T:FreeTrain.World.CarState">
            <summary>
            Current state of a car. Immutable.
            </summary>
        </member>
        <member name="M:FreeTrain.World.CarState.asInside">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.CarState.asUnplaced">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.CarState.asOutside">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.CarState.asPlaced">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:FreeTrain.World.CarState.isInside">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.CarState.isUnplaced">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.CarState.isOutside">
            <summary>
            
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.CarState.accept(FreeTrain.World.CarState.IVisitor)">
            <summary>
            
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.CarState.IVisitor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.CarState.IVisitor.onInside(FreeTrain.World.CarState.Inside)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.CarState.IVisitor.onUnplaced(FreeTrain.World.CarState.Unplaced)">
            <summary>
            
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.CarState.IVisitor.onOutsie(FreeTrain.World.CarState.Outside)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.CarState.Placed">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.CarState.Placed.direction">
            <summary>
            Direction of the car.
            </summary>
        </member>
        <member name="F:FreeTrain.World.CarState.Placed.location">
            <summary>
            Current location of the car.
            </summary>
        </member>
        <member name="P:FreeTrain.World.CarState.Placed.voxel">
            <summary>
            Voxel that represents the location.
            </summary>
        </member>
        <member name="M:FreeTrain.World.CarState.Placed.#ctor(FreeTrain.World.Location,FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <param name="dir"></param>
        </member>
        <member name="T:FreeTrain.World.CarState.Inside">
            <summary>
            Inside the world.
            </summary>
        </member>
        <member name="M:FreeTrain.World.CarState.Inside.#ctor(FreeTrain.World.Location,FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <param name="dir"></param>
        </member>
        <member name="M:FreeTrain.World.CarState.Inside.accept(FreeTrain.World.CarState.IVisitor)">
            <summary>
            
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.CarState.Unplaced">
            <summary>
            In the inventory but not used.
            </summary>
        </member>
        <member name="M:FreeTrain.World.CarState.Unplaced.GetRealObject(System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="ctxt"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.CarState.Unplaced.accept(FreeTrain.World.CarState.IVisitor)">
            <summary>
            
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="F:FreeTrain.World.CarState.Unplaced.theInstance">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.CarState.Outside">
            <summary>
            Outside the world. The member variables keep the location
            and the direction of a car when it left the world.
            IOW the location is always outside the world.
            </summary>
        </member>
        <member name="F:FreeTrain.World.CarState.Outside.timeLeft">
            <summary>
            Decreasing counter. When it hits zero, the car will be back to the world.
            </summary>
        </member>
        <member name="M:FreeTrain.World.CarState.Outside.#ctor(FreeTrain.World.Location,FreeTrain.World.Direction,System.Int32)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <param name="dir"></param>
            <param name="_timeLeft"></param>
        </member>
        <member name="M:FreeTrain.World.CarState.Outside.accept(FreeTrain.World.CarState.IVisitor)">
            <summary>
            
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.ClockHandler">
            <summary>
            Handles a clock event.
            </summary>
        </member>
        <member name="T:FreeTrain.World.Season">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Season.Spring">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Season.Summer">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Season.Autumn">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Season.Winter">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.DayNight">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.DayNight.DayTime">
            <summary>
            
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.DayNight.Night">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Clock">
            <summary>
            Clock that governs the time of the world.
            
            Because of the way Windows Forms work, this class is not self-sufficient.
            The main window needs to run a timr and periodically call the tick method
            of this class to make this class work.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Clock.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Clock.setCurrentTime(System.Int64)">
            <summary>
            
            </summary>
            <param name="t"></param>
        </member>
        <member name="F:FreeTrain.World.Clock.queue">
            <summary>
            Handlers that are waiting for the clock notification.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Clock.registerOneShot(FreeTrain.World.ClockHandler,FreeTrain.World.TimeLength)">
            <summary>
            Registers an one-shot timer, which will be fired after
            the specified time span.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Clock.registerOneShot(FreeTrain.World.ClockHandler,FreeTrain.World.Time)">
            <summary>
            Registers an one-shot timer, which will be fired at
            the specified time.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Clock.registerRepeated(FreeTrain.World.ClockHandler,FreeTrain.World.TimeLength)">
            <summary>
            Registers a repeated-timer, which will be fired
            periodically for every specified interval.
            
            The first clock notification will be sent also after the
            specified minutes.
            </summary>
            <returns>
            The cookie, which shall be then used to unregister the timer.
            </returns>
        </member>
        <member name="M:FreeTrain.World.Clock.registerRepeated(FreeTrain.World.ClockHandler,FreeTrain.World.TimeLength,FreeTrain.World.TimeLength)">
            <summary>
            Registers a repeated-timer, which will be fired
            periodically for every specified interval.
            </summary>
            <param name="first">The first event will be sent after this interval.</param>
            <param name="interval">Successive events will be fired with this interval.</param>
            <returns>
            The cookie, which shall be then used to unregister the timer.
            </returns>
            <param name="handler"></param>
        </member>
        <member name="M:FreeTrain.World.Clock.unregister(FreeTrain.World.ClockHandler)">
            <summary>
            Unregisters a repeated timer.
            </summary>
        </member>
        <member name="T:FreeTrain.World.Clock.RepeatedTimer">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Clock.RepeatedTimer.#ctor(FreeTrain.World.Clock,FreeTrain.World.ClockHandler,FreeTrain.World.TimeLength,FreeTrain.World.TimeLength)">
            <summary>
            
            </summary>
            <param name="_clock"></param>
            <param name="_handler"></param>
            <param name="first"></param>
            <param name="_interval"></param>
        </member>
        <member name="M:FreeTrain.World.Clock.RepeatedTimer.onClock">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Clock.endOfTurnHandlers">
            <summary>
            One-time call back at the end of a turn.
            
            To get continuous call back after each end of turn,
            keep registering handlers at the end of each callback.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Clock.tick">
            <summary>
            Make the clock tick.
            </summary>
        </member>
        <member name="T:FreeTrain.World.Cube">
            <summary>
            Cubic space in the world.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Cube.corner">
            <summary>
            The north-western bottom corner of the cube.
            The location of the voxel that has the smallest (x,y,z)
            value in the cube.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Cube.Corner">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Cube.sx">
            <summary>
            Size of the cube.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Cube.SizeX">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Cube.SizeY">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Cube.SizeZ">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Cube.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="_sx"></param>
            <param name="_sy"></param>
            <param name="_sz"></param>
        </member>
        <member name="M:FreeTrain.World.Cube.#ctor(FreeTrain.World.Location,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="_corner"></param>
            <param name="_sx"></param>
            <param name="_sy"></param>
            <param name="_sz"></param>
        </member>
        <member name="M:FreeTrain.World.Cube.#ctor(FreeTrain.World.Location,System.Drawing.Size,System.Int32)">
            <summary>
            
            </summary>
            <param name="_corner"></param>
            <param name="sz"></param>
            <param name="z"></param>
        </member>
        <member name="M:FreeTrain.World.Cube.CreateExclusive(FreeTrain.World.Location,FreeTrain.World.Distance)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Cube.CreateExclusive(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            Create a cube represented by two locations [loc1,loc2)
            The voxel pointed by loc1 is inside the cube but that by loc2
            is not. (Hence the name "exclusive")
            </summary>
        </member>
        <member name="M:FreeTrain.World.Cube.CreateInclusive(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc1"></param>
            <param name="loc2"></param>
            <returns></returns>
        </member>
        <member name="P:FreeTrain.World.Cube.x1">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Cube.y1">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Cube.z1">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Cube.x2">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Cube.y2">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Cube.z2">
            <summary>
            
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Cube.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Cube.Volume">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Cube.IsOnGround">
            <summary>
            Return true if this cube is on the ground.
            This property can be used to check if a structure can be built
            in this cube.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Cube.Contains(FreeTrain.World.Location)">
            <summary>
            Checks if this cube contains the given location.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Cube.BoundingABRect">
            <summary>
            Computes the rectangle in the (A,B) axis that completely contains
            all the voxels in this cube.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Cube.GetEntities">
            <summary>
            Lists up all the entities whose voxels intersect with this cube.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Cube.Voxels">
            <summary>
            Enumerates all the voxels inside a cube.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Cube.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Cube.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.Development.CommercialStructurePlan">
            <summary>
            CommercialStructurePlan の概要の説明です。
            </summary>
        </member>
        <member name="T:FreeTrain.World.Development.DevelopConfigure">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Development.DevelopConfigure.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Development.DevelopConfigure.Dispose(System.Boolean)">
            <summary>
            使用されているリソースに後処理を実行します。
            </summary>
        </member>
        <member name="M:FreeTrain.World.Development.DevelopConfigure.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:FreeTrain.World.Development.DevelopConfigurePlugin">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Development.DevelopConfigurePlugin.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.World.Development.DevelopConfigurePlugin.MergeMenu(System.Windows.Forms.MainMenu)">
            <summary>
            
            </summary>
            <param name="containerMenu"></param>
        </member>
        <member name="T:FreeTrain.World.Development.DevelopmentAlgorithm">
            <summary>
            Receives clock event and build a new structure if appropriate
            </summary>
        </member>
        <member name="M:FreeTrain.World.Development.DevelopmentAlgorithm.handleClock">
            <summary>
            Invoked by the timer.
            Run the development algorithm.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Development.DevelopmentAlgorithm.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Development.DevelopmentAlgorithm.FindFirstIndexOf(System.Collections.ArrayList,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="price"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Development.DevelopmentAlgorithm.FindLastIndexOf(System.Collections.ArrayList,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="price"></param>
            <returns></returns>
        </member>
        <member name="F:FreeTrain.World.Development.DevelopmentAlgorithm.ULVs">
            <summary>
            Dictionary from Cube to its ULV.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Development.DevelopmentAlgorithm.doClock">
            <summary>
            Do the actual development algorithm.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Development.DevelopmentAlgorithm.onStationRemoved(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.World.Development.DevelopmentAlgorithm.create(FreeTrain.World.Cube)">
            <summary>
            Computes the "unused land value."
            If any structure cannot be built in this cube. returns null.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Development.SearchPlan.#ctor(FreeTrain.World.Development.DevelopmentAlgorithm,FreeTrain.World.Rail.Station)">
            <summary>
            
            </summary>
            <param name="devalgo"></param>
            <param name="s"></param>
        </member>
        <member name="M:FreeTrain.World.Development.SearchPlan.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Development.SearchPlan.Process">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Development.SearchPlan.GetPlan(FreeTrain.Contributions.Common.IEntityBuilder)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Development.SearchPlan.pickPlace(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Development.SearchPlan.IsReplaceable(FreeTrain.World.IEntity,System.Int32)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="comPrice"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Development.BuilderPriceComparer.Compare(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.Development.LandPlan">
            <summary>
            Plan of land surfaces such as crop fields.
            </summary>
        </member>
        <member name="T:FreeTrain.World.Development.LandValue">
            <summary>
            Computes and maintains land value.
            
            This algorithm is based on the heat conductivity model,
            where the source of value is considered as a heat source,
            and temprature is in turn considered as land value.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Development.LandValue.RHO_BARE_LAND">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Development.LandValue.#ctor(FreeTrain.World.WorldDefinition)">
            <summary>
            Creates a new object and associates that with the world.
            </summary>
            <param name="w"></param>
        </member>
        <member name="F:FreeTrain.World.Development.LandValue.q">
            <summary> "tempratures" for each (h,v) </summary>
        </member>
        <member name="F:FreeTrain.World.Development.LandValue.back">
            <summary> back buffer </summary>
        </member>
        <member name="F:FreeTrain.World.Development.LandValue.rho">
            <summary> heat conductivity (0-1) </summary>
        </member>
        <member name="M:FreeTrain.World.Development.LandValue.Rho(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="P:FreeTrain.World.Development.LandValue.Item(System.Int32,System.Int32)">
            <summary>
            Returns the land value for the given voxel.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Development.LandValue.Item(FreeTrain.World.Location)">
            <summary>
            Returns the land value for the given voxel.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Development.LandValue.next">
            <summary>
            Made public just because of a bug in .NET.
            Compute the next step.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Development.LandValue.addQ(FreeTrain.World.Location,System.Single)">
            <summary>
            Deposites "heat".
            </summary>
        </member>
        <member name="M:FreeTrain.World.Development.LandValue.updateRho(FreeTrain.World.Location)">
            <summary>
            Public simply because of a bug in .NET
            Updates the heat conductivity according to the voxels we have.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Development.LandValue.ALPHA">
            <summary>
            Heat conductivity factor.
            The larger the value, the faster heat spreads.
            No more than 0.25. Otherwise the model becomes chaotic.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Development.LandValue.DIFF">
            <summary>
            Diffusion. 1-epsilon.
            The larger the epsilon, the more heat evaporates.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Development.LandValue.UPDATE_FREQUENCY">
            <summary>
            N where the land values are recomputed for every N hours.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Development.LandValue.LAND_VAL_POWER">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Development.LandValueInspector">
            <summary>
            Controller that checks the land value.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Development.LandValueInspector.InitializeComponent">
            <summary>
            Designer サポートに必要なメソッドです。コード エディタで
            このメソッドのコンテンツを変更しないでください。
            </summary>
        </member>
        <member name="T:FreeTrain.World.Development.LandValueInspectorPlugin">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Development.LandValueInspectorPlugin.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.World.Development.LandValueInspectorPlugin.MergeMenu(System.Windows.Forms.MainMenu)">
            <summary>
            
            </summary>
            <param name="containerMenu"></param>
        </member>
        <member name="T:FreeTrain.World.Development.Plan">
            <summary>
            A planned structure that the development algorithm considers.
            
            A planned structure has a structure type, the location, and the size in it.
            IOW, it has enough information to build itself by the build method
            without any external context information.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Development.Plan.ulv">
            <summary>
            Gets the ULV of the planned construction site
            </summary>
        </member>
        <member name="P:FreeTrain.World.Development.Plan.value">
            <summary>
            Value of the planned new structure.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Development.Plan.bias">
            <summary>
            Bias can be used to change the likelihood of this plan to
            be realized. 1 is the normal value. Bigger value means better
            chance, smaller value means lower chance.
            The likelihood will be doubled if the bias is doubled
            </summary>
        </member>
        <member name="P:FreeTrain.World.Development.Plan.cube">
            <summary>
            Bounding cube that this plan will occuply (once realized)
            </summary>
        </member>
        <member name="M:FreeTrain.World.Development.Plan.build">
            <summary>
            Builds the structure in the world.
            </summary>
        </member>
        <member name="T:FreeTrain.World.Development.ULV">
            <summary>
            ULV stands for "Unused Land Value."
            ULV is a property of a cube on the ground.
            
            It consits of two parts; sum of the land values in the cube,
            and sum of the entity values in the cube.
            
            This is an index of how well a space is utilized.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Development.ULV.landValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Development.ULV.entityValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Development.ULV.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="landValue"></param>
            <param name="entityValue"></param>
        </member>
        <member name="M:FreeTrain.World.Development.ULV.create(FreeTrain.World.Cube)">
            <summary>
            Creates a ULV of the specified surface.
            </summary>
            <param name="cube">
            a surface specified as a cube. The height of the cube must be zero.
            </param>
            <returns>
            null if unable to to compute ULV or if any voxel in the cube is owned by
            the user.
            </returns>
        </member>
        <member name="T:FreeTrain.World.Development.IULVFactory">
            <summary>
            Factory of ULV.
            
            ULV is a proper function of Cube and time. Often, we compute
            a lot of ULVs by fixing a time, so it can be easily cached
            for improved performance.
            
            ULVFactory hides the caching detail.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Development.IULVFactory.create(FreeTrain.World.Cube)">
            <summary>
            
            </summary>
            <param name="cube"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.Development.VarHeightBuildingPlan">
            <summary>
            VarHeightBuildingPlan の概要の説明です。
            </summary>
        </member>
        <member name="T:FreeTrain.World.Direction">
            <summary>
            方向（８方向。速度を伴わない）
            </summary>
        </member>
        <member name="M:FreeTrain.World.Direction.get(System.Int32,System.Int32)">
            <summary>
            方向ベクトルからオブジェクトを得る
            </summary>
        </member>
        <member name="M:FreeTrain.World.Direction.get(System.Int32)">
            <summary>
            インデックスからオブジェクトを得る
            </summary>
        </member>
        <member name="P:FreeTrain.World.Direction.NORTH">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Direction.NORTHEAST">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Direction.EAST">
            <summary>
            
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Direction.SOUTHEAST">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Direction.SOUTH">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Direction.SOUTHWEST">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Direction.WEST">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Direction.NORTHWEST">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Direction.offsetX">
            <summary>
            オフセット
            </summary>
        </member>
        <member name="F:FreeTrain.World.Direction.offsetY">
            <summary>
            オフセット
            </summary>
        </member>
        <member name="F:FreeTrain.World.Direction.displayName">
            <summary>
            表示用の名称
            </summary>
        </member>
        <member name="P:FreeTrain.World.Direction.isSharp">
            <summary>
            Returns true if the direction is one of N,E,S, or W.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Direction.isParallelToX">
            <summary>
            Returns true if the direction is EAST or WEST
            </summary>
        </member>
        <member name="P:FreeTrain.World.Direction.isParallelToY">
            <summary>
            Returns true if the direction is NORTH or SOUTH
            </summary>
        </member>
        <member name="F:FreeTrain.World.Direction.index">
            <summary>
            [0,8)のインデックス。
            </summary>
        </member>
        <member name="P:FreeTrain.World.Direction.left">
            <summary>
            反時計回りに４５度回転したDirectionを得る
            </summary>
        </member>
        <member name="P:FreeTrain.World.Direction.left90">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Direction.right">
            <summary>
            時計回りに４５度回転したDirectionを得る
            </summary>
        </member>
        <member name="P:FreeTrain.World.Direction.right90">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Direction.opposite">
            <summary>Gets the opposite direction.</summary>
        </member>
        <member name="M:FreeTrain.World.Direction.angle(FreeTrain.World.Direction,FreeTrain.World.Direction)">
            <summary>
            ２つのDirectionの交差角を４５度の倍数で得る。
            戻り値は[0,4]。1なら４５度で交差。
            </summary>
        </member>
        <member name="M:FreeTrain.World.Direction.op_Implicit(FreeTrain.World.Direction)~FreeTrain.World.Distance">
            <summary>
            Cast operators
            </summary>
        </member>
        <member name="M:FreeTrain.World.Direction.drawArrow(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point,System.Boolean)">
            <summary> Draws an arrow on the given surface. </summary>
        </member>
        <member name="M:FreeTrain.World.Direction.drawArrow(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point)">
            <summary> Draws an arrow on the given surface. </summary>
        </member>
        <member name="M:FreeTrain.World.Direction.drawDarkArrow(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point)">
            <summary> Draws a dark arrow on the given surface. </summary>
        </member>
        <member name="F:FreeTrain.World.Direction.directions">
            <summary>
            存在する全てのオブジェクト。北から時計回り
            </summary>
        </member>
        <member name="M:FreeTrain.World.Direction.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:FreeTrain.World.DrawContext">
            <summary>
            Voxels will access GDI DC or DirectDraw surface
            via this object.
            
            This object minimizes the number of "context switch"
            between GDI DC and DirectDraw.
            </summary>
        </member>
        <member name="M:FreeTrain.World.DrawContext.#ctor(FreeTrain.Framework.Graphics.Surface)">
            <summary>
            
            </summary>
            <param name="surface"></param>
        </member>
        <member name="P:FreeTrain.World.DrawContext.Surface">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.DrawContext.Dispose">
            <summary>
            Only the owner of the DrawContext class can
            call this method.
            </summary>
        </member>
        <member name="F:FreeTrain.World.DrawContext.tag">
            <summary>
            MapOverlay can use this property to pass parameters among
            various callbacks.
            </summary>
        </member>
        <member name="P:FreeTrain.World.DrawContext.Tag">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.EmptyVoxel">
            <summary>
            Empty, in the sense that nothing will be drawn, but
            occupied, in the sense that the space is already in use.
            </summary>
        </member>
        <member name="P:FreeTrain.World.EmptyVoxel.Transparent">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.EmptyVoxel.#ctor(FreeTrain.World.IEntity,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:FreeTrain.World.EmptyVoxel.#ctor(FreeTrain.World.IEntity,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="loc"></param>
        </member>
        <member name="M:FreeTrain.World.EmptyVoxel.Draw(FreeTrain.World.DrawContext,System.Drawing.Point,System.Int32)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="pt"></param>
            <param name="heightCutDiff"></param>
        </member>
        <member name="P:FreeTrain.World.EmptyVoxel.Entity">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.IEntity">
            <summary>
            Set of voxels that behaves as one logical concept.
            
            Often multiple voxels are used together to represent a single concept.
            For example, a building usually consists of multiple voxels, whereas
            each voxel of a crop field behaves independently.
            
            The notion of entity is primarily introduced to support the development
            algorithm where we need to consider a structure as "one thing" rather than
            a set of seemingly unrelated voxels.
            
            The entity interface is accessible through the Voxel.queryInterface method.
            If two entity objects e1 and e2 are the same (i.e., e1==e2) then they are
            considered to the same entity. IOW, if two voxels return the same Entity object,
            that means those two voxels belong to the same entity.
            
            TODO: this concept needs to be refined.
            
            TODO: it's not clear why multiple tunnel voxels don't form one entity, for example.
            </summary>
        </member>
        <member name="P:FreeTrain.World.IEntity.EntityValue">
            <summary>
            The monetary value of the entity.
            </summary>
        </member>
        <member name="P:FreeTrain.World.IEntity.isOwned">
            <summary>
            True if this entity belongs to the user, false otherwise.
            See the isSilentlyReclaimable property for details.
            </summary>
        </member>
        <member name="P:FreeTrain.World.IEntity.isSilentlyReclaimable">
            <summary>
            True if this entity can be torn down (through the remove method)
            by the user without any consent.
            
            For example, crop fields are isSilentlyRecilaimable  !isOwned.
            These entities can be automatically destructed as the user places
            rail road and structures.
            
            Mountains are examples of !isSilentlyReclaimable !isOwned.
            Stations are examples of !isSilentlyReclaimable isOwned, and
            finally land properties are examples of isSilentlyReclaimable
             isOwned.
            </summary>
        </member>
        <member name="M:FreeTrain.World.IEntity.remove">
            <summary>
            Removes this entity from the world. If this entity is owned
            by the user, the callee will charge the cost to the user's account.
            
            Note that this method can be called not just because of an user's action.
            For example, the development algorithm can choose to tear down some
            non-user owned structure.
            
            This method must succeed.
            </summary>
        </member>
        <member name="E:FreeTrain.World.IEntity.onEntityRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.IEntity.QueryInterface(System.Type)">
            <summary>
            Query this entity to return some "aspect" of it.
            
            Aspect is usually a tear-off interface that allows
            entities to be extended through compositions.
            
            <returns>null if the given aspect is not supported.</returns>
            </summary>
        </member>
        <member name="T:FreeTrain.World.IVoxelOutlookListener">
            <summary>
            Receive notifications of changes in voxel outlook.
            </summary>
        </member>
        <member name="M:FreeTrain.World.IVoxelOutlookListener.OnUpdateAllVoxels">
            <summary>
            Called when all the voxels need to be fully updated.
            </summary>
        </member>
        <member name="M:FreeTrain.World.IVoxelOutlookListener.OnUpdateVoxel(FreeTrain.World.Location)">
            <summary>
            Called when a particular voxel is updated.
            </summary>
        </member>
        <member name="M:FreeTrain.World.IVoxelOutlookListener.OnUpdateVoxel(FreeTrain.World.Cube)">
            <summary>
            Called when a cube of voxels are updated.
            </summary>
        </member>
        <member name="T:FreeTrain.World.Land.LandPropertyVoxel">
            <summary>
            Player-owned land property.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Land.LandPropertyVoxel.#ctor(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc"></param>
        </member>
        <member name="P:FreeTrain.World.Land.LandPropertyVoxel.Entity">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Land.LandPropertyVoxel.Draw(FreeTrain.World.DrawContext,System.Drawing.Point,System.Int32)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="pt"></param>
            <param name="heightCutDiff"></param>
        </member>
        <member name="P:FreeTrain.World.Land.LandPropertyVoxel.isSilentlyReclaimable">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Land.LandPropertyVoxel.isOwned">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Land.LandPropertyVoxel.EntityValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Land.LandPropertyVoxel.remove">
            <summary>
            
            </summary>
        </member>
        <member name="E:FreeTrain.World.Land.LandPropertyVoxel.onEntityRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Land.LandPropertyVoxel.sprite">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Land.LandVoxel">
            <summary>
            Land filler that occupies only one voxel.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Land.LandVoxel.#ctor(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc"></param>
        </member>
        <member name="P:FreeTrain.World.Land.LandVoxel.Transparent">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Land.LandVoxel.Entity">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Land.LandVoxel.isSilentlyReclaimable">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Land.LandVoxel.isOwned">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Land.LandVoxel.owned">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Land.LandVoxel.EntityValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Land.LandVoxel.remove">
            <summary>
            
            </summary>
        </member>
        <member name="E:FreeTrain.World.Land.LandVoxel.onEntityRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Land.LandVoxel.canBeBuilt(FreeTrain.World.Location)">
            <summary>
            Utility method for derived classes. Returns true
            if a land voxel can be placed at the specified location
            </summary>
        </member>
        <member name="T:FreeTrain.World.Land.StaticLandVoxel">
            <summary>
            Land voxel with a fixed graphics and its population.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Land.StaticLandVoxel.#ctor(FreeTrain.World.Location,FreeTrain.Contributions.Land.StaticLandBuilder)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <param name="contrib"></param>
        </member>
        <member name="M:FreeTrain.World.Land.StaticLandVoxel.OnRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Land.StaticLandVoxel.EntityValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Land.StaticLandVoxel.Draw(FreeTrain.World.DrawContext,System.Drawing.Point,System.Int32)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="pt"></param>
            <param name="heightCutDiff"></param>
        </member>
        <member name="M:FreeTrain.World.Land.StaticLandVoxel.QueryInterface(System.Type)">
            <summary>
            
            </summary>
            <param name="aspect"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.WorldLocator">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.WorldLocator.w">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.WorldLocator.l">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.WorldLocator.#ctor(FreeTrain.World.WorldDefinition,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="world"></param>
            <param name="_x"></param>
            <param name="_y"></param>
            <param name="_z"></param>
        </member>
        <member name="M:FreeTrain.World.WorldLocator.#ctor(FreeTrain.World.WorldDefinition,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="world"></param>
            <param name="loc"></param>
        </member>
        <member name="P:FreeTrain.World.WorldLocator.location">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.WorldLocator.world">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Location">
            <summary>
            世界での位置を示すオブジェクト
            </summary>
        </member>
        <member name="M:FreeTrain.World.Location.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="_x"></param>
            <param name="_y"></param>
            <param name="_z"></param>
        </member>
        <member name="F:FreeTrain.World.Location.x">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Location.y">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Location.z">
            <summary>
            
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Location.toward(FreeTrain.World.Location)">
            <summary>
            Gets the location one step closer to the given location.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Location.getDirectionTo(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Location.getDistanceTo(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="P:FreeTrain.World.Location.world">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Location.distanceTo(FreeTrain.World.Location)">
            <summary>
            Computes the distance (in Euclidean sense)
            </summary>
        </member>
        <member name="M:FreeTrain.World.Location.inBetween(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            Returns true if this location is in the cube projected
            by the two locations.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Location.max(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Location.min(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Location.align4To(FreeTrain.World.Location)">
            <summary>
            Aligns this location to the specified location so that
            two locations will either have same X value or Y value.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Location.align8To(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="anchor"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Location.op_Addition(FreeTrain.World.Location,FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Location.op_Subtraction(FreeTrain.World.Location,FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Location.op_Addition(FreeTrain.World.Location,FreeTrain.World.Distance)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <param name="dis"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Location.op_Subtraction(FreeTrain.World.Location,FreeTrain.World.Distance)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <param name="dis"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Location.op_Subtraction(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Location.op_Inequality(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc1"></param>
            <param name="loc2"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Location.op_Equality(FreeTrain.World.Location,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc1"></param>
            <param name="loc2"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Location.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Location.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Location.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:FreeTrain.World.Location.Unplaced">
            <summary>
            位置を持たないことを示す特殊な値
            </summary>
        </member>
        <member name="T:FreeTrain.World.Distance">
            <summary>
            Location同士の差分
            </summary>
        </member>
        <member name="M:FreeTrain.World.Distance.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="_x"></param>
            <param name="_y"></param>
            <param name="_z"></param>
        </member>
        <member name="M:FreeTrain.World.Distance.#ctor(System.Drawing.Size,System.Int32)">
            <summary>
            
            </summary>
            <param name="sz"></param>
            <param name="_z"></param>
        </member>
        <member name="F:FreeTrain.World.Distance.x">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Distance.y">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Distance.z">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Distance.volume">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Distance.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Distance.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Distance.op_Inequality(FreeTrain.World.Distance,FreeTrain.World.Distance)">
            <summary>
            
            </summary>
            <param name="d1"></param>
            <param name="d2"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Distance.op_Equality(FreeTrain.World.Distance,FreeTrain.World.Distance)">
            <summary>
            
            </summary>
            <param name="d1"></param>
            <param name="d2"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Distance.op_Division(FreeTrain.World.Distance,System.Int32)">
            <summary>
            
            
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.Matrix">
            <summary>
            Matrix that applies to directions. Immutable.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Matrix.a">
            <summary>
            All the numbers are doubled to allow the matrix to perform 45-degree
            rotational transformation.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Matrix.b">
            <summary>
            All the numbers are doubled to allow the matrix to perform 45-degree
            rotational transformation.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Matrix.c">
            <summary>
            All the numbers are doubled to allow the matrix to perform 45-degree
            rotational transformation.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Matrix.d">
            <summary>
            All the numbers are doubled to allow the matrix to perform 45-degree
            rotational transformation.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Matrix.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
        </member>
        <member name="M:FreeTrain.World.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
        </member>
        <member name="M:FreeTrain.World.Matrix.op_Addition(FreeTrain.World.Matrix,FreeTrain.World.Matrix)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Matrix.op_Subtraction(FreeTrain.World.Matrix,FreeTrain.World.Matrix)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Matrix.op_Multiply(System.Int32,FreeTrain.World.Matrix)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Matrix.op_Multiply(FreeTrain.World.Matrix,FreeTrain.World.Distance)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="F:FreeTrain.World.Matrix.E">
            <summary>
            Identity transformation
            </summary>
        </member>
        <member name="F:FreeTrain.World.Matrix.L90">
            <summary>
            90-degree left rotational transformation
            </summary>
        </member>
        <member name="F:FreeTrain.World.Matrix.R90">
            <summary>
            90-degree right rotational transformation
            </summary>
        </member>
        <member name="F:FreeTrain.World.Matrix.REVERSE">
            <summary>
            180-degree rotational transformation
            </summary>
        </member>
        <member name="T:FreeTrain.World.Road.Bus">
            <summary>
            Bus
            </summary>
        </member>
        <member name="M:FreeTrain.World.Road.Bus.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Road.Bus.Draw(FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="T:FreeTrain.World.Road.BaseRoad">
            <summary>
            Automobile Road
            </summary>
        </member>
        <member name="M:FreeTrain.World.Road.BaseRoad.#ctor(FreeTrain.World.TrafficVoxel,FreeTrain.World.Road.RoadPattern,FreeTrain.World.Road.RoadStyle)">
            <summary>
            
            </summary>
            <param name="tv"></param>
            <param name="pattern"></param>
            <param name="style"></param>
        </member>
        <member name="F:FreeTrain.World.Road.BaseRoad._style">
            <summary>
            Detailed Attribute of road
            </summary>
        </member>
        <member name="P:FreeTrain.World.Road.BaseRoad.Style">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Road.BaseRoad.voxel">
            <summary>
            Occupied voxel 
            </summary>
        </member>
        <member name="P:FreeTrain.World.Road.BaseRoad.Voxel">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Road.BaseRoad.Location">
            <summary>
            Location of this road
            </summary>
        </member>
        <member name="M:FreeTrain.World.Road.BaseRoad.InvalidateVoxel">
            <summary>
            Called by the <c>TrafficVoxel</c> to invalidate
            voxels.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Road.BaseRoad.onClick">
            <summary>
            Called when a road is clicked.
            </summary>
            <returns>true if the click is processed and consumed</returns>
        </member>
        <member name="P:FreeTrain.World.Road.BaseRoad.isOccupied">
            <summary>
            Returns true if a car is already on this road.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Road.BaseRoad.Attach(FreeTrain.World.Direction)">
            <summary>
            Attachs another direction to this existing road.
            
            If necessary, this method will create a junction.
            The caller needs to make sure <code>canAttach(newDir)==true</code>
            </summary>
        </member>
        <member name="M:FreeTrain.World.Road.BaseRoad.CanAttach(FreeTrain.World.Direction)">
            <summary>
            Returns true if a new road with the given direction can be attached.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Road.BaseRoad.Detach(FreeTrain.World.Direction,FreeTrain.World.Direction)">
            <summary>
            Detaches two directions from this RR.
            This method should remove itself or even the parent TrafficVoxel
            if this change would remove the entire road completely.
            Thus the caller shouldn't assume that any reference to this
            object or its parent TrafficVoxel would be valid after the method invocation.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Road.BaseRoad.pattern">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Road.BaseRoad.hasRoad(FreeTrain.World.Direction)">
            <summary>
            Returns true if this road is running toward the given direction.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Road.BaseRoad.DrawBefore(FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            Draws a road. This method is called before the car is drawn.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Road.BaseRoad.drawAfter(FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            Draws a road. This method is called after the car is drawn.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Road.BaseRoad.getStopTimeSpan(FreeTrain.World.Road.Bus,System.Int32)">
            <summary>
            
            </summary>
            <param name="bus"></param>
            <param name="callCount"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Road.BaseRoad.get(FreeTrain.World.Location)">
            <summary>
            Gets the Road object of the specified location, if any.
            Otherwise null.
            </summary>
        </member>
        <member name="T:FreeTrain.World.Road.RoadPattern">
            <summary>
            Road pattern.
            
            This object provides the structure of road network.
            The actual presentation (the outlook) of roads are encapsulated in
            derived classes of <code>Road</code>.
            
            Implemented as a fly-weight pattern.
            
            Because of a mysterious problem in serialization, this object is
            implemented as a value type, but to save the memory most of the data
            is stored statically. .NET often just sucks, and this is one of
            such examples.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Road.RoadPattern.get(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the flat road pattern that has roads to the given directions.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Road.RoadPattern.get(System.Byte)">
            <summary>
            
            </summary>
            <param name="dirs"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Road.RoadPattern.getStraight(FreeTrain.World.Direction)">
            <summary>
            Gets the straight road pattern toward the given direction.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Road.RoadPattern.dirs">
            <summary>
            If the correponding bit is 1, then the pattern has a road to the
            specified direction. (N:1,E:2,W:4,S:8)
            </summary>
        </member>
        <member name="M:FreeTrain.World.Road.RoadPattern.hasRoad(FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Road.RoadPattern.hasRoad(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.Road.MajorRoadType">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Road.MajorRoadType.unknown">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Road.MajorRoadType.footpath">
            <summary>
            
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Road.MajorRoadType.street">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Road.MajorRoadType.highway">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Road.SidewalkType">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Road.SidewalkType.none">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Road.SidewalkType.shoulder">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Road.SidewalkType.pavement">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Road.RoadStyle">
            <summary>
            Road style.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Road.RoadStyle.Type">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Road.RoadStyle.Sidewalk">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Road.RoadStyle.CarLanes">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Road.RoadStyle.#ctor(FreeTrain.World.Road.MajorRoadType,FreeTrain.World.Road.SidewalkType,System.Int32)">
            <summary>
            
            </summary>
            <param name="mt"></param>
            <param name="st"></param>
            <param name="lanes"></param>
        </member>
        <member name="M:FreeTrain.World.Road.RoadStyle.#ctor(FreeTrain.World.Road.MajorRoadType,FreeTrain.World.Road.SidewalkType,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="mt"></param>
            <param name="st"></param>
            <param name="lanes"></param>
            <param name="option"></param>
        </member>
        <member name="M:FreeTrain.World.Road.RoadStyle.ToString">
            <summary>
            
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:FreeTrain.World.Road.RoadStyle.NullStyle">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.RRCrossing">
            <summary>
            Rail-road crossing
            </summary>
        </member>
        <member name="F:FreeTrain.World.RRCrossing.owner">
            <summary> This crossing belongs to this voxel. </summary>
        </member>
        <member name="F:FreeTrain.World.RRCrossing.railDirIndex">
            <summary>
            0 if the rail is going from N to S. 1 if E to W.
            </summary>
        </member>
        <member name="F:FreeTrain.World.RRCrossing.sprites">
            <summary>
            Sprites. Index is [x,y,z] where:
            
            x=0 if rail is going from N to S
            x=1 if rail is going from E to W
            
            y=0 if the sprite is in front of the rail
            y=1 if the sprite is behind the rail
            
            z=state of the Xing
            z=3 for the secondary graphics.
            </summary>
        </member>
        <member name="P:FreeTrain.World.RRCrossing.currentState">
            <summary>
            Gets the current state of this crossing.
            </summary>
        </member>
        <member name="M:FreeTrain.World.RRCrossing.onCarApproaching(FreeTrain.World.TrafficVoxel)">
            <summary>
            Called when a car approaches neighboring traffic voxels.
            </summary>
        </member>
        <member name="T:FreeTrain.World.SparseVoxelArray">
            <summary>
            3D sparse array for <c>Voxel</c>s.
            </summary>
        </member>
        <member name="F:FreeTrain.World.SparseVoxelArray.H">
            <summary>
            Size of the array.
            </summary>
        </member>
        <member name="F:FreeTrain.World.SparseVoxelArray.V">
            <summary>
            Size of the array.
            </summary>
        </member>
        <member name="F:FreeTrain.World.SparseVoxelArray.Z">
            <summary>
            Size of the array.
            </summary>
        </member>
        <member name="M:FreeTrain.World.SparseVoxelArray.cleanUp">
            <summary>
            Release unused indexes.
            </summary>
        </member>
        <member name="T:FreeTrain.World.Structs.Commercial">
            <summary>
            Commercial structure.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.Commercial.#ctor(FreeTrain.Contributions.Structs.CommercialStructureContribution,FreeTrain.World.WorldLocator,System.Boolean)">
            <summary>
            Creates a new commercial structurewith its left-top corner at
            the specified location.
            </summary>
            <param name="_type">
            Type of the structure to be built.
            </param>
            <param name="initiallyOwned"></param>
            <param name="wloc"></param>
        </member>
        <member name="P:FreeTrain.World.Structs.Commercial.isSilentlyReclaimable">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.Commercial.isOwned">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.Commercial.EntityValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.Commercial.structurePrice">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.Commercial.totalLandPrice">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.Commercial.locationClue">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.Commercial.canBeBuilt(FreeTrain.World.Location,FreeTrain.World.Distance,FreeTrain.World.ControlMode)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <param name="sz"></param>
            <param name="cm"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Structs.Commercial.onClick">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:FreeTrain.World.Structs.Commercial.name">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.Commercial.heightCutColor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.Commercial.get(FreeTrain.World.Location)">
            <summary>
            Gets the station object if one is in the specified location.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.Commercial.get(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.Structs.ConstructionSite">
            <summary>
            Construction site.
            
            Construction site is used to provide visual feedback
            before the actual structure is placed.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.ConstructionSite.#ctor(FreeTrain.World.Location,System.EventHandler,FreeTrain.World.Distance)">
            <summary>
            Builds a new construction site.
            </summary>
            <param name="_baseLoc"></param>
            <param name="_completionHandler"></param>
            <param name="size"></param>
        </member>
        <member name="F:FreeTrain.World.Structs.ConstructionSite.completionHandler">
            <summary>
            Handler invoked when the construction finishes.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Structs.ConstructionSite.voxels">
            <summary>
            Voxels
            </summary>
        </member>
        <member name="F:FreeTrain.World.Structs.ConstructionSite.baseLoc">
            <summary>
            Base location of the structure to build.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Structs.ConstructionSite.uncompletedVoxels">
            <summary>
            Number of uncompleted voxels.
            This variables counts down and the construction will be
            completed if it reaches to 0.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.ConstructionSite.onClick">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:FreeTrain.World.Structs.ConstructionSite.name">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.ConstructionSite.isSilentlyReclaimable">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.ConstructionSite.isOwned">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.ConstructionSite.remove">
            <summary>
            
            </summary>
        </member>
        <member name="E:FreeTrain.World.Structs.ConstructionSite.onEntityRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.ConstructionSite.EntityValue">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Structs.ConstructionSite.VoxelImpl">
            <summary>
            Individual voxel
            </summary>
        </member>
        <member name="F:FreeTrain.World.Structs.ConstructionSite.VoxelImpl.connection">
            <summary>
            Connectivity to four adjacent voxels.
            
            True if connected, false if not. Pictures change depending on this.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Structs.ConstructionSite.VoxelImpl.state">
            <summary>
            The current state of the construction.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Structs.ConstructionSite.VoxelImpl.ground">
            <summary>
            If this voxel is the ground level, this variable
            specifies the object used when it's empty.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Structs.ConstructionSite.VoxelImpl.needsDoor">
            <summary>
            True if this ground voxel needs a fence with a door.
            Takes effect only when isGroundLevel==true.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.ConstructionSite.VoxelImpl.getMinFloorState(System.Int32)">
            <summary>
            Gets the min(v.state) for all v in the specified level.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.ConstructionSite.VoxelImpl.getMaxFloorState(System.Int32)">
            <summary>
            Gets the max(v.state) for all v in the specified level.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.ConstructionSite.VoxelImpl.isGroundLevel">
            <summary>
            Returns true if this voxel is at the ground level
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.ConstructionSite.VoxelImpl.below">
            <summary> Construction voxel under this voxel, or null if none. </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.ConstructionSite.VoxelImpl.above">
            <summary> Construction voxel above this voxel, or null if none. </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.ConstructionSite.VoxelImpl.canProceed">
            <summary>
            Returns true if the construction of this voxel can advance one step.
            
            This method is used to make sure that the construction of the entire
            building will proceed with some degree of order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Structs.ConstructionSite.VoxelImpl.drawFence(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point,System.Int32)">
            <summary> Draws a fence </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.ConstructionSite.VoxelImpl.drawGroundObject(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point)">
            <summary> Draws a ground object. </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.ConstructionSite.VoxelImpl.drawBone(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point,System.Int32)">
            <summary> Draws a bone. </summary>
        </member>
        <member name="F:FreeTrain.World.Structs.ConstructionSite.VoxelImpl.fenceSprites">
             <summary>
             Sound-effect of construction.
             </summary>
            private static readonly SoundEffect theSound = null;//new RepeatableSoundEffectImpl(ResourceUtil.loadSystemSound("construction.wav"),5,200);
        </member>
        <member name="F:FreeTrain.World.Structs.ConstructionSite.VoxelImpl.boneConnectivities">
            <summary>
            Describes the connectivity of bones in "constructionBones.bmp"
            
            1:connected, 0:not connected.
            One number consists of four connectivity in the "NESW" format.
            </summary>
        </member>
        <member name="T:FreeTrain.World.Structs.PopulatedStructure">
            <summary>
            Structure that has population.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.PopulatedStructure.#ctor(FreeTrain.Contributions.Common.FixedSizeStructureContribution,FreeTrain.World.WorldLocator)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="wloc"></param>
        </member>
        <member name="F:FreeTrain.World.Structs.PopulatedStructure.stationListener">
            <summary>
            Station to which this structure sends population to.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.PopulatedStructure.QueryInterface(System.Type)">
            <summary>
            
            </summary>
            <param name="aspect"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Structs.PopulatedStructure.remove">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Structs.PThreeDimStructure">
            <summary>
            Pseudo three-dimensional structure.
            
            Sprites are only defined for the ground-level voxels,
            and other higher voxels will be occupied by invisible ones.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.PThreeDimStructure.#ctor(FreeTrain.Contributions.Common.FixedSizeStructureContribution,FreeTrain.World.WorldLocator)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="wloc"></param>
        </member>
        <member name="M:FreeTrain.World.Structs.PThreeDimStructure.CreateVoxel(FreeTrain.World.WorldLocator)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="F:FreeTrain.World.Structs.PThreeDimStructure.type">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Structs.PThreeDimStructure.baseLocation">
            <summary>
            north-west bottom corner of this structure.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.PThreeDimStructure.EntityValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.PThreeDimStructure.cube">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.PThreeDimStructure.heightCutColor">
            <summary>
            Obtains the color that will be used to draw when in the height-cut mode.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.PThreeDimStructure.distanceTo(FreeTrain.World.Location)">
            <summary>
            Gets the distance to this location from the base location of this structure.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.PThreeDimStructure.name">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Structs.PThreeDimStructure.VoxelImpl">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Structs.PThreeDimStructure.VoxelImpl.sprite">
            <summary>
            The sprite to draw, or null if the voxel
            is invisible.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.PThreeDimStructure.VoxelImpl.OnDeserialization(System.Object)">
            <summary>
            
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:FreeTrain.World.Structs.PThreeDimStructure.VoxelImpl.Draw(FreeTrain.World.DrawContext,System.Drawing.Point,System.Int32)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
            <param name="heightCutDiff"></param>
        </member>
        <member name="E:FreeTrain.World.Structs.PThreeDimStructure.onEntityRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.PThreeDimStructure.remove">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.PThreeDimStructure.canBeBuilt(FreeTrain.World.Location,FreeTrain.World.Distance,FreeTrain.World.ControlMode)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <param name="size"></param>
            <param name="cm"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.Structs.StationListenerImpl">
            <summary>
            StationListener implementation that uses
            Population object to calculate population.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Structs.StationListenerImpl.MaxStationCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.StationListenerImpl.#ctor(FreeTrain.Contributions.Population.BasePopulation,FreeTrain.World.Location)">
            <param name="pop">Population pattern</param>
            <param name="loc">The location used to decide if this object
            can subscribe to a given station.</param>
        </member>
        <member name="F:FreeTrain.World.Structs.StationListenerImpl.stations">
            <summary>
            Station to which this structure sends population to.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.StationListenerImpl.OnRemoved">
            <summary>
            Should be called when the owner is removed.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.StationListenerImpl.GetPopulation(FreeTrain.World.Rail.Station)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Structs.StationListenerImpl.advertiseStation(FreeTrain.World.Rail.Station)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Structs.StationListenerImpl.onStationRemoved(FreeTrain.World.Rail.Station)">
            <summary>
            
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:FreeTrain.World.Structs.StationListenerImpl.attachToStation">
            <summary>
            Finds the nearest station and attaches to it.
            </summary>
        </member>
        <member name="T:FreeTrain.World.Structs.Structure">
            <summary>
            Base implementation of the generic "structure"
            that occupies a square-shaped block on the ground.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.Structure.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.Structure.isSilentlyReclaimable">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.Structure.isOwned">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.Structure.remove">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.Structure.EntityValue">
            <summary>
            
            </summary>
        </member>
        <member name="E:FreeTrain.World.Structs.Structure.onEntityRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.Structure.onClick">
            <summary>
            This method is called when one of the voxel is clicked.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.Structure.name">
            <summary>
            Name of the structure.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.Structure.canBeBuilt(FreeTrain.World.Location,FreeTrain.World.Distance,FreeTrain.World.ControlMode)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <param name="sz"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Structs.Structure.isOnTheGround(FreeTrain.World.Location,FreeTrain.World.Distance)">
            <summary>
            Make sure all the relevant voxels are on the ground
            </summary>
            <param name="loc"></param>
            <param name="sz"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Structs.Structure.QueryInterface(System.Type)">
            <summary>
            
            </summary>
            <param name="aspect"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.Structs.Structure.StructureVoxel">
            <summary>
            Individual voxel that a structure occupies.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.Structure.StructureVoxel.#ctor(FreeTrain.World.Structs.Structure,FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="_owner"></param>
            <param name="_loc"></param>
        </member>
        <member name="M:FreeTrain.World.Structs.Structure.StructureVoxel.#ctor(FreeTrain.World.Structs.Structure,FreeTrain.World.WorldLocator)">
            <summary>
            
            </summary>
            <param name="_owner"></param>
            <param name="wloc"></param>
        </member>
        <member name="F:FreeTrain.World.Structs.Structure.StructureVoxel.owner">
            <summary>
            The structure object to which this voxel belongs.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.Structure.StructureVoxel.Entity">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.Structure.StructureVoxel.OnClick">
            <summary>
            onClick event is delegated to the parent.
            </summary>
        </member>
        <member name="T:FreeTrain.World.Structs.VarHeightBuilding">
            <summary>
            Variable height building
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.VarHeightBuilding.#ctor(FreeTrain.Contributions.Structs.VarHeightBuildingContribution,FreeTrain.World.WorldLocator,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="_type"></param>
            <param name="wloc"></param>
            <param name="_height"></param>
            <param name="initiallyOwned"></param>
        </member>
        <member name="F:FreeTrain.World.Structs.VarHeightBuilding.voxels">
            <summary> Voxels that form this structure </summary>
        </member>
        <member name="F:FreeTrain.World.Structs.VarHeightBuilding.heightCutColor">
            <summary>
            Used to draw the structure when the height-cut mode kicks in.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.VarHeightBuilding.onClick">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:FreeTrain.World.Structs.VarHeightBuilding.name">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.VarHeightBuilding.structurePrice">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.VarHeightBuilding.totalLandPrice">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.VarHeightBuilding.locationClue">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.VarHeightBuilding.isSilentlyReclaimable">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.VarHeightBuilding.isOwned">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Structs.VarHeightBuilding.EntityValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.VarHeightBuilding.remove">
            <summary>
            
            </summary>
        </member>
        <member name="E:FreeTrain.World.Structs.VarHeightBuilding.onEntityRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.VarHeightBuilding.QueryInterface(System.Type)">
            <summary>
            
            </summary>
            <param name="aspect"></param>
            <returns></returns>
        </member>
        <member name="F:FreeTrain.World.Structs.VarHeightBuilding.stationListener">
            <summary>
            Station to which this structure sends population to.
            </summary>
        </member>
        <member name="T:FreeTrain.World.Structs.VarHeightBuilding.VoxelImpl">
            <summary>
            StructureVoxel with default drawing mechanism.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.VarHeightBuilding.VoxelImpl.#ctor(FreeTrain.World.Structs.VarHeightBuilding,System.Byte,System.Byte,System.Byte,FreeTrain.World.WorldLocator)">
            <summary>
            
            </summary>
            <param name="_owner"></param>
            <param name="_x"></param>
            <param name="_y"></param>
            <param name="_z"></param>
            <param name="wloc"></param>
        </member>
        <member name="P:FreeTrain.World.Structs.VarHeightBuilding.VoxelImpl.owner">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Structs.VarHeightBuilding.VoxelImpl.x">
            <summary>The offset of the sprite.</summary>
        </member>
        <member name="F:FreeTrain.World.Structs.VarHeightBuilding.VoxelImpl.y">
            <summary>The offset of the sprite.</summary>
        </member>
        <member name="F:FreeTrain.World.Structs.VarHeightBuilding.VoxelImpl.z">
            <summary>The offset of the sprite.</summary>
        </member>
        <member name="M:FreeTrain.World.Structs.VarHeightBuilding.VoxelImpl.Draw(FreeTrain.World.DrawContext,System.Drawing.Point,System.Int32)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
            <param name="heightCutDiff"></param>
        </member>
        <member name="M:FreeTrain.World.Structs.VarHeightBuilding.get(FreeTrain.World.Location)">
            <summary>
            Gets the station object if one is in the specified location.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Structs.VarHeightBuilding.get(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.Subsidiaries.MarketWindow">
            <summary>
            Controller of SubsidiaryMarket.
            
            Uses the event notification to update the list in real time.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Subsidiaries.MarketWindow.companies">
            <summary>
            map from SubsidiaryCompany to ListViewItem.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Subsidiaries.MarketWindow.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Subsidiaries.MarketWindow.market">
            <summary>
            Current market we are looking in.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Subsidiaries.MarketWindow.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:FreeTrain.World.Subsidiaries.MarketWindow.selectedProperty">
            <summary>
            Returns the currently selected company or null if none is selected.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Subsidiaries.MarketWindow.reset">
            <summary>
            Reset the list view.
            </summary>
        </member>
        <member name="T:FreeTrain.World.Subsidiaries.MarketWindow.ListViewItemEx">
            <summary>
            ListViewItem implementation that hooks itself up to the associated
            SubsidiaryCompany.
            
            It will dispose itself when it find that it's no longer in use.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Subsidiaries.Parameters.profit(System.Int64,System.Int64)">
            <summary>
            Compute the profit of the given structure.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Subsidiaries.Parameters.maxProfit(System.Int64)">
            <summary>
            Max profit curve. 
            </summary>
        </member>
        <member name="M:FreeTrain.World.Subsidiaries.Parameters.maxProfitPrime(System.Int64)">
            <summary>
            Derivative of maxProfit
            </summary>
        </member>
        <member name="T:FreeTrain.World.Subsidiaries.SubsidiaryCompany">
            <summary>
            Tradable subsidiary company.
            
            This object is accessible through the queryInterface method.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Subsidiaries.SubsidiaryCompany.price">
            <summary>
            Current market list price.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Subsidiaries.SubsidiaryCompany.owner">
            <summary>Gets the corresponding entity.</summary>
        </member>
        <member name="M:FreeTrain.World.Subsidiaries.SubsidiaryCompany.#ctor(FreeTrain.World.Subsidiaries.ISubsidiaryEntity,System.Boolean)">
            <summary>
            
            </summary>
            <param name="_owner"></param>
            <param name="initiallyOwned"></param>
        </member>
        <member name="P:FreeTrain.World.Subsidiaries.SubsidiaryCompany.isOwned">
            <summary>
            /
            </summary>
        </member>
        <member name="P:FreeTrain.World.Subsidiaries.SubsidiaryCompany.onSale">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Subsidiaries.SubsidiaryCompany.currentMarketPrice">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Subsidiaries.SubsidiaryCompany.profit">
            <summary>
            Profit of this company for the past 1 year.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Subsidiaries.SubsidiaryCompany.cost">
            <summary>
            Operational cost of this company for the past 1 year.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Subsidiaries.SubsidiaryCompany.sales">
            <summary>
            Sales of this company for the past 1 year.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Subsidiaries.SubsidiaryCompany.onPriceChangedV">
            <summary>
            Signals a chane in prices.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Subsidiaries.SubsidiaryCompany.onPriceChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Subsidiaries.SubsidiaryCompany.sell">
            <summary>
            Sells this company. The company must be owned by the player.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Subsidiaries.SubsidiaryCompany.buy">
            <summary>
            Buys this company. The company must not be owned by the player,
            and the company must be listed on <c>SubsidiaryMarket</c>.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Subsidiaries.SubsidiaryCompany.updateCurrentPrice">
            <summary>
            Updates the price of this entity.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Subsidiaries.SubsidiaryCompany.onOwnerRemoved(System.Object,System.EventArgs)">
            <summary>
            Shouldn't be invoked explicitly.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Subsidiaries.SubsidiaryCompany.clockHandler">
            <summary>
            Shouldn't be invoked explicitly.
            </summary>
        </member>
        <member name="T:FreeTrain.World.Subsidiaries.ISubsidiaryEntity">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Subsidiaries.ISubsidiaryEntity.name">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Subsidiaries.ISubsidiaryEntity.structurePrice">
            <summary>
            price of the structure
            </summary>
        </member>
        <member name="P:FreeTrain.World.Subsidiaries.ISubsidiaryEntity.totalLandPrice">
            <summary>
            Sum of the land prices.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Subsidiaries.ISubsidiaryEntity.locationClue">
            <summary>
            Returns the location such that the returned value <code>v</code>
            will satisfy <code>World.world[v].entity==this</code>.
            
            It is desirable for this method to return the location close to the
            center of the entity.
            </summary>
        </member>
        <member name="T:FreeTrain.World.Subsidiaries.SubsidiaryMarketListener">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="company"></param>
        </member>
        <member name="T:FreeTrain.World.Subsidiaries.SubsidiaryMarket">
            <summary>
            A list of <c>SubsidiaryCompany</c>s that are being sold.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Subsidiaries.SubsidiaryMarket.OnDeserialization(System.Object)">
            <summary>
            
            </summary>
            <param name="sender"></param>
        </member>
        <member name="P:FreeTrain.World.Subsidiaries.SubsidiaryMarket.BUY">
            <summary>
            The market for third party companies. The player can buy them.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Subsidiaries.SubsidiaryMarket.SELL">
            <summary>
            The market for companies owned by the player. The player can sell them.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Subsidiaries.SubsidiaryMarket.onSale">
            <summary>
            Set of on-sale companies.
            </summary>
        </member>
        <member name="T:FreeTrain.World.Subsidiaries.SubsidiaryMarket.Events">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Subsidiaries.SubsidiaryMarket.Events.onAdded">
            <summary>
            Fires when a new company enters the market.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Subsidiaries.SubsidiaryMarket.Events.onRemoved">
            <summary>
            Fires when a company leaves the market.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Subsidiaries.SubsidiaryMarket.persistentEvents">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Subsidiaries.SubsidiaryMarket.volatileEvents">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Subsidiaries.SubsidiaryMarket.companiesOnSale">
            <summary>
            Returns the list of companies on sale.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Subsidiaries.SubsidiaryMarket.add(FreeTrain.World.Subsidiaries.SubsidiaryCompany)">
            <summary>
            Shouldn't be called from outside the package.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Subsidiaries.SubsidiaryMarket.remove(FreeTrain.World.Subsidiaries.SubsidiaryCompany)">
            <summary>
            Shouldn't be called from outside the package.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Subsidiaries.SubsidiaryMarket.contains(FreeTrain.World.Subsidiaries.SubsidiaryCompany)">
            <summary>
            Shouldn't be called from outside the package.
            </summary>
        </member>
        <member name="T:FreeTrain.World.Terrain.MountainVoxel">
            <summary>
            Slopes used for mountains and under-waters.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Terrain.MountainVoxel.Transparent">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Terrain.MountainVoxel.#ctor(FreeTrain.World.Location,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <param name="hNE"></param>
            <param name="hSE"></param>
            <param name="hSW"></param>
            <param name="hNW"></param>
        </member>
        <member name="F:FreeTrain.World.Terrain.MountainVoxel.heightData">
            <summary> Height at the four corners. Encoded into 16bits by using 4bits for each. </summary>
        </member>
        <member name="M:FreeTrain.World.Terrain.MountainVoxel.getHeight(FreeTrain.World.Direction)">
            <summary> Obtains the height at the specified corner (0-4). </summary>
        </member>
        <member name="M:FreeTrain.World.Terrain.MountainVoxel.setHeight(FreeTrain.World.Direction,System.Int32)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="h"></param>
        </member>
        <member name="P:FreeTrain.World.Terrain.MountainVoxel.isSaturated">
            <summary>
            If the voxel is completely raised to the point that the ground-level
            needs to be raised, return true.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Terrain.MountainVoxel.isFlattened">
            <summary>
            If the voxel is completely flattened to the point that this
            voxel is no longer necessary.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Terrain.MountainVoxel.getTotalHeight(FreeTrain.World.Location,FreeTrain.World.Direction)">
            <summary>
            Gets 4*height + mountain height.
            
            This method computes the height of the given location in fine scale.
            It returns -1 if the given location is out of the world.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Terrain.MountainVoxel.isCornerMatched(FreeTrain.World.Location,FreeTrain.World.Direction)">
            <summary>
            Return true if the given corner of this mountain voxel is
            matched with three other surrounding voxels.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Terrain.MountainVoxel.Entity">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Terrain.MountainVoxel.isSilentlyReclaimable">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Terrain.MountainVoxel.owned">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Terrain.MountainVoxel.isOwned">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Terrain.MountainVoxel.remove">
            <summary>
            
            </summary>
        </member>
        <member name="E:FreeTrain.World.Terrain.MountainVoxel.onEntityRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Terrain.MountainVoxel.EntityValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Terrain.MountainVoxel.Draw(FreeTrain.World.DrawContext,System.Drawing.Point,System.Int32)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
            <param name="heightCutDiff"></param>
        </member>
        <member name="F:FreeTrain.World.Terrain.MountainVoxel.mountainColors">
            <summary>
            brushes to paint mountains
            </summary>
        </member>
        <member name="F:FreeTrain.World.Terrain.MountainVoxel.waterColors">
            <summary>
            brushes to paint under-waters
            </summary>
        </member>
        <member name="M:FreeTrain.World.Terrain.MountainVoxel.loadColors(System.Xml.XmlElement)">
            <summary>
            Loads color palette from XML.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Terrain.MountainVoxel.nX">
            <summary>
            Lighting vector.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Terrain.MountainVoxel.nY">
            <summary>
            Lighting vector.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Terrain.MountainVoxel.nZ">
            <summary>
            Lighting vector.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Terrain.MountainVoxel.selectColor">
            <summary>
            Returns the brush to draw this voxel.
            </summary>
        </member>
        <member name="M:FreeTrain.World.Terrain.MountainVoxel.fromHSV(System.Int32,System.Int32,System.Int32)">
            <summary> Parses (H,S,V) into a color object. </summary>
            <param name="H">[0,240)</param>
            <param name="S">[0,240)</param>
            <param name="V">[0,240)</param>
        </member>
        <member name="M:FreeTrain.World.Terrain.MountainVoxel.get(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Terrain.MountainVoxel.setTrees(FreeTrain.Framework.Graphics.ISprite,FreeTrain.Framework.Graphics.ISprite[],System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="ground"></param>
            <param name="trees"></param>
            <param name="indices"></param>
            <param name="price"></param>
        </member>
        <member name="M:FreeTrain.World.Terrain.MountainVoxel.removeTrees">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Terrain.MountainVoxel.GetColorOfTile">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Terrain.MountainVoxel.initCliffSprites">
            <summary> Load sprites for cliffs. </summary>
        </member>
        <member name="F:FreeTrain.World.Terrain.MountainVoxel.images">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Terrain.MountainVoxel.flippedImages">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.Time">
            <summary>
            Time instant.
            </summary>
        </member>
        <member name="F:FreeTrain.World.Time.currentTime">
            <summary>
            Current time in minutes from 01/01/01 00:00am
            </summary>
        </member>
        <member name="F:FreeTrain.World.Time.MINUTE_INITIAL">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Time.HOUR_INITIAL">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Time.DAY_INITIAL">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Time.YEAR_INITIAL">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Time.START_TIME">
            <summary>
            
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Time.displayString">
            <summary> Returns a string formatter for the display. </summary>
        </member>
        <member name="F:FreeTrain.World.Time.daysOfMonth">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Time.totalMinutes">
            <summary>
            Total minutes from the start of the game.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Time.year">
            <summary>
            the current year. from 1.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Time.month">
            <summary>
            the current month. from 1.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Time.day">
            <summary>
            the current day of the month. from 1.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Time.dayOfWeek">
            <summary>
            the current day of the week. from 0 to 6.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Time.hour">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Time.minutes">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Time.dayOrNight">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Time.season">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Time.isWeekend">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Time.daysOfWeek">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Time.op_Subtraction(FreeTrain.World.Time,FreeTrain.World.Time)">
            <summary>
            
            </summary>
            <param name="ta"></param>
            <param name="tb"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Time.op_Addition(FreeTrain.World.Time,FreeTrain.World.TimeLength)">
            <summary>
            
            </summary>
            <param name="ta"></param>
            <param name="tb"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.TimeLength">
            <summary>
            Span of time
            </summary>
        </member>
        <member name="M:FreeTrain.World.TimeLength.fromMinutes(System.Int64)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.TimeLength.fromHours(System.Int64)">
            <summary>
            
            </summary>
            <param name="hours"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.TimeLength.fromDays(System.Int64)">
            <summary>
            
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.TimeLength.random(FreeTrain.World.TimeLength,FreeTrain.World.TimeLength)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.TimeLength.untilTomorrow">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:FreeTrain.World.TimeLength.ZERO">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.TimeLength.ONEDAY">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.TimeLength.totalMinutes">
            <summary>
            Time span in minutes.
            </summary>
        </member>
        <member name="P:FreeTrain.World.TimeLength.isPositive">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.TimeLength.op_Addition(FreeTrain.World.TimeLength,FreeTrain.World.TimeLength)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.TrafficVoxelHandler">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="T:FreeTrain.World.TrafficVoxel">
            <summary>
            線路や道路などによって占有されているブロック
            </summary>
            TrafficOccupantには線路・道路・および車（電車もしくは自動車）が入れる
        </member>
        <member name="P:FreeTrain.World.TrafficVoxel.Transparent">
            <summary>
            
            </summary>
        </member>
        <member name="E:FreeTrain.World.TrafficVoxel.onCarChanged">
            <summary>
            Fired when a car enters/leaves this traffic voxel
            </summary>
        </member>
        <member name="E:FreeTrain.World.TrafficVoxel.onRailRoadChanged">
            <summary>
            Fired when a railroad is placed or removed.
            </summary>
        </member>
        <member name="T:FreeTrain.World.TrafficVoxel.IAccessory">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.TrafficVoxel.IAccessory.DrawBefore(FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.World.TrafficVoxel.IAccessory.DrawAfter(FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.World.TrafficVoxel.IAccessory.OnRemoved">
            <summary>
            Called right after the accessory is removed.
            </summary>
        </member>
        <member name="P:FreeTrain.World.TrafficVoxel.car">
            <summary>
            Car that occupies this voxel, if any, or null.
            </summary>
        </member>
        <member name="P:FreeTrain.World.TrafficVoxel.railRoad">
            <summary>
            Railroad that occupies this voxel, or null otherwise.
            </summary>
        </member>
        <member name="P:FreeTrain.World.TrafficVoxel.road">
            <summary>
            Road that occupies this voxel, or null otherwise.
            </summary>
        </member>
        <member name="P:FreeTrain.World.TrafficVoxel.accessory">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.TrafficVoxel.isOccupied">
            <summary>
            Returns true if a car is already in this voxel.
            </summary>
        </member>
        <member name="M:FreeTrain.World.TrafficVoxel.QueryInterface(System.Type)">
            <summary>
            
            </summary>
            <param name="aspect"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.TrafficVoxel.OnClick">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.TrafficVoxel.shouldHaveCrossing">
            <summary>
            Check if this voxel should have a rail road crossing.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FreeTrain.World.TrafficVoxel.Entity">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.TrafficVoxel.isSilentlyReclaimable">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.TrafficVoxel.isOwned">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.TrafficVoxel.EntityValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.TrafficVoxel.remove">
            <summary>
            
            </summary>
        </member>
        <member name="E:FreeTrain.World.TrafficVoxel.onEntityRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.TrafficVoxel.Draw(FreeTrain.World.DrawContext,System.Drawing.Point,System.Int32)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
            <param name="heightCutDiff"></param>
        </member>
        <member name="M:FreeTrain.World.TrafficVoxel.GetColorOfTile">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.TrafficVoxel.getOrCreate(FreeTrain.World.Location)">
            <summary>
            Gets the existing TrafficVoxel in the specified location,
            or create new TrafficVoxel if the location is unoccupied.
            </summary>
            <returns>null if the specified location is already occupied</returns>
        </member>
        <member name="M:FreeTrain.World.TrafficVoxel.getOrCreate(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.TrafficVoxel.get(FreeTrain.World.Location)">
            <summary>
            Gets a TrafficVoxel in the specified location, if any.
            Otherwise null.
            </summary>
        </member>
        <member name="M:FreeTrain.World.TrafficVoxel.get(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.Voxel">
            <summary>
            A block in the game world.
            
            The voxel is the unit of the game world. The game world consists of a cube of
            voxels, and this is the base class of such voxels.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Voxel.Location">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.Voxel.showFence">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Voxel.ShowFence">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.Voxel.Transparent">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.Voxel.Draw(FreeTrain.World.DrawContext,System.Drawing.Point,System.Int32)">
            <summary>
            Draws this voxel
            </summary>
            <param name="heightCutDiff">
            heightCut - Z.
            0 if this voxel is located to the "edge" of the height cut.
            negative value if the view is not in the height cut mode.
            positive values if this voxel is located below the cut height
            (the value will be the difference between the height of
            this voxel and the cut height.)
            </param>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.World.Voxel.DrawVoxel(FreeTrain.World.DrawContext,System.Drawing.Point,System.Int32)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
            <param name="heightCutDiff"></param>
        </member>
        <member name="M:FreeTrain.World.Voxel.GetColorOfTile">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Voxel.SetFence(FreeTrain.World.Direction,FreeTrain.World.IFence)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="f"></param>
        </member>
        <member name="M:FreeTrain.World.Voxel.GetFence(FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.Voxel.DrawFrontFence(FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.World.Voxel.DrawBehindFence(FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.World.Voxel.OnClick">
            <summary>
            Processes a mouse click.
            </summary>
            <returns>true if a mouse click event is "consumed"</returns>
        </member>
        <member name="M:FreeTrain.World.Voxel.QueryInterface(System.Type)">
            <summary>
            Query this voxel to return some "aspect" of it.
            
            Aspect is usually a tear-off interface that allows
            voxels to be extended through compositions.
            
            The queryInterface method of voxels should delegate to
            the queryInterface method of entities.
            </summary>
            <returns>null if the given aspect is not supported.</returns>
        </member>
        <member name="M:FreeTrain.World.Voxel.OnRemoved">
            <summary>
            Calls immediately after the voxel is removed from the world.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Voxel.LandPrice">
            <summary>
            Short-cut to call the getLandPrice method of the World class.
            </summary>
        </member>
        <member name="P:FreeTrain.World.Voxel.Entity">
            <summary>
            Obtains a reference to the entity that includes this voxel.
            </summary>
        </member>
        <member name="T:FreeTrain.World.AbstractVoxelImpl">
            <summary>
            Partial implementation for most of the voxel.
            </summary>
        </member>
        <member name="F:FreeTrain.World.AbstractVoxelImpl.fence">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.AbstractVoxelImpl.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:FreeTrain.World.AbstractVoxelImpl.#ctor(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc"></param>
        </member>
        <member name="M:FreeTrain.World.AbstractVoxelImpl.#ctor(FreeTrain.World.WorldLocator)">
            <summary>
            
            </summary>
            <param name="wloc"></param>
        </member>
        <member name="P:FreeTrain.World.AbstractVoxelImpl.Location">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.AbstractVoxelImpl.DrawFrontFence(FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.World.AbstractVoxelImpl.DrawBehindFence(FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.World.AbstractVoxelImpl.SetFence(FreeTrain.World.Direction,FreeTrain.World.IFence)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="f"></param>
        </member>
        <member name="M:FreeTrain.World.AbstractVoxelImpl.GetFence(FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.AbstractVoxelImpl.GetColorOfTile">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.IHoleVoxel">
            <summary>
            Voxel can additionally implement this interface to
            control the painting of the ground surface.
            
            The drawing routine queries this interface for voxels
            that are directly above and below the surface.
            </summary>
        </member>
        <member name="M:FreeTrain.World.IHoleVoxel.DrawGround(System.Boolean)">
            <summary>
            Returns false to prevent the ground surface to be drawn.
            </summary>
            <param name="above">
            True if the callee is located directly above the ground,
            false if directly below the ground.
            </param>
        </member>
        <member name="T:FreeTrain.World.IFence">
            <summary>
            The interface called when the fence should be drawn.
            </summary>
        </member>
        <member name="M:FreeTrain.World.IFence.DrawFence(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point,FreeTrain.World.Direction)">
            <summary>
            called when the fehce should be drawn.
            </summary>
            <param name="d">one of the 4 directions (N,E,W,S)</param>
            <param name="pt"></param>
            <param name="surface"></param>
        </member>
        <member name="P:FreeTrain.World.IFence.FenceId">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.ControlMode">
            <summary>
            世界の操作権限定義
            god = 神：無制限
            player = プレイヤー鉄道会社
            com = コンピュータ（ライバル会社、行政）
            </summary>
        </member>
        <member name="F:FreeTrain.World.ControlMode.God">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.ControlMode.Player">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.ControlMode.Com">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.WorldDefinition">
            <summary>
            ゲームデータのルート
            </summary>
        </member>
        <member name="F:FreeTrain.World.WorldDefinition.world">
            <summary>
            現在ゲーム中の世界
            </summary>
        </member>
        <member name="P:FreeTrain.World.WorldDefinition.World">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.WorldDefinition.satellite">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.WorldDefinition.Satellite">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.WorldDefinition.size">
            <summary>
            世界の大きさ (H,V,D)
            </summary>
        </member>
        <member name="P:FreeTrain.World.WorldDefinition.Size">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.WorldDefinition.developmentAlgorithm">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.WorldDefinition.DevelopmentAlgorithm">
            <summary>
            
            </summary>
        </member>
        <member name="E:FreeTrain.World.WorldDefinition.onNewWorld">
            <summary>
            Fired after a new world is loaded/created.
            </summary>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.#ctor(FreeTrain.World.Distance,System.Int32,System.Boolean)">
            <summary>
            空の世界を作成
            </summary>
            <param name="sz">世界の大きさ (H,V,D)</param>
            <param name="tempolary"></param>
            <param name="waterLevel"></param>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.#ctor(FreeTrain.World.Distance,System.Int32)">
            <summary>
            
            </summary>
            <param name="sz"></param>
            <param name="waterLevel"></param>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.CreatePreviewWorld(System.Drawing.Size,FreeTrain.World.Distance)">
            <summary>
            
            </summary>
            <param name="minsizePixel"></param>
            <param name="struct_size"></param>
            <returns></returns>
        </member>
        <member name="F:FreeTrain.World.WorldDefinition.name">
            <summary>ゲームの名前</summary>
        </member>
        <member name="P:FreeTrain.World.WorldDefinition.Name">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.WorldDefinition.clock">
            <summary>Clock object that controls the time of this world.</summary>
        </member>
        <member name="P:FreeTrain.World.WorldDefinition.Clock">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.WorldDefinition.voxels">
            <summary> Voxels in this World indexed by its position. </summary>
        </member>
        <member name="F:FreeTrain.World.WorldDefinition.groundLevels">
            <summary>
            Ground levels. If the value is n, then voxel of the height n-1 would be
            underground.
            </summary>
        </member>
        <member name="F:FreeTrain.World.WorldDefinition.waterLevel">
            <summary>
            Water level. Voxels whose z axis is smaller than this 
            is considered as under-water.
            </summary>
        </member>
        <member name="P:FreeTrain.World.WorldDefinition.WaterLevel">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.WorldDefinition.account">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.WorldDefinition.Account">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.WorldDefinition.landValue">
            <summary>
            Responsible for computing/maintaining land values for this world.
            </summary>
        </member>
        <member name="P:FreeTrain.World.WorldDefinition.LandValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.WorldDefinition.viewOptions">
            <summary>
            Other objects associated to this world.
            </summary>
        </member>
        <member name="P:FreeTrain.World.WorldDefinition.ViewOptions">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.World.WorldDefinition.otherObjects">
            <summary>
            Other objects associated to this world.
            </summary>
        </member>
        <member name="P:FreeTrain.World.WorldDefinition.OtherObjects">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.toHV(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="h"></param>
            <param name="v"></param>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.toHV(FreeTrain.World.Location,System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <param name="h"></param>
            <param name="v"></param>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.fromXYZToAB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts the (X,Y,Z) coordinates to the (A,B) coordinates.
            
            This method returns the top-left corner of the specified location.
            </summary>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.fromXYZToAB(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.GetBoundingBox(FreeTrain.World.Location)">
            <summary>
            Compute the box in (A,B) coordinates that contains
            the given voxel.
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.GetBoundingBox(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.IsOutsideWorld(FreeTrain.World.Cube)">
            <summary>
            
            </summary>
            <param name="cube"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.IsInsideWorld(FreeTrain.World.Cube)">
            <summary>
            
            </summary>
            <param name="cube"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.RealSize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.IsInsideWorld(FreeTrain.World.Location)">
            <summary>
            Returns true only when the given location is inside the world.
            </summary>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.IsOutsideWorld(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.IsBorderOfWorld(FreeTrain.World.Location)">
            <summary>
            Returns true if the given location is outside the visible region.
            </summary>
        </member>
        <member name="P:FreeTrain.World.WorldDefinition.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            指定された位置にあるVoxelを取得
            </summary>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.SetWorld(FreeTrain.World.WorldDefinition)">
            <summary>
            
            </summary>
            <param name="w"></param>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.GetEntityAt(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.GetGroundLevel(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.GetGroundLevel(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.getGroundLevelFromHV(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="h"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.raiseGround(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc"></param>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.raiseGround(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.lowerGround(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc"></param>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.lowerGround(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.isReusable(FreeTrain.World.Location)">
            <summary>
            Returns true if this voxel can be silently re-claimed.
            Voxels unused or land voxels are reusable.
            </summary>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.isReusable(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.World.WorldDefinition.OutOfWorldVoxel">
            <summary>
            Used as the invisible wall that fills world outside the world
            </summary>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.OutOfWorldVoxel.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.OutOfWorldVoxel.#ctor(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc"></param>
        </member>
        <member name="P:FreeTrain.World.WorldDefinition.OutOfWorldVoxel.Location">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.WorldDefinition.OutOfWorldVoxel.Entity">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.WorldDefinition.OutOfWorldVoxel.isSilentlyReclaimable">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.WorldDefinition.OutOfWorldVoxel.isOwned">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.OutOfWorldVoxel.remove">
            <summary>
            
            </summary>
        </member>
        <member name="E:FreeTrain.World.WorldDefinition.OutOfWorldVoxel.onEntityRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.World.WorldDefinition.OutOfWorldVoxel.EntityValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.OutOfWorldVoxel.Draw(FreeTrain.World.DrawContext,System.Drawing.Point,System.Int32)">
            <summary>
            
            </summary>
            <param name="dc"></param>
            <param name="pt"></param>
            <param name="heightCutDiff"></param>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.OutOfWorldVoxel.DrawFrontFence(FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.OutOfWorldVoxel.DrawBehindFence(FreeTrain.World.DrawContext,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="display"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.OutOfWorldVoxel.SetFence(FreeTrain.World.Direction,FreeTrain.World.IFence)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="f"></param>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.OutOfWorldVoxel.GetFence(FreeTrain.World.Direction)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.OutOfWorldVoxel.GetColorOfTile">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.toXYZ(System.Int32,System.Int32,System.Int32)">
            <summary>
            Translates (h,v,d) co-ordinates into (x,y,z).
            </summary>
            <param name="h"></param>
            <param name="v"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.remove(FreeTrain.World.Location)">
            <summary>
            Removes a voxel in the specified location.
            </summary>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.remove(FreeTrain.World.Voxel)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.remove(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="P:FreeTrain.World.WorldDefinition.Item(FreeTrain.World.Location)">
            <summary>
            指定された位置にあるVoxelを取得
            </summary>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.voxelHVD(System.Int32,System.Int32,System.Int32)">
            <summary>
            HVD単位系でのVoxelを取得
            </summary>
        </member>
        <member name="F:FreeTrain.World.WorldDefinition.voxelOutlookListeners">
            <summary> Fired when a voxel needs to be redrawn.</summary>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.fireOnVoxelChanged(FreeTrain.World.Location)">
            <summary>
            地価計算のためにRoadクラスのコンストラクタから呼べるように用意した。(477)
            </summary>
            <param name="loc"></param>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.OnVoxelUpdated(FreeTrain.World.Location)">
            <summary>
            Notifies the voxel outlook listener, if there is any.
            </summary>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.OnVoxelUpdated(FreeTrain.World.Voxel)">
            <summary>
            
            </summary>
            <param name="voxel"></param>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.OnAllVoxelUpdated">
            <summary>
            Notifies all the voxel outlook listeners at once.
            </summary>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.OnVoxelUpdated(FreeTrain.World.Cube)">
            <summary>
            Notifies all the cubic voxels within the given cube
            are updated.
            </summary>
        </member>
        <member name="E:FreeTrain.World.WorldDefinition.onVoxelChanged">
            <summary> Fired when a voxel is added/removed.</summary>
        </member>
        <member name="F:FreeTrain.World.WorldDefinition.rootTrainGroup">
            <summary> Root train group that holds all the trains in its descendants. </summary>
        </member>
        <member name="P:FreeTrain.World.WorldDefinition.RootTrainGroup">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.WorldDefinition.TrainControllerCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.TrainControllerCollection.add(FreeTrain.World.Rail.TrainController)">
            <summary>
            
            </summary>
            <param name="tc"></param>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.TrainControllerCollection.remove(FreeTrain.World.Rail.TrainController)">
            <summary>
            /
            </summary>
            <param name="tc"></param>
        </member>
        <member name="F:FreeTrain.World.WorldDefinition.trainControllers">
            <summary> All TrainControllers that exist in the World.</summary>
        </member>
        <member name="P:FreeTrain.World.WorldDefinition.TrainControllers">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.World.WorldDefinition.StationCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.StationCollection.add(FreeTrain.World.Rail.Station)">
            <summary>
            
            </summary>
            <param name="st"></param>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.StationCollection.remove(FreeTrain.World.Rail.Station)">
            <summary>
            
            </summary>
            <param name="st"></param>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.StationCollection.get(System.Int32)">
            <summary>
            
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="F:FreeTrain.World.WorldDefinition.stations">
            <summary> All stations that exist in this orld. </summary>
        </member>
        <member name="P:FreeTrain.World.WorldDefinition.Stations">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.OnDeserialization(System.Object)">
            <summary>
            
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.load(System.Runtime.Serialization.IFormatter,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.World.WorldDefinition.save(System.Runtime.Serialization.IFormatter,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="stream"></param>
        </member>
        <member name="T:FreeTrain.World.VoxelChangeListener">
            <summary>
            Receives notification of a voxel addition/removal.
            </summary>
        </member>
        <member name="T:FreeTrain.Framework.AboutDialog">
            <summary>
            AboutDialog
            </summary>
            <summary>
            AboutDialog
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.AboutDialog.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.AboutDialog.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:FreeTrain.Framework.AboutDialog.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:FreeTrain.Framework.BGMManager">
            <summary>
            Manages the selection and control of BGM
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.BGMManager.bgm">
            <summary> BGM player. </summary>
        </member>
        <member name="M:FreeTrain.Framework.BGMManager.#ctor">
            <summary> Reference to the "music" menu item. </summary>
        </member>
        <member name="F:FreeTrain.Framework.BGMManager.currentPlaylist">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.BGMManager.addSong(System.String)">
            <summary>
            
            </summary>
            <param name="songname"></param>
        </member>
        <member name="M:FreeTrain.Framework.BGMManager.moveUp(System.String)">
            <summary>
            
            </summary>
            <param name="songname"></param>
        </member>
        <member name="M:FreeTrain.Framework.BGMManager.moveDown(System.String)">
            <summary>
            
            </summary>
            <param name="songname"></param>
        </member>
        <member name="M:FreeTrain.Framework.BGMManager.removeSong(System.String)">
            <summary>
            
            </summary>
            <param name="songname"></param>
        </member>
        <member name="M:FreeTrain.Framework.BGMManager.nextSong">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.BGMManager.previousSong">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.BGMManager.currentBGM">
            <summary>
            Sets or gets the current BGM.
            Set null for silence.
            </summary>
        </member>
        <member name="T:FreeTrain.Framework.BGMManager.TempBGMContribution">
            <summary>
            Temporary BGM contribution created from a music in a file system.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.BGMManager.TempBGMContribution.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:FreeTrain.Framework.BGMPlaylist">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.BGMPlaylist.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.BGMPlaylist.playNextTrack">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.BGMPlaylist.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.BGMPlaylist.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:FreeTrain.Framework.BGMPlaylist.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:FreeTrain.Framework.ConfigDialog">
            <summary>
            ConfigDialog の概要の説明です。
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.ConfigDialog.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.ConfigDialog.#ctor(FreeTrain.Framework.GlobalOptions)">
            <summary>
            
            </summary>
            <param name="opts"></param>
        </member>
        <member name="M:FreeTrain.Framework.ConfigDialog.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:FreeTrain.Framework.ConfigDialog.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.NightSurfaceLoader">
            <summary>
            Surface Loader that builds a night image in an automatic way.
            This surface loader uses another surface loader to load the surface,
            then change the picture on the surface.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.NightSurfaceLoader.nightSurface">
            <summary>
            Base surface loader.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.NightSurfaceLoader.FileName">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.NightSurfaceLoader.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.NightSurfaceLoader.Load(FreeTrain.Framework.Graphics.Surface@)">
            <summary>
            
            </summary>
            <param name="surface"></param>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.BitmapSurfaceLoader">
            <summary>
            Loads a surface from a bitmap
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.BitmapSurfaceLoader.fileName">
            <summary> File name of the bitmap. </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.BitmapSurfaceLoader.DaySurface">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.BitmapSurfaceLoader.FileName">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.BitmapSurfaceLoader.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.BitmapSurfaceLoader.Load(FreeTrain.Framework.Graphics.Surface@)">
            <summary>
            
            </summary>
            <param name="surface"></param>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.ISprite">
            <summary>
            A sprite object that can draw itself to other surfaces.
            
            Note that this structure doesn't handle resource management
            of the surface object it uses.
            
            Sprites are serializable
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.ISprite.Draw(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.ISprite.DrawShape(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="pt"></param>
            <param name="color"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.ISprite.DrawAlpha(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="pt"></param>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.ISprite.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.ISprite.Offset">
            <summary>
            
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.ISprite.HitTest(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.ISurfaceLoader">
            <summary>
            Function object that can load a picture into the given surface.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.ISurfaceLoader.Load(FreeTrain.Framework.Graphics.Surface@)">
            <summary>
            Fill the surface by the image and return the mask color.
            If the surface is null, the callee needs to allocate a new surface
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.ISurfaceLoader.FileName">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.AlphaBlendSpriteSet">
            <summary>
            Builds a set of sprites for alpha-blending blit
            from a set of ordinary sprites.
            
            This object keeps a reference to DirectDraw surfaces,
            so it needs to be disposed.
            
            The crux is that we need to avoid the overlap of sprites.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.AlphaBlendSpriteSet.surfaces">
            <summary>
            DirectDraw surface.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.AlphaBlendSpriteSet.sprites">
            <summary>
            Sprites built for alpha-blending.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.AlphaBlendSpriteSet.size">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.AlphaBlendSpriteSet.#ctor(FreeTrain.Framework.Graphics.ISprite[0:,0:,0:])">
            <summary>
            
            </summary>
            <param name="src"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.AlphaBlendSpriteSet.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.AlphaBlendSpriteSet.getSprite(FreeTrain.World.Distance)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.ColorMap">
            <summary>
            Determines the color mapping between daylight time and night time.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.ColorMap.getNightColor(System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.ColorMappedSprite">
            <summary>
            Draw an image in the picture with color-mapping.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.ColorMappedSprite.srcColors">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.ColorMappedSprite.dstColors">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.ColorMappedSprite.#ctor(FreeTrain.Framework.Graphics.Picture,System.Drawing.Point,System.Drawing.Point,System.Drawing.Size,System.Drawing.Color[],System.Drawing.Color[])">
            <summary>
            
            </summary>
            <param name="_pic"></param>
            <param name="_offset"></param>
            <param name="_origin"></param>
            <param name="_size"></param>
            <param name="srcColors"></param>
            <param name="dstColors"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.ColorMappedSprite.Draw(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="pt"></param>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.ColorMappedSpriteFactory">
            <summary>
            SpriteFactory for ColorMappedSprite.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.ColorMappedSpriteFactory.#ctor(System.Xml.XmlElement)">
            <summary>
            Load a color map from the XML manifest of the format:
            	&lt;map from="100,200, 50" to="50,30,20" />
            	&lt;map from="  0, 10,100" to="..." />
            	...
            </summary>
            <param name="e">
            The parent of &lt;map> elements.
            </param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.ColorMappedSpriteFactory.#ctor(System.Drawing.Color[],System.Drawing.Color[])">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.ColorMappedSpriteFactory.CreateSprite(FreeTrain.Framework.Graphics.Picture,System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)">
            <summary>
            
            </summary>
            <param name="picture"></param>
            <param name="offset"></param>
            <param name="origin"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.ColorMappedSpriteFactoryContributionImpl">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.ColorMappedSpriteFactoryContributionImpl.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.ColorMappedSpriteFactoryContributionImpl.CreateSpriteFactory(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.DefaultSpriteLoaderContributionImpl">
            <summary>
            DefaultSpriteLoaderContributionImpl の概要の説明です。
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.DefaultSpriteLoaderContributionImpl.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.DefaultSpriteLoaderContributionImpl.load0D(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="sprite"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.DefaultSpriteLoaderContributionImpl.load2D(System.Xml.XmlElement,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="sprite"></param>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.DefaultSpriteLoaderContributionImpl.load3D(System.Xml.XmlElement,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="sprite"></param>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="Z"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.DirectSprite">
            <summary>
            Sprite that directly draws from a surface.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.DirectSprite.#ctor(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)">
            <summary>
            
            </summary>
            <param name="_surface"></param>
            <param name="_offset"></param>
            <param name="_origin"></param>
            <param name="_size"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.DirectSprite.#ctor(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="_surface"></param>
            <param name="_offset"></param>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.DirectSprite.surface">
            <summary>
            Surface that contains the image.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.DirectSprite.Surface">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.DirectSprite.offset">
            <summary>
            The point in the image that will be aligned to
            the left-top corner of a voxel.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.DirectSprite.Offset">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.DirectSprite.Origin">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.DirectSprite.Size">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.DirectSprite.Draw(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.DirectSprite.DrawShape(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point,System.Drawing.Color)">
            <summary>
            Draws the shape of this sprite in the specified color.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.DirectSprite.DrawAlpha(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.DirectSprite.HitTest(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.DirtyRect">
            <summary>
            Maintain a set of dirty rects.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.DirtyRect.isEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.DirtyRect.rect">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.DirtyRect.add(System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.DirtyRect.add(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.DirtyRect.add(System.Drawing.Point,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.DirtyRect.clear">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.GraphicsException">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.GraphicsException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <param name="nested"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.GraphicsException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.HueTransformSprite">
            <summary>
            Draw an image in the picture with transforming colors by keying a hue.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.HueTransformSprite.targetColors">
            <summary>
            Source colors are transformed into a color series of this.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.HueTransformSprite.#ctor(FreeTrain.Framework.Graphics.Picture,System.Drawing.Point,System.Drawing.Point,System.Drawing.Size,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="_pic"></param>
            <param name="_offset"></param>
            <param name="_origin"></param>
            <param name="_size"></param>
            <param name="R_target"></param>
            <param name="G_target"></param>
            <param name="B_target"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.HueTransformSprite.Draw(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="pt"></param>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.HueTransformSprite.RedTarget">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.HueTransformSprite.GreenTarget">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.HueTransformSprite.BlueTarget">
            <summary>
            
            
            </summary>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.HueTransformSpriteFactory">
            <summary>
            SpriteFactory for HueTransformSprite.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.HueTransformSpriteFactory.targetColors">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.HueTransformSpriteFactory.#ctor(System.Xml.XmlElement)">
            <summary>
            Load the setting from a XML manifest of the format:
            	&lt;map from="100,200,*" to="50,30,20" />
            </summary>
            <param name="e">
            The parent of a &lt;map> element.
            </param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.HueTransformSpriteFactory.#ctor(System.Drawing.Color,FreeTrain.Framework.Graphics.ColorMask,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="_key"></param>
            <param name="_mask"></param>
            <param name="_target"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.HueTransformSpriteFactory.CreateSprite(FreeTrain.Framework.Graphics.Picture,System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)">
            <summary>
            
            </summary>
            <param name="picture"></param>
            <param name="offset"></param>
            <param name="origin"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.HueTransformSpriteFactory.RedTarget">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.HueTransformSpriteFactory.GreenTarget">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.HueTransformSpriteFactory.BlueTarget">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.HueTransformSpriteFactoryContributionImpl">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.HueTransformSpriteFactoryContributionImpl.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.HueTransformSpriteFactoryContributionImpl.CreateSpriteFactory(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.NullSprite">
            <summary>
            Sprite that draws nothing.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.NullSprite.theInstance">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.NullSprite.Draw(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.NullSprite.DrawShape(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="pt"></param>
            <param name="color"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.NullSprite.DrawAlpha(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="pt"></param>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.NullSprite.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.NullSprite.Offset">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.NullSprite.HitTest(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.NullSprite.GetRealObject(System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="ctxt"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.Picture">
            <summary>
            Wraps DirectDraw surface
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.Picture.id">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.Picture._surface">
            <summary>
            DirectDraw surface.
            null when the surface is detached.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.Picture.loaders">
            <summary>
            capable of restoring surface images.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.Picture.dirty">
            <summary>
            Dirty flag. Set true to reload the surface.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Picture.#ctor(System.String,FreeTrain.Framework.Graphics.ISurfaceLoader[0:,0:])">
            <summary>
            
            </summary>
            <param name="_id"></param>
            <param name="_loaders"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Picture.#ctor(System.String,System.String)">
            <summary>
            Create a picture from a single bitmap and id.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Picture.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="_id"></param>
            <param name="dayfileName"></param>
            <param name="nightfileName"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Picture.#ctor(System.Xml.XmlElement)">
            <summary>
            Load picture from an XML manifest (&lt;picture> element)
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Picture.#ctor(System.Xml.XmlElement,System.String)">
            <summary>
            
            </summary>
            <param name="pic"></param>
            <param name="_id"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Picture.init(FreeTrain.Framework.Graphics.ISurfaceLoader[0:,0:])">
            <summary>
            Complete picture loaders by filling in the missing loaders.
            </summary>
            <param name="specifiedLoaders"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Picture.setDirty">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Picture.release">
            <summary>
            Release any resource acquired by this picture.
            The picture will be automatically reloaded next time
            the picture is used.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.Picture.surface">
            <summary>
            Obtains the surface object.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Picture.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.PictureManager">
            <summary>
            Repository of pictures.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.PictureManager.onSurfaceLost">
            <summary>
            Event fired when a DirectDraw surface is found to be lost.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.PictureManager.dic">
            <summary>
            Dictionary of id->Picture
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.PictureManager.get(System.String)">
            <summary>
            Get the picture with a given id, or throw an exception.
            </summary>
            <returns>
              Always return a non-null valid object.
            </returns>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.PictureManager.contains(System.String)">
            <summary>
            Checks if a picture of the specified ID is already registered.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.PictureManager.add(FreeTrain.Framework.Graphics.Picture)">
            <summary>
            Add a new picture.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.PictureManager.reset">
            <summary>
            Called by Clock at sunrise and sunset.
            
            invalidates all the surfaces so that they will be reloaded.
            Since this is a static method, it cannot be registered as an ordinary clock handler.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.PictureManager._onSurfaceLost(System.Object,System.EventArgs)">
            <summary>
            Called when DirectDraw surfaces are lost. This method releases the pictures.
            </summary>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.PreviewDrawer">
            <summary>
            Utility class that draws a preview image programatically.
            
            This helper class it typically useful to prepare an image
            for a controller dialog box.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.PreviewDrawer.surface">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.PreviewDrawer.Surface">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.PreviewDrawer.pixelSize">
            <summary>
            pixelSize of the canvas.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.PreviewDrawer.ptOrigin">
            <summary>
            The point in the surface of (X,Y)=(0,0).
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.PreviewDrawer.#ctor(System.Drawing.Size,FreeTrain.World.Distance)">
            <summary>
            
            </summary>
            <param name="pixelSize"></param>
            <param name="size"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.PreviewDrawer.#ctor(System.Drawing.Size,System.Drawing.Size,System.Int32)">
            <summary>
            Creates an empty canvas with the given pixel size.
            </summary>
            <param name="pixelSize">Pixel size of the canvas</param>
            <param name="objSize">
            	Chip size of the object that we'd like to draw.
            	All the successive method calls will use this size as offset.
            </param>
            <param name="height"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.PreviewDrawer.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.PreviewDrawer.Clear">
            <summary> Clears the canvas by tiling empty chips. </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.PreviewDrawer.GetPoint(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="offsetX"></param>
            <param name="offsetY"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.PreviewDrawer.GetPoint(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="offsetX"></param>
            <param name="offsetY"></param>
            <param name="offsetZ"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.PreviewDrawer.Draw(FreeTrain.Framework.Graphics.ISprite,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="sprite"></param>
            <param name="offsetX"></param>
            <param name="offsetY"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.PreviewDrawer.DrawCenter(FreeTrain.Framework.Graphics.ISprite[0:,0:])">
            <summary>
            
            </summary>
            <param name="sprites"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.PreviewDrawer.Draw(FreeTrain.Framework.Graphics.ISprite[0:,0:],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="sprites"></param>
            <param name="offsetX"></param>
            <param name="offsetY"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.PreviewDrawer.Draw(FreeTrain.Framework.Graphics.ISprite[0:,0:],System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="sprites"></param>
            <param name="offsetX"></param>
            <param name="offsetY"></param>
            <param name="offsetZ"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.PreviewDrawer.DrawCenter(FreeTrain.Framework.Graphics.ISprite[0:,0:,0:])">
            <summary>
            
            </summary>
            <param name="sprites"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.PreviewDrawer.Draw(FreeTrain.Framework.Graphics.ISprite[0:,0:,0:],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="sprites"></param>
            <param name="offsetX"></param>
            <param name="offsetY"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.PreviewDrawer.Draw(FreeTrain.Framework.Graphics.ISprite[0:,0:,0:],System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="sprites"></param>
            <param name="offsetX"></param>
            <param name="offsetY"></param>
            <param name="offsetZ"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.PreviewDrawer.CreateBitmap">
            <summary>
            Makes the bitmap of the current picture.
            
            The caller needs to dispose the bitmap.
            </summary>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.SimpleSprite">
            <summary>
            Draw an image in the picture as-is.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.SimpleSprite.#ctor(FreeTrain.Framework.Graphics.Picture,System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)">
            <summary>
            
            </summary>
            <param name="_picture"></param>
            <param name="_offset"></param>
            <param name="_origin"></param>
            <param name="_size"></param>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.SimpleSprite.picture">
            <summary>
            Surface that contains the image.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.SimpleSprite.Picture">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.SimpleSprite.origin">
            <summary>
            The area of the image to be drawn.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.SimpleSprite.Origin">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.SimpleSprite.Draw(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.SimpleSprite.DrawShape(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point,System.Drawing.Color)">
            <summary>
            Draws the shape of this sprite in the specified color.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.SimpleSprite.DrawAlpha(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="pt"></param>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.SimpleSprite.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.SimpleSprite.Offset">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.SimpleSprite.HitTest(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.SimpleSpriteFactory">
            <summary>
            SpriteFactory for SimpleSprite.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.SimpleSpriteFactory.CreateSprite(FreeTrain.Framework.Graphics.Picture,System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)">
            <summary>
            
            </summary>
            <param name="picture"></param>
            <param name="offset"></param>
            <param name="origin"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.SimpleSpriteFactoryContributionImpl">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.SimpleSpriteFactoryContributionImpl.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.SimpleSpriteFactoryContributionImpl.CreateSpriteFactory(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.SpriteFactory">
            <summary>
            Create a sprite from a picture.
            
            SpriteFactory encapsulates the logic to instanciate sprite implementations.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.SpriteFactory.CreateSprite(FreeTrain.Framework.Graphics.Picture,System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)">
            <summary>
            
            </summary>
            <param name="picture"></param>
            <param name="offset"></param>
            <param name="origin"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.SpriteFactory.GetSpriteFactory(System.Xml.XmlNode)">
            <summary>
            Locate the SpriteFactory that should be used to load sprites.
            </summary>
            <param name="sprite">&lt;sprite> element in the manifest.</param>
            <returns>non-null valid object.</returns>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.SpriteFactoryContribution">
            <summary>
            Let SpriteFactories to be contributed.
            
            SpriteFactoryContribution assigns a name to SpriteFactory,
            and also allows SpriteFactory to be confiugred by parameters.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.SpriteFactoryContribution.CreateSpriteFactory(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.SpriteFactoryContribution.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.SpriteLoaderContribution">
            <summary>
            SpriteLoaderContribution encapsulates the details of how a set of sprites
            are produced from a Picture.
            
            This is a contribution so it can be implemented by plug-ins.
            
            This class has many methods but one doesn't need
            to implement all of them.
            throw NotImplementedException in case of any error.
            
            This default implementation just implements all the methods
            by returning an error.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.SpriteLoaderContribution.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.SpriteLoaderContribution.load0D(System.Xml.XmlElement)">
            <summary>
            Load a single sprite from the given manifest.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.SpriteLoaderContribution.load1D(System.Xml.XmlElement,System.Int32)">
            <summary>
            Load a set of sprites of size (x) from the given manifest.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.SpriteLoaderContribution.load2D(System.Xml.XmlElement,System.Int32,System.Int32,System.Int32)">
            <summary>
            Load a set of sprites of size (x,y) from the given manifest.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.SpriteLoaderContribution.load2D(System.Xml.XmlElement,System.Drawing.Size,System.Int32)">
            <summary>
            
            </summary>
            <param name="sprite"></param>
            <param name="sz"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.SpriteLoaderContribution.load3D(System.Xml.XmlElement,System.Int32,System.Int32,System.Int32)">
            <summary>
            Load a set of sprites of size (x,y,z) from the given manifest.
            </summary>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.ColorMask">
            <summary>
            Color mask.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.ColorMask.R">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.ColorMask.G">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.ColorMask.B">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Framework.Graphics.Surface">
            <summary>
            Wraps DirectDraw surface object.
            
            This is the core object of DirectDraw.
            The code is a wrapper around Visual BASIC binding of DirectDraw.
            
            Since I couldn't figure out how to create a CLR binding for
            clipper, this class implements a clipping support by itself.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.Surface.surfacePtrs">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.Surface.SurfacePtrs">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.Surface.mask">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.Surface.Mask">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Graphics.Surface.surface">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.Surface.Size">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="w"></param>
            <param name="h"></param>
            <param name="newbpp"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.#ctor(System.Int32,System.Int32,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="w"></param>
            <param name="h"></param>
            <param name="pf"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.SurfacePtr">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.ResetClipRect">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.Surface.ClipRect">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.Blit(System.Drawing.Point,FreeTrain.Framework.Graphics.Surface,System.Drawing.Point,System.Drawing.Size)">
            <summary>
            
            </summary>
            <param name="dstPos"></param>
            <param name="source"></param>
            <param name="srcPos"></param>
            <param name="sz"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.Blit(System.Drawing.Point,FreeTrain.Framework.Graphics.Surface)">
            <summary>
            
            </summary>
            <param name="dstPos"></param>
            <param name="source"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.SetAlpha(System.Byte)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.BlitAlpha(System.Drawing.Point,FreeTrain.Framework.Graphics.Surface,System.Drawing.Point,System.Drawing.Size)">
            <summary>
            
            </summary>
            <param name="dstPos"></param>
            <param name="source"></param>
            <param name="srcPos"></param>
            <param name="sz"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.BlitShape(System.Drawing.Point,FreeTrain.Framework.Graphics.Surface,System.Drawing.Point,System.Drawing.Size,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="dstPos"></param>
            <param name="source"></param>
            <param name="srcPos"></param>
            <param name="sz"></param>
            <param name="fill"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.GetPixel(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.GetPixel(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="surf"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.GetIntPixel(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="surf"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.GetIntPixel(Tao.Sdl.Sdl.SDL_Surface,Tao.Sdl.Sdl.SDL_PixelFormat,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="pf"></param>
            <param name="surf"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.CreateFlippedVerticalSurface">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.BlitColorTransform(System.Drawing.Point,FreeTrain.Framework.Graphics.Surface,System.Drawing.Point,System.Drawing.Size,System.Drawing.Color[],System.Drawing.Color[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="dstPos"></param>
            <param name="source"></param>
            <param name="srcPos"></param>
            <param name="sz"></param>
            <param name="_srcColors"></param>
            <param name="_dstColors"></param>
            <param name="vflip"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.ReColor(System.Drawing.Color[],System.Drawing.Color[])">
            <summary>
            
            </summary>
            <param name="_srcColors"></param>
            <param name="_dstColors"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.BlitHueTransform(System.Drawing.Point,FreeTrain.Framework.Graphics.Surface,System.Drawing.Point,System.Drawing.Size,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="dstPos"></param>
            <param name="source"></param>
            <param name="srcPos"></param>
            <param name="sz"></param>
            <param name="R_dest"></param>
            <param name="G_dest"></param>
            <param name="B_dest"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.SetPixel(System.Drawing.Point,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="col"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="col"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.BuildNightImage">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.Fill(System.Drawing.Color)">
            <summary>
            Fills the surface.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.Fill(System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="rect"></param>
            <param name="c"></param>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.Surface.SourceColorKey">
            <summary>
            Source color key. A mask color that will not be copied to other plains.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.HitTest(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.GetColor(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
            <param name="surf"></param>
            <param name="colorValue"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.DrawBox(System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.DrawBox(System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="r"></param>
            <param name="c"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.FillPolygon(System.Drawing.Color,System.Drawing.Point[])">
            <summary>
            
            </summary>
            <param name="col"></param>
            <param name="pts"></param>
        </member>
        <member name="M:FreeTrain.Framework.Graphics.Surface.DrawLines(System.Drawing.Color,System.Drawing.Point[])">
            <summary>
            
            </summary>
            <param name="col"></param>
            <param name="pts"></param>
        </member>
        <member name="P:FreeTrain.Framework.Graphics.Surface.Bitmap">
            <summary>
            Makes the bitmap of this surface.
            The caller needs to dispose the bitmap.
            </summary>
        </member>
        <member name="T:FreeTrain.Framework.Plugin.SilentPluginErrorHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.SilentPluginErrorHandler.OnNameDuplicated(FreeTrain.Framework.Plugin.PluginDefinition,FreeTrain.Framework.Plugin.PluginDefinition,System.Exception)">
            <summary>
            
            </summary>
            <param name="p_1st"></param>
            <param name="p_2nd"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.SilentPluginErrorHandler.OnPluginLoadError(FreeTrain.Framework.Plugin.PluginDefinition,System.Exception)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.SilentPluginErrorHandler.OnContributionInitError(FreeTrain.Framework.Plugin.Contribution,System.Exception)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.SilentPluginErrorHandler.OnContribIDDuplicated(FreeTrain.Framework.Plugin.Contribution,FreeTrain.Framework.Plugin.Contribution,System.Exception)">
            <summary>
            
            </summary>
            <param name="c_1st"></param>
            <param name="c_2nd"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.SilentPluginErrorHandler.OnFinal(System.Collections.IDictionary,System.Int32)">
            <summary>
            
            </summary>
            <param name="errorPlugins"></param>
            <param name="totalErrorCount"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Framework.Plugin.IPluginErrorHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.IPluginErrorHandler.OnNameDuplicated(FreeTrain.Framework.Plugin.PluginDefinition,FreeTrain.Framework.Plugin.PluginDefinition,System.Exception)">
            <summary>
            
            </summary>
            <param name="p_1st"></param>
            <param name="p_2nd"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.IPluginErrorHandler.OnPluginLoadError(FreeTrain.Framework.Plugin.PluginDefinition,System.Exception)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.IPluginErrorHandler.OnContributionInitError(FreeTrain.Framework.Plugin.Contribution,System.Exception)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.IPluginErrorHandler.OnContribIDDuplicated(FreeTrain.Framework.Plugin.Contribution,FreeTrain.Framework.Plugin.Contribution,System.Exception)">
            <summary>
            
            </summary>
            <param name="c_1st"></param>
            <param name="c_2nd"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.IPluginErrorHandler.OnFinal(System.Collections.IDictionary,System.Int32)">
            <summary>
            
            </summary>
            <param name="errorPlugins"></param>
            <param name="totalErrorCount"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Framework.Plugin.IContributionFactory">
            <summary>
            Responsible for loading a contribution from an XML element.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.IContributionFactory.Load(FreeTrain.Framework.Plugin.PluginDefinition,System.Xml.XmlElement)">
            <summary>
            Loads a contribution from an XML Element "e",
            which belongs to the plugin "owner".
            
            In case of an error, this method must throw an exception
            instead of silently returning null.
            </summary>
        </member>
        <member name="T:FreeTrain.Framework.Plugin.Graphics.ColorLibrary">
            <summary>
            ColorLibrary の概要の説明です。
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Plugin.Graphics.ColorLibrary.null_id">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Plugin.Graphics.ColorLibrary.list">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.Graphics.ColorLibrary.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.Graphics.ColorLibrary.NullLibrary">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.Graphics.ColorLibrary.size">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.Graphics.ColorLibrary.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.Graphics.ColorLibrary.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Framework.Plugin.Contribution">
            <summary>
            Common base class of contributions.
            
            A contribution is a functionality provided by a plug-in.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.Contribution.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="contrib"></param>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.Contribution.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="_type"></param>
            <param name="_id"></param>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.Contribution.init(FreeTrain.Framework.Plugin.PluginDefinition,System.Uri)">
            <summary>
            This method is a backdoor to configure a contribution.
            
            We could just pass this argument through a constructor,
            but Contribution will be inherited multiple times, so it would be
            little awkward to pass a lot of parameters around.
            </summary>
            <param name="_parent"></param>
            <param name="_baseUri"></param>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.Contribution.OnInitComplete">
            <summary>
            Notifies the end of the initialization.
            
            This method is called after all the contributions are loaded
            into memory. This is a good chance to run additional tasks
            that need to access other contributions.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Plugin.Contribution.type">
            <summary>
            Type of this contribution.
            This is the value of the type attribute.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.Contribution.Type">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Plugin.Contribution.id">
            <summary>
            Unique ID of this contribution.
            
            Either GUID or URI, but can be anything as long
            as it's unique.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.Contribution.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.Contribution.BaseUri">
            <summary>
            Base URI for this contribution (which is the same
            as the base URI for the plug-in.)
            
            This poinst to the plug-in directory.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.Contribution.Parent">
            <summary>
            Returns the Plugin object that contains this contribution.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.Contribution.Assembly">
            <summary>
            If a plug-in is implemented by using an assembly,
            it should override property and return the Assembly
            object, so that obejcts from this assembly can be
            de-serialized.
            
            Returns null if this contribution doesn't rely on
            any assembly.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.Contribution.LoadPicture(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.Contribution.GetPicture(System.Xml.XmlElement)">
            <summary>
            Locate the Picture from which sprites should be loaded.
            </summary>
            <param name="sprite">&lt;sprite> element in the manifest.</param>
            <returns>non-null valid object.</returns>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.Contribution.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.Contribution.ReferenceImpl.GetRealObject(System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Framework.Plugin.DynamicContributionFactory">
            <summary>
            Loads a Contribution class by using a &lt;class> element
            in the contribution Xml definition.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.DynamicContributionFactory.#ctor(System.Type)">
            <param name="baseType">
            Type of the contribution to be loaded.
            Loaded class is judged invalid unless it is a subtype
            of this type.
            </param>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.DynamicContributionFactory.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.DynamicContributionFactory.Load(FreeTrain.Framework.Plugin.PluginDefinition,System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="owner"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Framework.Plugin.FixedClassContributionFactory">
            <summary>
            Loads a Contribution from a designated class by passing the XmlElement
            to its constructor
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.FixedClassContributionFactory.#ctor(System.Type)">
            <param name="concreteType">
            Type of the class to be used to load the class.
            </param>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.FixedClassContributionFactory.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructor for the use in plugin.xml
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.FixedClassContributionFactory.Load(FreeTrain.Framework.Plugin.PluginDefinition,System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="owner"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Framework.Plugin.PluginDefinition">
            <summary>
            Represents a loaded plug-in
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.PluginDefinition.title">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.PluginDefinition.author">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.PluginDefinition.homepage">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Plugin.PluginDefinition.dirName">
            <summary>
            Base directory of this plug-in
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.PluginDefinition.name">
            <summary>
            Name of the plug-in
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Plugin.PluginDefinition.contributions">
            <summary>
            All the contributions in this plug-in
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Plugin.PluginDefinition.doc">
            <summary>
            Contents of plugin.xml
            Available only during the initialization phase.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.PluginDefinition.Document">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginDefinition.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Stub instance to show information on parse error.
            </summary>
            <param name="dirname"></param>
            <param name="title"></param>
            <param name="homepage"></param>
            <param name="author"></param>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginDefinition.#ctor(System.String)">
            <summary>
            Loads a plug-in from manifest XML "plugin.xml".
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginDefinition.loadContributionFactories">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginDefinition.getDependencies">
            <summary>
            Get all the dependent plug-ins.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginDefinition.loadManifest(System.String)">
            <summary>
            Loads plugin.xml file from the directory.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginDefinition.loadFailSafe(System.String)">
            <summary>
            Loads plugin.xml file as plain text.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginDefinition.loadContributions">
            <summary>
            Loads contributions from this plug-in
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginDefinition.loadStream(System.String)">
            <summary>
            Loads a stream from the plug-in directory.
            </summary>
        </member>
        <member name="T:FreeTrain.Framework.Plugin.PluginListDialog">
            <summary>
            PluginListDialog
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginListDialog.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginListDialog.Dispose(System.Boolean)">
            <summary>
            使用されているリソースに後処理を実行します。
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginListDialog.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:FreeTrain.Framework.Plugin.PluginManager">
            <summary>
            Loads plug-ins.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Plugin.PluginManager.plugins">
            <summary>
            All loaded plug-ins.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.PluginManager.Plugins">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Plugin.PluginManager.pluginMap">
            <summary>
            Plugins keyed by their names.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Plugin.PluginManager.contributionFactories">
            <summary>
            Contribution factories that are used to load contributions.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Plugin.PluginManager.contributionMap">
            <summary>
            Contributions keyed by their IDs.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginManager.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginManager.Init(System.Collections.ICollection,FreeTrain.Framework.ProgressHandler,FreeTrain.Framework.Plugin.IPluginErrorHandler)">
            <summary>
            This method should be called after the object is created.
            </summary>
            <param name="dirs">
            collection of strings (directory names)
            for each directory in this collection, its sub-directories
            are scanned for plugin.xml
            </param>
            <param name="errorHandler"></param>
            <param name="progressHandler"></param>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginManager.GetDefaultPluginDirectory">
            <summary>
            Gets the default plug-in directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginManager.AddContributionFactory(System.String,FreeTrain.Framework.Plugin.IContributionFactory)">
            <summary>
            Registers a <c>ContributionFactory</c>.
            This method has to be called before the initialization.
            Normally, this method is called by <c>Plugin</c> but the caller
            can invoke this method before calling the init method.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginManager.GetContributionFactory(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginManager.GetEnumerator">
            <summary>
            Enumerates all plug-in objects.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.PluginManager.Stations">
            <summary>
            Gets all the station contributions.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Plugin.PluginManager.stationGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.PluginManager.StationGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.PluginManager.SpecialRails">
            <summary>
            Gets all the special rail contributions.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.PluginManager.RailStationaryStructures">
            <summary>
            Gets all the rail stationary contributions
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Plugin.PluginManager.railStationaryGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.PluginManager.RailStationaryGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.PluginManager.CommercialStructures">
            <summary>
            Gets all the commercial structure contributions.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Plugin.PluginManager.commercialStructureGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.PluginManager.CommercialStructureGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.PluginManager.SpecialStructures">
            <summary>
            Gets all the special structure contributions.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.PluginManager.Roads">
            <summary>
            Gets all the road contributions.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.PluginManager.Bgms">
            <summary>
            Gets all the BGM contributions.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.PluginManager.Menus">
            <summary>
            Gets all the menu item contributions.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.PluginManager.Trains">
            <summary>
            Gets all the train contributions.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.PluginManager.TrainControllers">
            <summary>
            Gets all the train controller contributions.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.PluginManager.VarHeightBuildings">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Plugin.PluginManager.varHeightBuildingsGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.PluginManager.LandBuilders">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Plugin.PluginManager.landBuilderGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.PluginManager.LandBuilderGroup">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginManager.ListContributions(System.Type)">
            <summary>
            Lists up contributions of the given type.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.PluginManager.PublicContributions">
            <summary>
            Gets all contributions. except for runtime generated ones.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Plugin.PluginManager.AllContributions">
            <summary>
            Gets all contributions including runtime generat.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginManager.AddContribution(FreeTrain.Framework.Plugin.Contribution)">
            <summary>
            
            </summary>
            <param name="contrib"></param>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginManager.GetContribution(System.String)">
            <summary>
            Gets the contribution with a given ID, or null if not found.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginManager.GetPlugin(System.String)">
            <summary>
            Get the plug-in of the specified name, or null if not found.
            </summary>
        </member>
        <member name="T:FreeTrain.Framework.Plugin.PluginSerializationBinder">
            <summary>
            Allows objects from plug-ins to be de-serialized.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="assemblyName"></param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Framework.Plugin.PluginUtil">
            <summary>
            Utility code
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginUtil.parseColor(System.String)">
            <summary>
            Parse a color from a string of the form "100,53,26"
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginUtil.loadObjectFromManifest(System.Xml.XmlElement)">
            <summary>
            Load a new object by reading a type from the manifest XML element.
            The "codeBase" attribute and the "name" attribute of
            a class element are used to determine the class to be loaded.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginUtil.loadTypeFromManifest(System.Xml.XmlElement)">
            <summary>
            Load a type from the name attribute and the codebase attribute .
            </summary>
            <param name="e">Typically a "class" element</param>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.PluginUtil.getSpriteLoader(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="sprite"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Framework.Plugin.XmlUtil">
            <summary>
            Utility methods to help parsing XML documents.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.XmlUtil.SelectSingleNode(System.Xml.XmlNode,System.String)">
            <summary>
            Performs a node selection and throws an exception if it's not found.
            </summary>
            <exception cref="T:System.Xml.XmlException"></exception>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.XmlUtil.Resolve(System.Xml.XmlNode,System.String)">
            <summary>
            Resolves a relative URI.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.XmlUtil.ParsePoint(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.Plugin.XmlUtil.ParseSize(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Framework.Splash">
            <summary>
            Splash screen that reports the progress of initialization.
            </summary>
            <summary>
            Splash screen that reports the progress of initialization.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Splash.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="F:FreeTrain.Framework.Splash.status">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Splash.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Splash.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Splash.UpdateMessage(System.String,System.Single)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <param name="progress"></param>
        </member>
        <member name="T:FreeTrain.Framework.Core">
            <summary>
            Entry point to other static instances in the FreeTrain framework.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Core.InstallationDirectory">
            <summary>
            Installation directory of the FreeTrain framework.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Core.options">
            <summary> Global options. </summary>
        </member>
        <member name="P:FreeTrain.Framework.Core.Options">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Core.IsConstructionMode">
            <summary> Game mode </summary>
        </member>
        <member name="P:FreeTrain.Framework.Core.BgmManager">
            <summary>
            Handles BGM playback.
            Should be instanciated by attaching the main window.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Core.SoundEffectManager">
            <summary>
            Handles SFX.
            Should be instanciated by attaching the main window.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Core.Init(System.String[],System.Windows.Forms.Control,System.Windows.Forms.MenuItem,FreeTrain.Framework.ProgressHandler,System.Boolean)">
            <summary>
            Initializes the framework.
            Should be called once and only once.
            </summary>
            <param name="owner">application's main window.</param>
            <param name="bgmMenuItem">"BGM" sub-menu</param>
            <param name="progressHandler">
            <param name="args"></param>
            <param name="constructionMode"></param>
            Receives initializtion progress report. Can be null.
            </param>
        </member>
        <member name="M:FreeTrain.Framework.Core.parseProfile(System.String)">
            <summary>
            Determines the plug-ins to be used from a profile.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Core.getDefaultProfile">
            <summary>
            Determines the default set of plug-ins. Used when no profile is specified.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Framework.ProgressHandler">
            <summary>
            Function that receives a progress in initialization.
            </summary>
        </member>
        <member name="T:FreeTrain.Framework.DefaultPluginErrorHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.DefaultPluginErrorHandler.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="errMax"></param>
        </member>
        <member name="M:FreeTrain.Framework.DefaultPluginErrorHandler.OnNameDuplicated(FreeTrain.Framework.Plugin.PluginDefinition,FreeTrain.Framework.Plugin.PluginDefinition,System.Exception)">
            <summary>
            
            </summary>
            <param name="p_1st"></param>
            <param name="p_2nd"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.DefaultPluginErrorHandler.OnPluginLoadError(FreeTrain.Framework.Plugin.PluginDefinition,System.Exception)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.DefaultPluginErrorHandler.OnContributionInitError(FreeTrain.Framework.Plugin.Contribution,System.Exception)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.DefaultPluginErrorHandler.OnContribIDDuplicated(FreeTrain.Framework.Plugin.Contribution,FreeTrain.Framework.Plugin.Contribution,System.Exception)">
            <summary>
            
            </summary>
            <param name="c_1st"></param>
            <param name="c_2nd"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.DefaultPluginErrorHandler.OnFinal(System.Collections.IDictionary,System.Int32)">
            <summary>
            
            </summary>
            <param name="errorPlugins"></param>
            <param name="totalErrorCount"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Framework.ErrorMessageBox">
            <summary>
            Shows an exception to the user
            (and ask for the forgiveness :-)
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.ErrorMessageBox.ShowDialog(System.Windows.Forms.IWin32Window,System.String,System.Exception)">
            <summary>
            Displays a dialog box and returns after the dialog is closed.
            </summary>
            <param name="owner">can be null.</param>
            <param name="caption"></param>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Framework.ErrorMessageBox.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:FreeTrain.Framework.ExternToolsHelper">
            <summary>
            SilentInitializer の概要の説明です。
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.ExternToolsHelper.InitializePlugins(System.String[],FreeTrain.Framework.ProgressHandler,FreeTrain.Framework.Plugin.IPluginErrorHandler)">
            <summary>
            
            </summary>
            <param name="plugindirs"></param>
            <param name="progressHandler"></param>
            <param name="errorHandler"></param>
        </member>
        <member name="M:FreeTrain.Framework.ExternToolsHelper.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Framework.GlobalOptions">
            <summary>
            Global Configuration.
            
            This is an application-wide configuration, which will be used across
            all the games.
            
            Use freetrain.framework.Core.options to access the instance.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.GlobalOptions.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.GlobalOptions.showErrorMessageBox">
            <summary>
            If true, show a message box for errors.
            If false, show a message into the status bar.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.GlobalOptions.devParams">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.GlobalOptions.messageDisplayTime">
            <summary>
            Length of the time (in seconds) 
            while a message is displayed.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.GlobalOptions.enableSoundEffect">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.GlobalOptions.drawBoundingBox">
            <summary>
            Debug option to draw the bounding box
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.GlobalOptions.drawStationNames">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.GlobalOptions._hideTrees">
            <summary>
            If false, draw trees.
            If true, speed up drawing by ignore drawing trees.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.GlobalOptions.hideTrees">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.GlobalOptions.load">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:FreeTrain.Framework.GlobalOptions.Stem">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Framework.MainWindow">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.MainWindow.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.MainWindow.mainWindow">
            <summary> Reference to the single instance of the main window. </summary>
        </member>
        <member name="P:FreeTrain.Framework.MainWindow.CurrentController">
            <summary>
            Currently activated controller, if any. Or null.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.MainWindow.AttachController(FreeTrain.Controllers.IModalController)">
            <summary>
            Activates a new ModalController.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.MainWindow.DetachController">
            <summary>
            Deactivates the current ModalController, if any.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.MainWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.MainWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:FreeTrain.Framework.MainWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.MainWindow.statusStrip">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.MainWindow.toolStripStatusLabel">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Framework.NewWorldDialog">
            <summary>
            Let the user create a new world.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.NewWorldDialog.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.NewWorldDialog.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:FreeTrain.Framework.NewWorldDialog.createWorld">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Framework.PersistentOptions">
            <summary>
            Base implementation for persistent configuration information
            via XML serialization.
            
            Derived class should add actual data members. See GlobalOptions for example.
            It should also override the load method.
            
            For some reason, the derived class needs to be public.
            
            To load a persistent configuration, do
            <code>new DerivedClass().load()</code>.
            An instance of the derived class is necessary because it determined where and
            how an XML file is loaded.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.PersistentOptions.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.PersistentOptions.Stem">
            <summary>
            Compute the stem of the file name to be used.
            Default implementation should be fine for the most cases.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.PersistentOptions.save">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.PersistentOptions.saveTo(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:FreeTrain.Framework.PersistentOptions.load">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.PersistentOptions.loadFrom(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Framework.ResourceUtil">
            <summary>
            Simplified resource manager.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.ResourceUtil.FindSystemResource(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.ResourceUtil.LoadSystemBitmap(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.ResourceUtil.LoadSystemSound(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.ResourceUtil.LoadSound(System.Uri)">
            <summary>
            
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.ResourceUtil.LoadSystemPicture(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.ResourceUtil.LoadSystemPicture(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dayName"></param>
            <param name="nightName"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Framework.ResourceUtil.LoadTimeIndependentSystemSurface(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="F:FreeTrain.Framework.ResourceUtil.emptyChips">
            <summary>
            DirectDraw instance for loading surface objects.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.ResourceUtil.EmptyChip">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.ResourceUtil.GetGroundChip(FreeTrain.World.WorldDefinition)">
            <summary>
            
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="F:FreeTrain.Framework.ResourceUtil.removerChip">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.ResourceUtil.RemoverChip">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.ResourceUtil.underWaterChip">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.ResourceUtil.UnderWaterChip">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.ResourceUtil.underGroundChip">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.ResourceUtil.UnderGroundChip">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Framework.Sound.RepeatableSoundEffectImpl">
            <summary>
            SoundEffect object that handles multiple
            simultaneous requests in a smart way.
            
            A sound that a train moves for example doesn't simply
            play five sounds simultaneously when five trains are moving.
            Instead, it plays just two sounds but with a short interval.
            
            This implementation handles this kind of behavior.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Sound.RepeatableSoundEffectImpl.#ctor(SdlDotNet.Audio.Sound,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="seg">Sound-effect object</param>
            <param name="concurrentPlaybackMax">Number of maximum concurrent playback.</param>
            <param name="intervalTime">Interval between two successive playbacks</param>
        </member>
        <member name="M:FreeTrain.Framework.Sound.RepeatableSoundEffectImpl.#ctor(SdlDotNet.Audio.Sound)">
            <summary>
            
            </summary>
            <param name="seg"></param>
        </member>
        <member name="F:FreeTrain.Framework.Sound.RepeatableSoundEffectImpl.concurrentPlaybackMax">
            <summary>
            Don't schedule more than this number of concurrent playback.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Sound.RepeatableSoundEffectImpl.queue">
            <summary>
            Number of scheduled playbacks.
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Sound.RepeatableSoundEffectImpl.play(FreeTrain.World.Location)">
            <summary> Count the number of simltaneously played sound. </summary>
        </member>
        <member name="T:FreeTrain.Framework.Sound.ISoundEffect">
            <summary>
            Sound Effect
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Sound.ISoundEffect.play(FreeTrain.World.Location)">
            <summary>
            Requests to play this sound effect, which is conceptually
            generated from the specified location.
            
            The location may or may not be used to determine whether
            a sound should be actually played.
            
            A sound effect may or may not be played immediately.
            For example, a sound effect can accumulate requests
            and play it later.
            </summary>
        </member>
        <member name="T:FreeTrain.Framework.Sound.SoundEffectManager">
            <summary>
            Coordinates sound effects.
            </summary>
        </member>
        <member name="P:FreeTrain.Framework.Sound.SoundEffectManager.IsAvailable">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Framework.Sound.SoundEffectManager.#ctor(System.Windows.Forms.IWin32Window)">
            <summary>
            A new instance should be created only by the MainWindowMDI class.
            </summary>
        </member>
        <member name="F:FreeTrain.Framework.Sound.SoundEffectManager.sounds">
            <summary>
            Plays a wav file in a synchronous way.
            
            This method is slow compared to SoundEffect object, but 
            it is less resource intensive. Useful for one time sound effect
            that can take time.
            </summary>
            
        </member>
        <member name="M:FreeTrain.Framework.Sound.SoundEffectManager.PlaySynchronousSound(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:FreeTrain.Framework.Sound.SoundEffectManager.PlayAsynchronousSound(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="T:FreeTrain.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CLOCK_FORMAT">
            <summary>
              Looks up a localized string similar to Year {0} Month {1} Day {2} ({3}) {4,2:d}:{5,1:d}0.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONSTRUCTION_CANNOT_BUILD">
            <summary>
              Looks up a localized string similar to Can&apos;t build object!.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONSTRUCTION_CANNOT_PLACE">
            <summary>
              Looks up a localized string similar to Can&apos;t place this object!.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONSTRUCTION_CANNOT_REMOVE">
            <summary>
              Looks up a localized string similar to Unable to remove object!.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_BUILD_BUTTON">
            <summary>
              Looks up a localized string similar to Build.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_COST_LABEL">
            <summary>
              Looks up a localized string similar to Cost:.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_EXIT_BUTTON">
            <summary>
              Looks up a localized string similar to EXIT.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_PLACE_BUTTON">
            <summary>
              Looks up a localized string similar to Place.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_RAIL_INITIAL_MESSAGE">
            <summary>
              Looks up a localized string similar to Click two points on the map to place tracks.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_RAIL_OBSTACLES">
            <summary>
              Looks up a localized string similar to There are obstacles in the way.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_RAIL_START_POINT">
            <summary>
              Looks up a localized string similar to Select starting point.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_RAIL_TITLE">
            <summary>
              Looks up a localized string similar to RAILROAD.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_REMOVE_BUTTON">
            <summary>
              Looks up a localized string similar to Remove.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_STATION_COLOUR">
            <summary>
              Looks up a localized string similar to Colour:.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_STATION_CONSTRUCTION">
            <summary>
              Looks up a localized string similar to Station construction.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_STATION_COST">
            <summary>
              Looks up a localized string similar to Cost.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_STATION_DESIGN">
            <summary>
              Looks up a localized string similar to Design.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_STATION_DIRECTION">
            <summary>
              Looks up a localized string similar to Direction:.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_STATION_LENGTH">
            <summary>
              Looks up a localized string similar to &amp;Length:.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_STATION_MAINTENANCE">
            <summary>
              Looks up a localized string similar to Maintenance.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_STATION_MATERIALCONTROLLER_STATION_MATERIAL">
            <summary>
              Looks up a localized string similar to Material.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_STATION_NAME">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_STATION_PAGE">
            <summary>
              Looks up a localized string similar to Station.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_STATION_PLATFORM">
            <summary>
              Looks up a localized string similar to Platform.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_STATION_SCALE">
            <summary>
              Looks up a localized string similar to Scale.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_STATION_SIZE">
            <summary>
              Looks up a localized string similar to Size.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_STATION_SLIMPLATFORM">
            <summary>
              Looks up a localized string similar to Slim platform.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_STATION_TITLE">
            <summary>
              Looks up a localized string similar to STATION.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_TRAIN_ADDNEWGROUP">
            <summary>
              Looks up a localized string similar to &amp;Add new group.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_TRAIN_ALREADYPLACED">
            <summary>
              Looks up a localized string similar to This train has already been placed!.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_TRAIN_CANNOTPLACE_NOTRACKS">
            <summary>
              Looks up a localized string similar to Can&apos;t place without tracks!.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_TRAIN_CONFIRMSELL">
            <summary>
              Looks up a localized string similar to Are you sure you want to sell this train?.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_TRAIN_DIAGRAM">
            <summary>
              Looks up a localized string similar to &amp;Diagram:.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_TRAIN_NAME">
            <summary>
              Looks up a localized string similar to &amp;Name:.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_TRAIN_NOCARS">
            <summary>
              Looks up a localized string similar to There are no cars!.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_TRAIN_NORAIL">
            <summary>
              Looks up a localized string similar to There are no tracks.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_TRAIN_PLACE">
            <summary>
              Looks up a localized string similar to Place Train.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_TRAIN_SELL">
            <summary>
              Looks up a localized string similar to &amp;Sell....
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_TRAIN_TRADING">
            <summary>
              Looks up a localized string similar to Buy/Sell.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_TRAIN_TYPE">
            <summary>
              Looks up a localized string similar to &amp;Type:.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.CONTROLLER_TRAINPLACE_TITLE">
            <summary>
              Looks up a localized string similar to TRAIN PLACEMENT.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.FRIDAY">
            <summary>
              Looks up a localized string similar to Fri.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.MAIN_WINDOW_TITLE">
            <summary>
              Looks up a localized string similar to FreeTrain SDL.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.MONDAY">
            <summary>
              Looks up a localized string similar to Mon.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.play">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.SATURDAY">
            <summary>
              Looks up a localized string similar to Sat.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.SDL_NOT_FOUND">
            <summary>
              Looks up a localized string similar to We could not find the TAO SDL Framework\nPlease download it from http://www.taoframework.com/\n\nThis application will now close..
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.SUNDAY">
            <summary>
              Looks up a localized string similar to Sun.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.THURSDAY">
            <summary>
              Looks up a localized string similar to Thu.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.TUESDAY">
            <summary>
              Looks up a localized string similar to Tue.
            </summary>
        </member>
        <member name="P:FreeTrain.Properties.Resources.WEDNESDAY">
            <summary>
              Looks up a localized string similar to Wed.
            </summary>
        </member>
        <member name="T:FreeTrain.Util.ArrayEnumerator">
            <summary>
            Enumerator that works on an array
            </summary>
        </member>
        <member name="M:FreeTrain.Util.ArrayEnumerator.#ctor(System.Array)">
            <summary>
            
            </summary>
            <param name="a"></param>
        </member>
        <member name="P:FreeTrain.Util.ArrayEnumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.ArrayEnumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Util.ArrayEnumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Util.Command.CommandHandler">
            <summary>
            
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="T:FreeTrain.Util.Command.CommandHandlerNoArg">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Util.Command.Command">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Util.Command.Command.commandInstances">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Util.Command.Command.manager">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Util.Command.Command.tag">
            <summary> Application specified tag value. </summary>
        </member>
        <member name="M:FreeTrain.Util.Command.Command.#ctor(FreeTrain.Util.Command.CommandManager)">
            <summary>
            
            </summary>
            <param name="manager"></param>
        </member>
        <member name="M:FreeTrain.Util.Command.Command.Execute">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.Command.Command.Update">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Util.Command.Command.Enabled">
            <summary> Enables or disables this command. </summary>
        </member>
        <member name="P:FreeTrain.Util.Command.Command.Checked">
            <summary> Adds or removes a check from this command. </summary>
        </member>
        <member name="P:FreeTrain.Util.Command.Command.Text">
            <summary> Sets the text of this command. </summary>
        </member>
        <member name="E:FreeTrain.Util.Command.Command.OnUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="E:FreeTrain.Util.Command.Command.OnExecute">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.Command.Command.addExecuteHandler(FreeTrain.Util.Command.CommandHandler)">
            <summary>
            
            </summary>
            <param name="h"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Util.Command.Command.addExecuteHandler(FreeTrain.Util.Command.CommandHandlerNoArg)">
            <summary>
            
            </summary>
            <param name="h"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Util.Command.Command.addDialogExecuteHandler(System.Type,System.Windows.Forms.IWin32Window)">
            <summary>
            Registers an execute handler that invokes a new dialog.
            </summary>
        </member>
        <member name="M:FreeTrain.Util.Command.Command.addUpdateHandler(FreeTrain.Util.Command.CommandHandler)">
            <summary>
            
            </summary>
            <param name="h"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Util.Command.Command.DialogExecutor.handle(FreeTrain.Util.Command.Command)">
            <summary>
            
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="T:FreeTrain.Util.Command.Command.CommandInstanceList">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.Command.Command.CommandInstanceList.Add(System.Object)">
            <summary>
            
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:FreeTrain.Util.Command.Command.CommandInstanceList.AddAll(System.Object[])">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:FreeTrain.Util.Command.Command.CommandInstanceList.Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="instance"></param>
        </member>
        <member name="P:FreeTrain.Util.Command.Command.CommandInstanceList.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Util.Command.Command.CommandInstanceList.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="T:FreeTrain.Util.Command.CommandExecutor">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Util.Command.CommandExecutor.hashInstances">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.Command.CommandExecutor.InstanceAdded(System.Object,FreeTrain.Util.Command.Command)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="cmd"></param>
        </member>
        <member name="M:FreeTrain.Util.Command.CommandExecutor.GetCommandForInstance(System.Object)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Util.Command.CommandExecutor.Enable(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="bEnable"></param>
        </member>
        <member name="M:FreeTrain.Util.Command.CommandExecutor.Check(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="bCheck"></param>
        </member>
        <member name="M:FreeTrain.Util.Command.CommandExecutor.SetText(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="text"></param>
        </member>
        <member name="T:FreeTrain.Util.Command.MenuCommandExecutor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.Command.MenuCommandExecutor.InstanceAdded(System.Object,FreeTrain.Util.Command.Command)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="cmd"></param>
        </member>
        <member name="M:FreeTrain.Util.Command.MenuCommandExecutor.Enable(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="bEnable"></param>
        </member>
        <member name="M:FreeTrain.Util.Command.MenuCommandExecutor.Check(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="bCheck"></param>
        </member>
        <member name="M:FreeTrain.Util.Command.MenuCommandExecutor.SetText(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="text"></param>
        </member>
        <member name="T:FreeTrain.Util.Command.ToolbarCommandExecutor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.Command.ToolbarCommandExecutor.InstanceAdded(System.Object,FreeTrain.Util.Command.Command)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="cmd"></param>
        </member>
        <member name="M:FreeTrain.Util.Command.ToolbarCommandExecutor.Enable(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="bEnable"></param>
        </member>
        <member name="M:FreeTrain.Util.Command.ToolbarCommandExecutor.Check(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="bCheck"></param>
        </member>
        <member name="M:FreeTrain.Util.Command.ToolbarCommandExecutor.SetText(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="text"></param>
        </member>
        <member name="T:FreeTrain.Util.Command.LabelCommandExecutor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.Command.LabelCommandExecutor.Enable(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="bEnable"></param>
        </member>
        <member name="M:FreeTrain.Util.Command.LabelCommandExecutor.Check(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="bCheck"></param>
        </member>
        <member name="M:FreeTrain.Util.Command.LabelCommandExecutor.SetText(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="text"></param>
        </member>
        <member name="T:FreeTrain.Util.Command.StatusBarPanelCommandExecutor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.Command.StatusBarPanelCommandExecutor.Enable(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="bEnable"></param>
        </member>
        <member name="M:FreeTrain.Util.Command.StatusBarPanelCommandExecutor.Check(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="bCheck"></param>
        </member>
        <member name="M:FreeTrain.Util.Command.StatusBarPanelCommandExecutor.SetText(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="text"></param>
        </member>
        <member name="T:FreeTrain.Util.Command.ButtonCommandExecutor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.Command.ButtonCommandExecutor.Enable(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="bEnable"></param>
        </member>
        <member name="M:FreeTrain.Util.Command.ButtonCommandExecutor.Check(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="bCheck"></param>
        </member>
        <member name="M:FreeTrain.Util.Command.ButtonCommandExecutor.SetText(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="text"></param>
        </member>
        <member name="M:FreeTrain.Util.Command.ButtonCommandExecutor.InstanceAdded(System.Object,FreeTrain.Util.Command.Command)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="cmd"></param>
        </member>
        <member name="T:FreeTrain.Util.Command.CommandManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.Command.CommandManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.Command.CommandManager.updateAll">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Util.Controls.DDTreeView">
            <summary>
            TreeView control with drag-n-drop functionality
            </summary>
        </member>
        <member name="M:FreeTrain.Util.Controls.DDTreeView.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.Controls.DDTreeView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Util.Controls.DDTreeView.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Util.Controls.DDTreeView.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Util.Controls.DDTreeView.OnItemMoved(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNode)">
            <summary>
            This method is called when a drag-n-drop is completed.
            </summary>
            <param name="node">A node being dragged</param>
            <param name="newParent">new parent node</param>
        </member>
        <member name="F:FreeTrain.Util.Controls.DDTreeView.ItemMoved">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Util.Controls.ItemMovedHandler">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="newParent"></param>
        </member>
        <member name="T:FreeTrain.Util.Controls.DDTreeNode">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.Controls.DDTreeNode.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.Controls.DDTreeNode.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="F:FreeTrain.Util.Controls.DDTreeNode.canAcceptDrop">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Util.Controls.ToolBarCustomizerUI">
            <summary>
            Implements a context menu for toolbar and allows the player
            to move toolbars around.
            </summary>
        </member>
        <member name="M:FreeTrain.Util.Controls.ToolBarCustomizerUI.attach(System.Windows.Forms.ToolBar)">
            <summary>
            Attachs to the given toolbar.
            </summary>
        </member>
        <member name="T:FreeTrain.Util.CurrencyUtil">
            <summary>
            Currency converter.
            </summary>
        </member>
        <member name="M:FreeTrain.Util.CurrencyUtil.format(System.Int64)">
            <summary>
            Format to a string
            </summary>
        </member>
        <member name="T:FreeTrain.Util.FontInfo">
            <summary>
            LOGFONT structure that keeps all the information of Font.
            
            <c>Font</c> doesn't work with XML serialization, but this one does.
            </summary>
        </member>
        <member name="F:FreeTrain.Util.FontInfo.fontName">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Util.FontInfo.unit">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Util.FontInfo.size">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Util.FontInfo.style">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.FontInfo.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.FontInfo.#ctor(System.Drawing.Font)">
            <summary>
            
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FreeTrain.Util.FontInfo.createFont">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Util.LongTask">
            <summary>
            Provides a simple UI feedback.
            </summary>
        </member>
        <member name="M:FreeTrain.Util.LongTask.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.LongTask.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Util.PriorityQueue">
            <summary>
            Priority queue implementation
            </summary>
        </member>
        <member name="M:FreeTrain.Util.PriorityQueue.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.PriorityQueue.#ctor(System.Collections.IComparer)">
            <summary>
            
            </summary>
            <param name="comp"></param>
        </member>
        <member name="F:FreeTrain.Util.PriorityQueue.core">
            <summary>
            Actual data structure that realizes the priority queue.
            </summary>
        </member>
        <member name="M:FreeTrain.Util.PriorityQueue.insert(System.Object,System.Object)">
            <summary>
            Inserts a new object into the queue.
            </summary>
        </member>
        <member name="T:FreeTrain.Util.PriorityQueue.ValueComparer">
            <summary>
            
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Util.PriorityQueue.setValueComparer(FreeTrain.Util.PriorityQueue.ValueComparer)">
            <summary>
            
            </summary>
            <param name="vc"></param>
        </member>
        <member name="M:FreeTrain.Util.PriorityQueue.remove(System.Object)">
            <summary>
            Removes all the items that has the given value.
            </summary>
        </member>
        <member name="P:FreeTrain.Util.PriorityQueue.minValue">
            <summary>
            Gets the object with the lowest priority.
            </summary>
        </member>
        <member name="P:FreeTrain.Util.PriorityQueue.minPriority">
            <summary>
            Gets the lowest priority in the queue.
            </summary>
        </member>
        <member name="P:FreeTrain.Util.PriorityQueue.count">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.PriorityQueue.removeMin">
            <summary>
            Removes the object with the lowest priority.
            </summary>
        </member>
        <member name="F:FreeTrain.Util.PriorityQueue.idGen">
            <summary>Used to generate unique id numbers.</summary>
        </member>
        <member name="T:FreeTrain.Util.PriorityQueue.Entry">
            <summary>
            This object will be stored into the SortedList.
            </summary>
        </member>
        <member name="M:FreeTrain.Util.PriorityQueue.Entry.#ctor(System.Object,System.Object,System.Collections.IComparer,System.Int32)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="v"></param>
            <param name="c"></param>
            <param name="_id"></param>
        </member>
        <member name="F:FreeTrain.Util.PriorityQueue.Entry.priority">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Util.PriorityQueue.Entry.value">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Util.PriorityQueue.Entry.id">
            <summary>
            Unique id that is used to introduce the order relationship between
            two objects with the same priority.
            </summary>
        </member>
        <member name="M:FreeTrain.Util.PriorityQueue.Entry.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Util.Set">
            <summary>
            java.util.Set
            </summary>
        </member>
        <member name="M:FreeTrain.Util.Set.Contains(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Util.Set.Add(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Util.Set.Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:FreeTrain.Util.Set.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Util.Set.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Util.Set.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Util.Set.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Util.Set.IsEmpty">
            <summary>
            
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.Set.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Util.Set.GetOne">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Util.Set.ToArray(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Util.Set.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="T:FreeTrain.Util.Translation">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.Translation.GetString(System.String)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Util.UrlInvoker">
            <summary>
            UrlInvoker の概要の説明です。
            </summary>
        </member>
        <member name="M:FreeTrain.Util.UrlInvoker.OpenUrl(System.String)">
            <summary>
            
            </summary>
            <param name="targetUrl"></param>
        </member>
        <member name="T:FreeTrain.Util.WindowStateTracker">
            <summary>
            Persist window state/location across application sessions.
            </summary>
        </member>
        <member name="F:FreeTrain.Util.WindowStateTracker.owner">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Util.WindowStateTracker.state">
            <summary> This object receives the window size/position information. </summary>
        </member>
        <member name="M:FreeTrain.Util.WindowStateTracker.#ctor(System.Windows.Forms.Form,FreeTrain.Util.PersistentWindowState)">
            <summary>
            
            
            </summary>
            <param name="_owner"></param>
            <param name="_state"></param>
        </member>
        <member name="T:FreeTrain.Util.PersistentWindowState">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Util.PersistentWindowState.left">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Util.PersistentWindowState.top">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Util.PersistentWindowState.height">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Util.PersistentWindowState.width">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Util.PersistentWindowState.windowState">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.PersistentWindowState.set(FreeTrain.Util.PersistentWindowState)">
            <summary>
            
            </summary>
            <param name="rhs"></param>
        </member>
        <member name="M:FreeTrain.Util.PersistentWindowState.save">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.PersistentWindowState.load">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Util.XmlPersistentWindowState">
            <summary>
            Store window state in an XML file.
            </summary>
        </member>
        <member name="M:FreeTrain.Util.XmlPersistentWindowState.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="_fileName"></param>
        </member>
        <member name="M:FreeTrain.Util.XmlPersistentWindowState.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.XmlPersistentWindowState.save">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Util.XmlPersistentWindowState.load">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Views.IView">
            <summary>
            Viewからコンテナに対するインターフェース
            </summary>
        </member>
        <member name="M:FreeTrain.Views.IView.show(System.Windows.Forms.Form)">
            <summary>Starts displaying view window(s).</summary>
        </member>
        <member name="M:FreeTrain.Views.IView.close">
            <summary>Closes and disposes view window(s)</summary>
        </member>
        <member name="T:FreeTrain.Views.AbstractView">
            <summary>
            Partial default implementation of IView for
            those views that only have one Form as its window.
            </summary>
        </member>
        <member name="F:FreeTrain.Views.AbstractView.form">
            <summary>
            Reference to the view window.
            </summary>
        </member>
        <member name="M:FreeTrain.Views.AbstractView.#ctor(System.Windows.Forms.Form)">
            <summary>
            
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:FreeTrain.Views.AbstractView.show(System.Windows.Forms.Form)">
            <summary>
            
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:FreeTrain.Views.AbstractView.close">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Views.OptionChangedHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Views.NightSpriteMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Views.NightSpriteMode.AlignClock">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Views.NightSpriteMode.AlwaysDay">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Views.NightSpriteMode.AlwaysNight">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Views.GlobalViewOptions">
            <summary>
            GlobalViewOptions の概要の説明です。
            </summary>
        </member>
        <member name="M:FreeTrain.Views.GlobalViewOptions.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Views.GlobalViewOptions.OnViewOptionChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Views.GlobalViewOptions.NightSpriteMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Views.GlobalViewOptions.UseNightView">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Views.IMapOverlay">
            <summary>
            Modifies the image of map view window
            by overlaying additional data to it.
            </summary>
        </member>
        <member name="M:FreeTrain.Views.IMapOverlay.DrawBefore(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext)">
            <summary>
            Called before any voxel is drawn.
            </summary>
        </member>
        <member name="M:FreeTrain.Views.IMapOverlay.DrawVoxel(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext,FreeTrain.World.Location,System.Drawing.Point)">
            <summary>
            Called for each voxel that the view is trying to draw.
            </summary>
        </member>
        <member name="M:FreeTrain.Views.IMapOverlay.DrawAfter(FreeTrain.Views.QuarterViewDrawer,FreeTrain.World.DrawContext)">
            <summary>
            Called after all the images are drawn by MapView.
            This can be used to draw things that will never be
            hidden by any objects in the World.
            </summary>
        </member>
        <member name="T:FreeTrain.Views.Map.HeightCutWindow">
            <summary>
            Window that controls the height cut mode of the given quarter view drawer.
            </summary>
        </member>
        <member name="M:FreeTrain.Views.Map.HeightCutWindow.#ctor(FreeTrain.Views.Map.MapViewWindow,FreeTrain.Views.QuarterViewDrawer)">
            <summary>
            
            </summary>
            <param name="mapView"></param>
            <param name="drawer"></param>
        </member>
        <member name="M:FreeTrain.Views.Map.HeightCutWindow.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:FreeTrain.Views.Map.HeightCutWindow.OnClosed(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:FreeTrain.Views.Map.MapViewWindow">
            <summary>
            Form implementation of the map view.
            </summary>
        </member>
        <member name="F:FreeTrain.Views.Map.MapViewWindow.controller">
            <summary> Store the MapView object attached to it. </summary>
        </member>
        <member name="M:FreeTrain.Views.Map.MapViewWindow.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Views.Map.MapViewWindow.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Views.Map.MapViewWindow.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:FreeTrain.Views.Map.MapViewWindow.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="M:FreeTrain.Views.Map.MapViewWindow.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            <param name="pe"></param>
        </member>
        <member name="M:FreeTrain.Views.Map.MapViewWindow.onSurfaceLost(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Views.Map.MapViewWindow.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            <param name="pevent"></param>
        </member>
        <member name="M:FreeTrain.Views.Map.MapViewWindow.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:FreeTrain.Views.Map.MapViewWindow.dragMode">
            <summary>
            True if the drag-by-mouse mode is on.
            While this mode is on, mouse is captured.
            </summary>
        </member>
        <member name="M:FreeTrain.Views.Map.MapViewWindow.getPoint(System.Windows.Forms.MouseEventArgs)">
            <summary>Converts the moust pos in a MouseEventArgs into a Point obj.</summary>
        </member>
        <member name="M:FreeTrain.Views.Map.MapViewWindow.distance(System.Drawing.Point,System.Drawing.Point)">
            <summary>Computes the distance between two points.</summary>
        </member>
        <member name="M:FreeTrain.Views.Map.MapViewWindow.scrollByDrag(System.Windows.Forms.MouseEventArgs)">
            <summary> Scroll the window to follow the mouse pos. </summary>
            <returns>True if the scrolling was successful.</returns>
        </member>
        <member name="M:FreeTrain.Views.Map.MapViewWindow.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:FreeTrain.Views.Map.MapViewWindow.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:FreeTrain.Views.Map.MapViewWindow.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:FreeTrain.Views.Map.MapViewWindow.OnClosed(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Views.Map.MapViewWindow.OnGotFocus(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FreeTrain.Views.Map.MapViewWindow.moveTo(FreeTrain.World.Location)">
            <summary>
            Moves the map window to display the specified location
            </summary>
        </member>
        <member name="M:FreeTrain.Views.Map.MapViewWindow.isVisible(FreeTrain.World.Location)">
            <summary>
            Determine if the specified location is visible by this view.
            </summary>
        </member>
        <member name="T:FreeTrain.Views.Map.MapViewWindow.HeightCutMenuItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Views.Map.MapViewWindow.HeightCutMenuItem.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Views.Map.MapViewWindow.HeightCutMenuItem.#ctor(FreeTrain.Views.Map.MapViewWindow,System.Int32)">
            <summary>
            
            </summary>
            <param name="owner"></param>
            <param name="height"></param>
        </member>
        <member name="M:FreeTrain.Views.Map.MapViewWindow.HeightCutMenuItem.OnClick(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:FreeTrain.Views.Map.MapView">
            <summary>
            View interface implementation of the map view.
            </summary>
        </member>
        <member name="M:FreeTrain.Views.Map.MapView.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Views.Map.MapView.IsDisposed">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Views.Map.MapView.moveTo(FreeTrain.World.Location)">
            <summary>
            Moves the map window to display the specified location
            </summary>
        </member>
        <member name="M:FreeTrain.Views.Map.MapView.isVisibleInAny(FreeTrain.World.Location)">
            <summary>
            If the specified location is visible by one of the map views currently opened,
            return true. Otherwise false.
            </summary>
        </member>
        <member name="T:FreeTrain.Views.Map.PreviewForm">
            <summary>
            PreviewForm の概要の説明です。
            </summary>
        </member>
        <member name="F:FreeTrain.Views.Map.PreviewForm.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:FreeTrain.Views.Map.PreviewForm.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Views.Map.PreviewForm.MainPanel">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Views.Map.PreviewForm.Dispose(System.Boolean)">
            <summary>
            使用されているリソースに後処理を実行します。
            </summary>
        </member>
        <member name="M:FreeTrain.Views.Map.PreviewForm.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:FreeTrain.Views.NullWeatherOverlay">
            <summary>
            NullWeatherOverlay の概要の説明です。
            </summary>
        </member>
        <member name="F:FreeTrain.Views.NullWeatherOverlay.theInstance">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Views.NullWeatherOverlay.setSize(System.Drawing.Size)">
            <summary>
            
            </summary>
            <param name="sz"></param>
        </member>
        <member name="M:FreeTrain.Views.NullWeatherOverlay.draw(FreeTrain.Views.QuarterViewDrawer,FreeTrain.Framework.Graphics.Surface,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="drawer"></param>
            <param name="target"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.Views.NullWeatherOverlay.onTimerFired">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Views.NullWeatherOverlay.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:FreeTrain.Views.QuarterViewDrawer">
            <summary>
            Draw quarter view of the map and maintain them properly.
            </summary>
        </member>
        <member name="F:FreeTrain.Views.QuarterViewDrawer._enableOverlay">
            <summary>
            True to allow MapOverlay to update the surface.
            </summary>
        </member>
        <member name="F:FreeTrain.Views.QuarterViewDrawer.offscreenBuffer">
            <summary>
            Off-screen buffer that keeps the image of this window.
            </summary>
        </member>
        <member name="P:FreeTrain.Views.QuarterViewDrawer.OffscreenBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Views.QuarterViewDrawer.drawContext">
            <summary>
            Drawing context that wraps <code>offscreenBuffer</code>
            </summary>
        </member>
        <member name="F:FreeTrain.Views.QuarterViewDrawer.dirtyRect">
            <summary>
            Maintains the dirty rect that needs to be updated.
            The coordinate is the (A,B) coordinates.
            </summary>
        </member>
        <member name="F:FreeTrain.Views.QuarterViewDrawer.topLeft">
            <summary>
            The position of the top-left pixel in (A,B) axis.
            </summary>
        </member>
        <member name="F:FreeTrain.Views.QuarterViewDrawer._heightCutHeight">
            <summary>
            Height-cut height. Voxels above this height
            will not be drawn.
            </summary>
        </member>
        <member name="E:FreeTrain.Views.QuarterViewDrawer.OnHeightCutChanged">
            <summary>
            Fired when the height-cut height is changed
            </summary>
        </member>
        <member name="E:FreeTrain.Views.QuarterViewDrawer.OnUpdated">
            <summary>
            Fired when a surface is updated.
            </summary>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.#ctor(FreeTrain.World.WorldDefinition,System.Drawing.Rectangle)">
            <summary></summary>
            <param name="initialView">
            	the region that this object draws in the A,B axis.
            </param>
            <param name="_world"></param>
        </member>
        <member name="F:FreeTrain.Views.QuarterViewDrawer.ViewSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Views.QuarterViewDrawer.Size">
            <summary>
            Size of the view in pixels.
            </summary>
        </member>
        <member name="P:FreeTrain.Views.QuarterViewDrawer.Origin">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Views.QuarterViewDrawer.EnableOverlay">
            <summary>
            
            </summary>
        </member>
        <member name="P:FreeTrain.Views.QuarterViewDrawer.visibleRect">
            <summary>
            Obtain the visible rectangle in (A,B) coordinates.
            </summary>
        </member>
        <member name="P:FreeTrain.Views.QuarterViewDrawer.HeightCutHeight">
            <summary>
            Height-cut height. Voxels above this height
            will not be drawn.
            
            Note that setting <code>world.size.z-1</code> will cause
            all the voxels to be drawn.
            </summary>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.RecreateDrawBuffer(System.Drawing.Size,System.Boolean)">
            <summary>
            Recreates the offscreen drawing surface.
            </summary>
            <param name="forceRecreate">
            Set this flag to true to force the release of the surface.
            This is useful when you absolutely wants a fresh surface
            (such as when the current surface is lost)
            </param>
            <param name="size"></param>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.IsVisible(FreeTrain.World.Location)">
            <summary>
            Return true if the given voxel is visible.
            </summary>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.OnUpdateVoxel(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc"></param>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.OnUpdateVoxel(FreeTrain.World.Cube)">
            <summary>
            
            </summary>
            <param name="cube"></param>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.OnUpdateAllVoxels">
            <summary>
            Invalidate the entire visible region.
            </summary>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.shouldDrawGround(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if we need to draw a ground surface.
            </summary>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.Draw(System.Drawing.Rectangle,FreeTrain.Views.IMapOverlay)">
            <summary>
            Redraw the specified region.
            Should be used only from the draw() method.
            </summary>
            <param name="rectAB">Rectangle in the (A,B) coordinates.</param>
            <param name="overlay"></param>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.UpdateScreen">
            <summary>
            Update the surface by redrawing necessary parts.
            </summary>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.Draw(FreeTrain.Framework.Graphics.Surface,System.Drawing.Point)">
            <summary>
            Draw the view to the specified point of the given surface.
            </summary>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.onSurfaceLost(System.Object,System.EventArgs)">
            <summary>
            Event handler of the onSurfaceLost event. Reallocate the back buffer
            and force redraw.
            </summary>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.CreateBitmap">
            <summary>
            Obtains the image as a bitmap.
            </summary>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.fromClientToAB(System.Drawing.Point)">
            <summary>
            Convert the client coordinates to the (A,B) coordinates.
            </summary>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.fromABToClient(System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.fromABToClient(System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.fromClientToAB(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.fromABToClient(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.fromABToXYZ(System.Int32,System.Int32,FreeTrain.Controllers.IModalController)">
            <summary>
            Converts the (A,B) coordinates to (X,Y,Z) coordinates.
            </summary>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.fromABToXYZ(System.Drawing.Point,FreeTrain.Controllers.IModalController)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.fromClientToXYZ(System.Windows.Forms.MouseEventArgs,FreeTrain.Controllers.IModalController)">
            <summary>
            Converts the mouse coordinate (which is client coordinate)
            to (X,Y) coordinates.
            </summary>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.fromClientToXYZ(System.Int32,System.Int32,FreeTrain.Controllers.IModalController)">
            <summary>
            
            </summary>
            <param name="cx"></param>
            <param name="cy"></param>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.fromXYZToClient(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.fromXYZToClient(FreeTrain.World.Location)">
            <summary>
            
            </summary>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.fromABToHV(System.Drawing.Rectangle)">
            <summary>
            Obtain the bounding rectangle in the (H,V) coordinates
            that completely covers the given rect of the (A,B) coordinates.
            All the corners of the result is inclusive.
            </summary>
        </member>
        <member name="M:FreeTrain.Views.QuarterViewDrawer.fromHVZToClient(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts the (H,V,Z) coordinates to the client coordinates.
            </summary>
            <param name="h"></param>
            <param name="v"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Views.IWeatherOverlay">
            <summary>
            Draws overlay images to a QuarterViewDrawer.
            </summary>
        </member>
        <member name="M:FreeTrain.Views.IWeatherOverlay.setSize(System.Drawing.Size)">
            <summary>
            Called when the size of the QuarterViewDrawer is changed.
            </summary>
        </member>
        <member name="M:FreeTrain.Views.IWeatherOverlay.draw(FreeTrain.Views.QuarterViewDrawer,FreeTrain.Framework.Graphics.Surface,System.Drawing.Point)">
            <summary>
            Draws the contents of the given drawer with the overlay
            to the target image.
            </summary>
        </member>
        <member name="M:FreeTrain.Views.IWeatherOverlay.onTimerFired">
            <summary>
            TBD: Periodical timer notification.
            </summary>
            <returns>
            true if the screen needs to be updated.
            </returns>
        </member>
        <member name="T:FreeTrain.Views.WeatherOverlayImpl">
            <summary>
            WeatherOverlayImpl の概要の説明です。
            </summary>
        </member>
        <member name="M:FreeTrain.Views.WeatherOverlayImpl.#ctor(FreeTrain.Views.WeatherOverlaySpriteSet)">
            <summary>
            
            </summary>
            <param name="_spriteSet"></param>
        </member>
        <member name="M:FreeTrain.Views.WeatherOverlayImpl.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Views.WeatherOverlayImpl.setSize(System.Drawing.Size)">
            <summary>
            
            </summary>
            <param name="sz"></param>
        </member>
        <member name="M:FreeTrain.Views.WeatherOverlayImpl.draw(FreeTrain.Views.QuarterViewDrawer,FreeTrain.Framework.Graphics.Surface,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="drawer"></param>
            <param name="target"></param>
            <param name="pt"></param>
        </member>
        <member name="M:FreeTrain.Views.WeatherOverlayImpl.onTimerFired">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:FreeTrain.Views.WeatherOverlaySpriteSet">
            <summary>
            sprite images.
            </summary>
        </member>
        <member name="F:FreeTrain.Views.WeatherOverlaySpriteSet.overlayImages">
            <summary>
            
            </summary>
        </member>
        <member name="F:FreeTrain.Views.WeatherOverlaySpriteSet.imageSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:FreeTrain.Views.WeatherOverlaySpriteSet.#ctor(System.String,System.Int32,System.Drawing.Size)">
            <summary>
            
            </summary>
            <param name="pictureId"></param>
            <param name="frameLength"></param>
            <param name="sz"></param>
        </member>
    </members>
</doc>
